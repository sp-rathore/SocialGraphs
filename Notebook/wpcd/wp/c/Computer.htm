<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Computer,16-bit,2006,32-bit,3D computer graphics,3D modeler,4-bit,64-bit,6502,68000,8-bit" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Computer</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";

			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Computer";
			var wgTitle = "Computer";
			var wgArticleId = 7878457;
			var wgCurRevisionId = 92792361;
			var wgIsArticle = true;
		
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Computer">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Computer</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computing_hardware_and_infrastructure.htm">Computing hardware and infrastructure</a></h3>
      <!-- start content -->
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/174/17425.jpg.htm" title="Part of the NASA Columbia supercomputer."><img alt="Part of the NASA Columbia supercomputer." height="131" longdesc="/wiki/Image:Columbia_Supercomputer_-_NASA_Advanced_Supercomputing_Facility.jpg" src="../../images/174/17425.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17425.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> Part of the <!--del_lnk--> NASA <!--del_lnk--> Columbia supercomputer.</div>
       </div>
      </div>
      <p>A <b>computer</b> is a <!--del_lnk--> machine for manipulating <!--del_lnk--> data according to a list of <!--del_lnk--> instructions, or <b><!--del_lnk--> program</b>.<p>The ability to store and execute stored programs&mdash;that is, programmability&mdash;makes computers extremely versatile and distinguishes them from <!--del_lnk--> calculators. The <!--del_lnk--> Church&ndash;Turing thesis is a mathematical statement of this versatility: Any computer with a certain minimum capability is, in principle, capable of performing the same tasks that any other computer can perform. Therefore, computers with capability and complexity ranging from that of a <!--del_lnk--> personal digital assistant to a <!--del_lnk--> supercomputer are all able to perform the same computational tasks so long as time and storage capacity are not considerations.<div class="thumb tright">
       <div style="width:227px;"><a class="internal" href="../../images/174/17426.jpg.htm" title="A computer in a wristwatch."><img alt="A computer in a wristwatch." height="338" longdesc="/wiki/Image:Stevemannwristcomp.jpg" src="../../images/174/17426.jpg" width="225" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17426.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> A computer in a wristwatch.</div>
       </div>
      </div>
      <p>Computers take numerous physical forms. Early electronic computers were the size of a large room, consuming as much power as several hundred modern personal computers.  Today, computers can be made small enough to fit into a <a href="../../wp/w/Watch.htm" title="Watch">wrist watch</a> and powered from a <!--del_lnk--> watch battery. However, large-scale computing facilities still exist for specialized <!--del_lnk--> scientific computation and for the <!--del_lnk--> transaction processing requirements of large organizations. Society has come to recognize <!--del_lnk--> personal computers and their portable equivalent, the <!--del_lnk--> laptop computer, as icons of the <!--del_lnk--> information age; they are what most people think of as &quot;a computer&quot;. However, the most common form of computer in use today is by far the <!--del_lnk--> embedded computer. Embedded computers are small, simple devices that are often used to control other devices&mdash;for example, they are used to control machines from <!--del_lnk--> fighter aircraft to <!--del_lnk--> industrial robots, <!--del_lnk--> digital cameras, and even <a href="../../wp/t/Toy.htm" title="Toy">children&#39;s toys</a>.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="History_of_computing" name="History_of_computing"></a><h2><span class="mw-headline">History of computing</span></h2>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/174/17427.jpg.htm" title="The Jacquard loom was one of the first programmable devices."><img alt="The Jacquard loom was one of the first programmable devices." height="241" longdesc="/wiki/Image:Jacquard.loom.full.view.jpg" src="../../images/174/17427.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17427.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> The <!--del_lnk--> Jacquard loom was one of the first programmable devices.</div>
       </div>
      </div>
      <p>The question of which was the earliest computer is a difficult one. The very definition of what a computer is has changed over the years and it is therefore impossible to definitively answer the question. Many devices once called &quot;computers&quot; would no longer qualify as such by today&#39;s standards.<p>Originally, the term &quot;computer&quot; referred to a person who performed numerical calculations (a <!--del_lnk--> human computer), often with the aid of a <!--del_lnk--> mechanical calculating device. Examples of early mechanical computing devices included the <a href="../../wp/a/Abacus.htm" title="Abacus">abacus</a>, the <!--del_lnk--> slide rule and arguably the <!--del_lnk--> astrolabe and the <!--del_lnk--> Antikythera mechanism (which dates from about 87 BC). The end of the <a href="../../wp/m/Middle_Ages.htm" title="Middle Ages">Middle Ages</a> saw a re-invigoration of European mathematics and engineering, and <!--del_lnk--> Wilhelm Schickard&#39;s 1623 device was the first of a number of mechanical calculators constructed by European engineers.<p>However, none of those devices fit the modern definition of a computer because they could not be programmed. In 1801, <!--del_lnk--> Joseph Marie Jacquard made an improvement to the <!--del_lnk--> textile loom that used a series of <!--del_lnk--> punched paper cards as a template to allow his loom to weave intricate patterns automatically. While the resulting <!--del_lnk--> Jacquard loom is not considered to be a computer, it was an important step because the use of punched cards to define woven patterns can be viewed as an early, albeit limited, form of programmability.<p>In 1837, <a href="../../wp/c/Charles_Babbage.htm" title="Charles Babbage">Charles Babbage</a> was the first to conceptualize and design a fully programmable mechanical computer that he called &quot;The <!--del_lnk--> Analytical Engine&quot;. Due to limits of finances, and an inability to resist tinkering with the design, Babbage never actually built his Analytical Engine.<p>Large-scale automated data processing of punched cards was performed for the <!--del_lnk--> US Census in 1890 by <!--del_lnk--> tabulating machines designed by <!--del_lnk--> Herman Hollerith and manufactured by the <!--del_lnk--> Computing Tabulating Recording Corporation (CTR), which later became <!--del_lnk--> IBM. So by the end of the 19th century a number of technologies that would later prove useful in the realization of practical computers had begun to appear: the <!--del_lnk--> punched card, <!--del_lnk--> boolean algebra, the <!--del_lnk--> vacuum tube (thermionic valve) and the <!--del_lnk--> teleprinter.<p>During the first half of the 20th century, many scientific computing needs were met by increasingly sophisticated <!--del_lnk--> analog computers, which used a direct mechanical or <a href="../../wp/e/Electricity.htm" title="Electricity">electrical</a> model of the problem as a basis for computation. However, these were not programmable and generally lacked the versatility and accuracy of modern digital computers.<table class="wikitable" style="margin: 1em auto 1em auto">
       <caption><i>Defining characteristics of five first operative digital computers</i></caption>
       <tr>
        <th width="150px">Computer</th>
        <th width="65px">Nation</th>
        <th width="65px">Shown working</th>
        <th width="65px"><!--del_lnk--> Binary</th>
        <th width="65px"><a href="../../wp/e/Electronics.htm" title="Electronics">Electronic</a></th>
        <th width="150px"><!--del_lnk--> Programmable</th>
        <th width="65px"><!--del_lnk--> Turing<br /> complete</th>
       </tr>
       <tr>
        <td><!--del_lnk--> Zuse <!--del_lnk--> Z3</td>
        <td>Germany</td>
        <td>May 1941</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #90ff90">By punched <!--del_lnk--> film stock</td>
        <td style="background: #90ff90">Yes <small style="line-height:130%">(<!--del_lnk--> 1998)</small></td>
       </tr>
       <tr>
        <td><!--del_lnk--> Atanasoff-Berry Computer</td>
        <td>USA</td>
        <td>Summer 1941</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #ff9090">No</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Colossus computer</td>
        <td>UK</td>
        <td>1943</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #ffff90">Partially, by rewiring</td>
        <td style="background: #ff9090">No</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Harvard Mark I/IBM ASCC</td>
        <td>USA</td>
        <td>1944</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #90ff90">By punched paper tape</td>
        <td style="background: #ff9090">No</td>
       </tr>
       <tr>
        <td rowspan="2"><!--del_lnk--> ENIAC</td>
        <td rowspan="2">USA</td>
        <td>1944</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #ffff90">Partially, by rewiring</td>
        <td style="background: #90ff90">Yes</td>
       </tr>
       <tr>
        <td>1948</td>
        <td style="background: #ff9090">No</td>
        <td style="background: #90ff90">Yes</td>
        <td style="background: #90ff90">By Function Table <!--del_lnk--> ROM</td>
        <td style="background: #90ff90">Yes</td>
       </tr>
      </table>
      <p>
       <br />
      <p>A succession of steadily more powerful and flexible computing devices were constructed in the 1930s and 1940s, gradually adding the key features that are seen in modern computers. The use of digital electronics (largely invented by <!--del_lnk--> Claude Shannon in 1937) and more flexible programmability were vitally important steps, but defining one point along this road as &quot;the first digital electronic computer&quot; is difficult . Notable achievements include:<div class="thumb tright">
       <div style="width:202px;"><a class="internal" href="../../images/174/17428.jpg.htm" title="EDSAC was one of the first computers to implement the stored program (von Neumann) architecture."><img alt="EDSAC was one of the first computers to implement the stored program (von Neumann) architecture." height="244" longdesc="/wiki/Image:EDSAC_%2810%29.jpg" src="../../images/174/17428.jpg" width="200" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17428.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> EDSAC was one of the first computers to implement the stored program (<!--del_lnk--> von Neumann) architecture.</div>
       </div>
      </div>
      <ul>
       <li>The <!--del_lnk--> Atanasoff-Berry Computer (1941) which used vacuum tube based computation, <!--del_lnk--> binary numbers, and <!--del_lnk--> regenerative capacitor memory.<li><!--del_lnk--> Konrad Zuse&#39;s <!--del_lnk--> electromechanical &quot;Z machines&quot;. The <!--del_lnk--> Z3 (1941) was the first working machine featuring binary arithmetic and a measure of programmability.<li>The secret British <!--del_lnk--> Colossus computer (1944), which had limited programmability but demonstrated that a device using thousands of tubes could be reasonably reliable and electronically reprogrammable. It was used for <!--del_lnk--> breaking German wartime codes.<li>The <!--del_lnk--> Harvard Mark I (1944), a large-scale electromechanical computer with limited programmability.<li>The US Army&#39;s <!--del_lnk--> Ballistics Research Laboratory <!--del_lnk--> ENIAC (1946), which used <!--del_lnk--> decimal arithmetic and was the first general purpose electronic computer, although it initially had an inflexible architecture which essentially required rewiring to change its programming.</ul>
      <p>Several developers of ENIAC, recognizing its flaws, came up with a far more flexible and elegant design, which came to be known as the <b>stored program architecture</b> or <!--del_lnk--> von Neumann architecture. This design was first formally described by <a href="../../wp/j/John_von_Neumann.htm" title="John von Neumann">John von Neumann</a> in the paper &quot;<!--del_lnk--> First Draft of a Report on the EDVAC&quot;, published in 1945. A number of projects to develop computers based on the stored program architecture commenced around this time; the first of these being completed in <a href="../../wp/g/Great_Britain.htm" title="Great Britain">Great Britain</a>. The first to be demonstrated working was the <!--del_lnk--> Manchester Small-Scale Experimental Machine (SSEM) or &quot;Baby&quot;. However, the <!--del_lnk--> EDSAC, completed a year after SSEM, was perhaps the first practical implementation of the stored program design. Shortly thereafter, the machine originally described by von Neumann&#39;s paper&mdash;<!--del_lnk--> EDVAC&mdash;was completed but didn&#39;t see full-time use for an additional two years.<p>Nearly all modern computers implement some form of the stored program architecture, making it the single trait by which the word &quot;computer&quot; is now defined. By this standard, many earlier devices would no longer be called computers by today&#39;s definition, but are usually referred to as such in their historical context. While the technologies used in computers have changed dramatically since the first electronic, general-purpose computers of the 1940s, most still use the <!--del_lnk--> von Neumann architecture. The design made the universal computer a practical reality.<div class="thumb tright">
       <div style="width:202px;"><a class="internal" href="../../images/170/17007.jpg.htm" title="Microprocessors are miniaturized devices that often implement stored program CPUs."><img alt="Microprocessors are miniaturized devices that often implement stored program CPUs." height="149" longdesc="/wiki/Image:80486dx2-large.jpg" src="../../images/174/17429.jpg" width="200" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/170/17007.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Microprocessors are miniaturized devices that often implement stored program <!--del_lnk--> CPUs.</div>
       </div>
      </div>
      <p><!--del_lnk--> Vacuum tube-based computers were in use throughout the 1950s, but were largely replaced in the 1960s by <!--del_lnk--> transistor-based devices, which were smaller, faster, cheaper, used less power and were more reliable. These factors allowed computers to be produced on an unprecedented commercial scale. By the 1970s, the adoption of <a href="../../wp/i/Integrated_circuit.htm" title="Integrated circuit">integrated circuit</a> technology and the subsequent creation of <!--del_lnk--> microprocessors such as the <!--del_lnk--> Intel 4004 caused another leap in size, speed, cost and reliability. By the 1980s, computers had become sufficiently small and cheap to replace simple mechanical controls in domestic appliances such as <!--del_lnk--> washing machines. Around the same time, computers became widely accessible for personal use by individuals in the form of <!--del_lnk--> home computers and the now ubiquitous <!--del_lnk--> personal computer. In conjunction with the widespread growth of the <a href="../../wp/i/Internet.htm" title="Internet">Internet</a> since the 1990s, personal computers are becoming as common as the <a href="../../wp/t/Television.htm" title="Television">television</a> and the <a href="../../wp/t/Telephone.htm" title="Telephone">telephone</a> and almost all modern electronic devices contain a computer of some kind.<br style="clear:both" />
      <p><a id="Stored_program_architecture" name="Stored_program_architecture"></a><h2><span class="mw-headline">Stored program architecture</span></h2>
      <dl>
       <dd>
      </dl>
      <p>The defining feature of modern computers which distinguishes them from all other machines is that they can be <a href="../../wp/c/Computer_programming.htm" title="Computer programming">programmed</a>. That is to say that a list of <!--del_lnk--> instructions (the <!--del_lnk--> program) can be given to the computer and it will store them and carry them out at some time in the future.<p>In most cases, computer instructions are simple: add one number to another, move some data from one location to another, send a message to some external device, etc. These instructions are read from the computer&#39;s <!--del_lnk--> memory and are generally carried out (<!--del_lnk--> executed) in the order they were given. However, there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there. These are called &quot;jump&quot; instructions (or <!--del_lnk--> branches). Furthermore, jump instructions may be made to happen <!--del_lnk--> conditionally so that different sequences of instructions may be used depending on the result of some previous calculation or some external event. Many computers directly support <!--del_lnk--> subroutines by providing a type of jump that &quot;remembers&quot; the location it jumped from and another instruction to return to that point.<p>Program execution might be likened to reading a book. While a person will normally read each word and line in sequence, they may at times jump back to an earlier place in the text or skip sections that are not of interest. Similarly, a computer may sometimes go back and repeat the instructions in some section of the program over and over again until some internal condition is met. This is called the <!--del_lnk--> flow of control within the program and it is what allows the computer to perform tasks repeatedly without human intervention.<p>Comparatively, person using a <!--del_lnk--> pocket calculator can perform a basic arithmetic operation such as adding two numbers with just a few button presses. But to add together all of the numbers from 1 to 1,000 would take thousands of button presses and a lot of time&mdash;with a near certainty of making a mistake. On the other hand, a computer may be programmed to do this with just a few simple instructions. For example:<pre>
        mov      #0,sum     ; set sum to 0
        mov      #1,num     ; set num to 1
loop:   add      num,sum    ; add num to sum
        add      #1,num     ; add 1 to num
        cmp      num,#1000  ; compare num to 1000
        ble      loop       ; if num &lt;= 1000, go back to &#39;loop&#39;
        halt                ; end of program. stop running
</pre><p>Once told to run this program, the computer will perform the repetitive addition task without further human intervention. It will almost never make a mistake and a modern PC can complete the task in about a millionth of a second.<p>However, computers cannot &quot;think&quot; for themselves in the sense that they only solve problems in exactly the way they are programmed to. An intelligent human faced with the above addition task might soon realize that instead of actually adding up all the numbers one can simply use the equation<dl>
       <dd><img alt="1+2+3+...+n = {{n(n+1)} \over 2}" class="tex" src="../../images/219/21968.png" /></dl>
      <p>and arrive at the correct answer (500,500) with little work. Many modern computers are able to make some decisions that speed up the execution of some programs by &quot;guessing&quot; about the outcomes of certain jump instructions and re-arranging the order of instructions slightly without changing their meaning (<!--del_lnk--> branch prediction, <!--del_lnk--> speculative execution, and <!--del_lnk--> out-of-order execution). However, computers cannot intuitively determine a more efficient way to perform the task given to them because they do not have an overall understanding of what the task, or the &quot;big picture&quot;, is. In other words, a computer programmed to add up the numbers one by one as in the example above would do exactly that without regard to efficiency or alternative solutions.<p><a id="Programs" name="Programs"></a><h3><span class="mw-headline">Programs</span></h3>
      <div class="thumb tright">
       <div style="width:302px;"><a class="internal" href="../../images/20/2011.jpg.htm" title="A 1970s punched card containing one line from a FORTRAN program. The card reads: &quot;Z(1) = Y + W(1)&quot; and is labelled &quot;PROJ039&quot; for identification purposes."><img alt="A 1970s punched card containing one line from a FORTRAN program. The card reads: &quot;Z(1) = Y + W(1)&quot; and is labelled &quot;PROJ039&quot; for identification purposes." height="144" longdesc="/wiki/Image:FortranCardPROJ039.agr.jpg" src="../../images/20/2011.jpg" width="300" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/20/2011.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> A 1970s <!--del_lnk--> punched card containing one line from a <!--del_lnk--> FORTRAN program. The card reads: &quot;<b>Z(1) = Y + W(1)</b>&quot; and is labelled &quot;<b>PROJ039</b>&quot; for identification purposes.</div>
       </div>
      </div>
      <p>In practical terms, a <b><!--del_lnk--> computer program</b> might include anywhere from a dozen instructions to many millions of instructions for something like a <!--del_lnk--> word processor or a <!--del_lnk--> web browser. A typical modern computer can execute billions of instructions every second and nearly never make a mistake over years of operation.<p>Large computer programs may take teams of <!--del_lnk--> computer programmers years to write and the probability of the entire program having been written completely in the manner intended is unlikely. Errors in computer programs are called <!--del_lnk--> bugs. Sometimes bugs are benign and do not affect the usefulness of the program, in other cases they might cause the program to completely fail (<!--del_lnk--> crash), in yet other cases there may be subtle problems. Sometimes otherwise benign bugs may be used for malicious intent, creating a <!--del_lnk--> security exploit. Bugs are usually not the fault of the computer. Since computers merely execute the instructions they are given, bugs are nearly always the result of programmer error or an oversight made in the program&#39;s design. <p>In most computers, individual instructions are stored as <!--del_lnk--> machine code with each instruction being given a unique number (its operation code or <!--del_lnk--> opcode for short). The command to add two numbers together would have one opcode, the command to multiply them would have a different opcode and so on. The simplest computers are able to perform any of a handful of different instructions, the more complex computers have several hundred to choose from&mdash;each with a unique numerical code. Since the computer&#39;s memory is able to store numbers, it can also store the instruction codes. This leads to the important fact that entire programs (which are just lists of instructions) can be represented as lists of numbers and can themselves be manipulated inside the computer just as if they were numeric data. The fundamental concept of storing programs in the computer&#39;s memory alongside the data they operate on is the crux of the von Neumann, or stored program, architecture. In some cases, a computer might store some or all of its program in memory that is kept separate from the data it operates on. This is called the <!--del_lnk--> Harvard architecture after the <!--del_lnk--> Harvard Mark I computer. Modern von Neumann computers display some traits of the Harvard architecture in their designs, such as in <a href="../../wp/c/CPU_cache.htm" title="CPU cache">CPU caches</a>.<p>While it is possible to write computer programs as long lists of numbers (<!--del_lnk--> machine language) and this technique was used with many early computers, it is extremely tedious to do so in practice, especially for complicated programs. Instead, each basic instruction can be given a short name that is indicative of its function and easy to remember&mdash;a <!--del_lnk--> mnemonic such as ADD, SUB, MULT or JUMP. These mnemonics are collectively known as a computer&#39;s <!--del_lnk--> assembly language. Converting programs written in assembly language into something the computer can actually understand (machine language) is usually done by a computer program called an assembler. Machine languages and the assembly languages that represent them (collectively termed <!--del_lnk--> low-level programming languages) tend to be unique to a particular type of computer. This means that an <!--del_lnk--> ARM architecture computer (such as may be found in a <!--del_lnk--> PDA or a <!--del_lnk--> hand-held videogame) cannot understand the machine language of an <!--del_lnk--> Intel Pentium or the <!--del_lnk--> AMD Athlon 64 computer that might be in a <!--del_lnk--> PC.<p>Though considerably easier than in machine language, writing long programs in assembly language is often difficult and error prone. Therefore, most complicated programs are written in more abstract <!--del_lnk--> high-level programming languages that are able to express the needs of the <!--del_lnk--> computer programmer more conveniently (and thereby help reduce programmer error). High level languages are usually &quot;compiled&quot; into machine language (or sometimes into assembly language and then into machine language) using another computer program called a <!--del_lnk--> compiler. Since high level languages are more abstract than assembly language, it is possible to use different compilers to translate the same high level language program into the machine language of many different types of computer. This is part of the means by which software like video games may be made available for different computer architectures such as personal computers and various <!--del_lnk--> video game consoles.<p><a id="Example" name="Example"></a><h3><span class="mw-headline">Example</span></h3>
      <p>Suppose a computer is being employed to drive a <!--del_lnk--> traffic light. A simple stored program might say:<ol>
       <li>Turn off all of the lights<li>Turn on the red light, wait for sixty seconds<li>Turn off the red light, turn on the green light, wait for sixty seconds<li>Turn off the green light, turn on the amber light, wait for two seconds<li>Turn off the amber light<li>Jump to instruction number (2)</ol>
      <p>With this set of instructions, the computer would cycle the light continually through red, green, amber and back to red again until told to stop running the program.<p>However, suppose there is a simple on/off <!--del_lnk--> switch connected to the computer that is intended be used to make the light flash red while some maintenance operation is being performed. The program might then instruct the computer to:<ol>
       <li>Turn off all of the lights<li>Turn on the red light, wait for sixty seconds<li>Turn off the red light, turn on the green light, wait for sixty seconds<li>Turn off the green light, turn on the amber light, wait for two seconds<li>Turn off the amber light<li><b>If the maintenance switch is NOT turned on then jump to instruction number (2)</b><li><b>Turn on the red light, wait for one second</b><li><b>Turn off the red light, wait for one second</b><li><b>Jump to instruction number (6)</b></ol>
      <p>In this manner, the computer is either running the instructions from number (2) to (6) over and over or it&#39;s running the instructions from (6) down to (9) over and over, depending on the position of the switch.<p><a id="How_computers_work" name="How_computers_work"></a><h2><span class="mw-headline">How computers work</span></h2>
      <dl>
       <dd>
      </dl>
      <p>A general purpose computer has four main sections: the <!--del_lnk--> arithmetic and logic unit (ALU), the <!--del_lnk--> control unit, the <!--del_lnk--> memory, and the input and output devices (collectively termed I/O). These parts are interconnected by <!--del_lnk--> busses, often made of groups of <!--del_lnk--> wires.<p>The control unit, ALU, registers, and basic I/O (and often other hardware closely linked with these) are collectively known as a <a href="../../wp/c/Central_processing_unit.htm" title="Central processing unit">central processing unit</a> (CPU). Early CPUs were comprised of many separate components but since the mid-1970s CPUs have typically been constructed on a single <a href="../../wp/i/Integrated_circuit.htm" title="Integrated circuit">integrated circuit</a> called a <i><!--del_lnk--> microprocessor</i>.<p><a id="Control_unit" name="Control_unit"></a><h3><span class="mw-headline">Control unit</span></h3>
      <dl>
       <dd>
      </dl>
      <p>The control unit (often called a control system or central controller) directs the various components of a computer. It reads and interprets (decodes) instructions in the program one by one. The control system decodes each instruction and turns it into a series of control signals that operate the other parts of the computer. Control systems in advanced computers may change the order of some instructions so as to improve performance.<p>A key component common to all CPUs is the <!--del_lnk--> program counter, a special memory cell (a <!--del_lnk--> register) that keeps track of which location in memory the next instruction is to be read from.<div class="thumb tright">
       <div style="width:302px;"><a class="internal" href="../../images/174/17432.png.htm" title="Diagram showing how a particular MIPS architecture instruction would be decoded by the control system."><img alt="Diagram showing how a particular MIPS architecture instruction would be decoded by the control system." height="108" longdesc="/wiki/Image:Mips32_addi.svg" src="../../images/174/17432.png" width="300" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17432.png.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> Diagram showing how a particular <!--del_lnk--> MIPS architecture instruction would be decoded by the control system.</div>
       </div>
      </div>
      <p>The control system&#39;s function is as follows&mdash;note that this is a simplified description and some of these steps may be performed concurrently or in a different order depending on the type of CPU:<ol>
       <li>Read the code for the next instruction from the cell indicated by the program counter.<li>Decode the numerical code for the instruction into a set of commands or signals for each of the other systems.<li>Increment the program counter so it points to the next instruction.<li>Read whatever data the instruction requires from cells in memory (or perhaps from an input device). The location of this required data is typically stored within the instruction code.<li>Provide the necessary data to an ALU or register.<li>If the instruction requires an ALU or specialized hardware to complete, instruct the hardware to perform the requested operation.<li>Write the result from the ALU back to a memory location or to a register or perhaps an output device.<li>Jump back to step (1).</ol>
      <p>Since the program counter is (conceptually) just another set of memory cells, it can be changed by calculations done in the ALU. Adding 100 to the program counter would cause the next instruction to be read from a place 100 locations further down the program. Instructions that modify the program counter are often known as &quot;jumps&quot; and allow for loops (instructions that are repeated by the computer) and often conditional instruction execution (both examples of <!--del_lnk--> control flow).<p>It is noticeable that the sequence of operations that the control unit goes through to process an instruction is in itself like a short computer program - and indeed, in some more complex CPU designs, there is another yet smaller computer called a <!--del_lnk--> microsequencer that runs a <!--del_lnk--> microcode program that causes all of these events to happen.<p><a id="Arithmetic.2Flogic_unit_.28ALU.29" name="Arithmetic.2Flogic_unit_.28ALU.29"></a><h3><span class="mw-headline">Arithmetic/logic unit (ALU)</span></h3>
      <dl>
       <dd>
      </dl>
      <p>The <!--del_lnk--> ALU is capable of performing two classes of operations: Arithmetic and logic.<p>The set of arithmetic operations that a particular ALU supports may be limited to adding and subtracting or might include multiplying or dividing, <a href="../../wp/t/Trigonometry.htm" title="Trigonometry">trigonometry</a> functions (sine, cosine, etc) and <!--del_lnk--> square roots. Some can only operate on whole numbers (<!--del_lnk--> integers) whilst others use <!--del_lnk--> floating point to represent <!--del_lnk--> real numbers&mdash;albeit with limited precision. However, any computer that is capable of performing just the simplest operations can be programmed to break down the more complex operations into simple steps that it can perform. Therefore, any computer can be programmed to perform any arithmetic operation&mdash;although it will take more time to do so if its ALU does not directly support the operation. An ALU may also compare numbers and return <!--del_lnk--> boolean truth values (true or false) depending on whether one is equal to, greater than or less than the other (&quot;is 64 greater than 65?&quot;).<p>Logic operations involve <!--del_lnk--> boolean logic: <!--del_lnk--> AND, <!--del_lnk--> OR, <!--del_lnk--> XOR and <!--del_lnk--> NOT. These can be useful both for creating complicated <!--del_lnk--> conditional statements and processing <a href="../../wp/b/Boolean_logic.htm" title="Boolean logic">boolean logic</a>.<p><!--del_lnk--> Superscalar computers contain multiple ALUs so that they can process several instructions at the same time. <!--del_lnk--> Graphics processors and computers with <!--del_lnk--> SIMD and <!--del_lnk--> MIMD features often provide ALUs that can perform arithmetic on <!--del_lnk--> vectors and <a href="../../wp/m/Matrix_%2528mathematics%2529.htm" title="Matrix (mathematics)">matrices</a>.<p><a id="Memory" name="Memory"></a><h3><span class="mw-headline">Memory</span></h3>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/174/17433.jpg.htm" title="Magnetic core memory was popular main memory for computers through the 1960s until it was completely replaced by semiconductor memory."><img alt="Magnetic core memory was popular main memory for computers through the 1960s until it was completely replaced by semiconductor memory." height="135" longdesc="/wiki/Image:Magnetic_core.jpg" src="../../images/174/17433.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17433.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Magnetic core memory was popular main memory for computers through the 1960s until it was completely replaced by semiconductor memory.</div>
       </div>
      </div>
      <p>A computer&#39;s memory may be viewed as a list of cells into which numbers may be placed or read. Each cell has a numbered &quot;address&quot; and can store a single number. The computer may be instructed to &quot;put the number 123 into the cell numbered 1357&quot; or to &quot;add the number that is in cell 1357 to the number that is in cell 2468 and put the answer into cell 1595&quot;. The information stored in memory may represent practically anything. Letters, numbers, even computer instructions may be placed into memory with equal ease. Since the CPU does not differentiate between different types of information, it is up to the software to give significance to what the memory sees as nothing but a series of numbers.<p>In almost all modern computers, each memory cell is set up to store <!--del_lnk--> binary numbers in groups of eight <!--del_lnk--> bits (called a <!--del_lnk--> byte). Each byte is able to represent 256 different numbers; either from 0 to 255 or -128 to +127. To store larger numbers, several consecutive bytes may be used (typically, two, four or eight). When negative numbers are required, they are usually stored in <!--del_lnk--> two&#39;s complement notation. Other arrangements are possible, but are usually not seen outside of specialized applications or historical contexts. A computer may store any kind of information in memory as long as it can be somehow represented in numerical form. Modern computers have billions or even trillions of bytes of memory.<p>The CPU contains a special set of memory cells called <!--del_lnk--> registers that can be read and written to much more rapidly than the main memory area. There are typically between two and one hundred registers depending on the type of CPU. Registers are used for the most frequently needed data items to avoid having to access main memory every time data is needed. Since data is constantly being worked on, reducing the need to access main memory (which is often slow compared to the ALU and control units) greatly increases the computer&#39;s speed.<p>Computer main memory comes in two principal varieties: <!--del_lnk--> random access memory or RAM and <!--del_lnk--> read-only memory or ROM. RAM can be read and written to anytime the CPU commands it, but ROM is pre-loaded with data and software that never changes, so the CPU can only read from it. ROM is typically used to store the computer&#39;s initial start-up instructions. In general, the contents of RAM is erased when the power to the computer is turned off while ROM retains its data indefinitely. In a PC, the ROM contains a specialized program called the <!--del_lnk--> BIOS that orchestrates loading the computer&#39;s <!--del_lnk--> operating system from the hard disk drive into RAM whenever the computer is turned on or reset. In <!--del_lnk--> embedded computers, which frequently do not have disk drives, all of the software required to perform the task may be stored in ROM. Software that is stored in ROM is often called <!--del_lnk--> firmware because it is notionally more like hardware than software. <!--del_lnk--> Flash memory blurs the distinction between ROM and RAM by retaining data when turned off but being rewritable like RAM. However, flash memory is typically much slower than conventional ROM and RAM so its use is restricted to applications where high speeds are not required. <p>In more sophisticated computers there may be one or more RAM <a href="../../wp/c/CPU_cache.htm" title="CPU cache">cache memories</a> which are slower than registers but faster than main memory. Generally computers with this sort of cache are designed to move frequently needed data into the cache automatically, often without the need for any intervention on the programmer&#39;s part.<p><a id="Input.2Foutput_.28I.2FO.29" name="Input.2Foutput_.28I.2FO.29"></a><h3><span class="mw-headline">Input/output (I/O)</span></h3>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/174/17434.jpg.htm" title="Hard disks are common I/O devices used with computers."><img alt="Hard disks are common I/O devices used with computers." height="120" longdesc="/wiki/Image:HDDspin.JPG" src="../../images/174/17434.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17434.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Hard disks are common I/O devices used with computers.</div>
       </div>
      </div>
      <p>I/O is the means by which a computer receives information from the outside world and sends results back. Devices that provide input or output to the computer are called <!--del_lnk--> peripherals. On a typical <!--del_lnk--> personal computer, peripherals include inputs like the keyboard and <!--del_lnk--> mouse, and outputs such as the <!--del_lnk--> display and <!--del_lnk--> printer. <!--del_lnk--> Hard disks, <a href="../../wp/f/Floppy_disk.htm" title="Floppy disk">floppy disks</a> and <!--del_lnk--> optical discs serve as both inputs and outputs. <!--del_lnk--> Computer networking is another form of I/O.<p>Practically any device that can be made to interface digitally may be used as I/O. The computer in the <!--del_lnk--> Engine Control Unit of a modern <a href="../../wp/a/Automobile.htm" title="Automobile">automobile</a> might read the position of the pedals and steering wheel, the output of the <!--del_lnk--> oxygen sensor and devices that monitor the speed of each wheel. The output devices include the various lights and gauges that the driver sees as well as the engine controls such as the spark ignition circuits and fuel injection systems. In a digital wristwatch, the computer reads the buttons and causes numbers and symbols to be shown on the <!--del_lnk--> liquid crystal display.<p>Often, I/O devices are complex computers in their own right with their own CPU and memory. A <!--del_lnk--> graphics processing unit might contain fifty or more tiny computers that perform the calculations necessary to display <!--del_lnk--> 3D graphics. Modern <!--del_lnk--> desktop computers contain many smaller computers that assist the main CPU in performing I/O.<p><a id="Multitasking" name="Multitasking"></a><h3><span class="mw-headline">Multitasking</span></h3>
      <dl>
       <dd>
      </dl>
      <p>While a computer may be viewed as running one gigantic program stored in its main memory, in some systems it is necessary to give the appearance of running several programs simultaneously. This is achieved by having the computer switch rapidly between running each program in turn. One means by which this is done is with a special signal called an <!--del_lnk--> interrupt which can periodically cause the computer to stop executing instructions where it was and do something else instead. By remembering where it was executing prior to the interrupt, the computer may return to that task later. If several programs are running &quot;at the same time&quot;, then the interrupt generator may be causing several hundred interrupts per second, causing a program switch each time. Since modern computers typically execute instructions several orders of magnitude faster than human perception, many programs may seem to be running at the same time even though only one is ever executing in any given instant. This method of multitasking is sometimes termed &quot;time-sharing&quot; since each program is allocated a &quot;slice&quot; of time in turn.<p>Before the era of cheap computers, the principle use for multitasking was to allow many people to share the same computer.<p>Seemingly, multitasking would cause a computer that is switching between several programs to run more slowly - in direct proportion to the number of programs it is running. However, most programs spend much of their time waiting for slow input/output devices to complete their tasks. If a program is waiting for the user to click on the mouse or press a key on the keyboard, then it will not take a &quot;time slice&quot; until the event it is waiting for has occurred. This frees up time for other programs to execute so that many programs may be run at the same time without unacceptable speed loss.<p><a id="Multiprocessing" name="Multiprocessing"></a><h3><span class="mw-headline">Multiprocessing</span></h3>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/174/17435.jpg.htm" title="Cray designed many supercomputers that used heavy multiprocessing."><img alt="Cray designed many supercomputers that used heavy multiprocessing." height="135" longdesc="/wiki/Image:Cray_2_Arts_et_Metiers_dsc03940.jpg" src="../../images/174/17435.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/174/17435.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Cray designed many supercomputers that used heavy multiprocessing.</div>
       </div>
      </div>
      <p>Some computers may divide their work between one or more separate CPUs, creating a multiprocessing configuration. Traditionally, this technique was utilized only in large and powerful computers such as <!--del_lnk--> supercomputers, <!--del_lnk--> mainframe computers and <!--del_lnk--> servers. However, multiprocessor and <!--del_lnk--> multi-core (multiple CPUs on a single integrated circuit) personal and laptop computers have become widely available and are beginning to see increased usage in lower-end markets as a result.<p>Supercomputers in particular often have highly unique architectures that differ significantly from the basic stored-program architecture and from general purpose computers. They often feature thousands of CPUs, customized high-speed interconnects, and specialized computing hardware. Such designs tend to be useful only for specialized tasks due to the large scale of program organization required to successfully utilize most of a the available resources at once. Supercomputers usually see usage in large-scale <!--del_lnk--> simulation, <!--del_lnk--> graphics rendering, and <a href="../../wp/c/Cryptography.htm" title="Cryptography">cryptography</a> applications, as well as with other so-called &quot;<!--del_lnk--> embarrassingly parallel&quot; tasks.<p><a id="Networking_and_the_Internet" name="Networking_and_the_Internet"></a><h3><span class="mw-headline">Networking and the Internet</span></h3>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/69/6994.jpg.htm" title="Visualization of a portion of the routes on the Internet."><img alt="Visualization of a portion of the routes on the Internet." height="180" longdesc="/wiki/Image:Internet_map_1024.jpg" src="../../images/69/6994.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/69/6994.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> Visualization of a portion of the <!--del_lnk--> routes on the Internet.</div>
       </div>
      </div>
      <p>Computers have been used to coordinate information in multiple locations since the 1950s, with the US military&#39;s <!--del_lnk--> SAGE system the first large-scale example of such a system, which led to a number of special-purpose commercial systems like <!--del_lnk--> Sabre.<p>In the 1970s, computer engineers at research institutions throughout the US began to link their computers together using telecommunications technology. This effort was funded by ARPA (now <!--del_lnk--> DARPA), and the <!--del_lnk--> computer network that it produced was called the <!--del_lnk--> ARPANET. The technologies that made the Arpanet possible spread and evolved. In time, the network spread beyond academic and military institutions and became known as the <a href="../../wp/i/Internet.htm" title="Internet">Internet</a>. The emergence of networking involved a redefinition of the nature and boundaries of the computer. In the phrase of <!--del_lnk--> John Gage and <!--del_lnk--> Bill Joy (of <!--del_lnk--> Sun Microsystems), &quot;the network is the computer&quot;. Computer operating systems and applications were modified to include the ability to define and access the resources of other computers on the network, such as peripheral devices, stored information, and the like, as extensions of the resources of an individual computer. Initially these facilities were available primarily to people working in high-tech environments, but in the 1990s the spread of applications like <!--del_lnk--> e-mail and the <a href="../../wp/w/World_Wide_Web.htm" title="World Wide Web">World Wide Web</a>, combined with the development of cheap, fast networking technologies like <!--del_lnk--> Ethernet and <!--del_lnk--> ADSL saw computer networking become ubiquitous almost everywhere. In fact, the number of computers that are networked is growing phenomenally. A very large proportion of <!--del_lnk--> personal computers regularly connect to the <a href="../../wp/i/Internet.htm" title="Internet">Internet</a> to communicate and receive information. &quot;Wireless&quot; networking, often utilizing <!--del_lnk--> mobile phone networks, has meant networking is becoming increasingly ubiquitous even in mobile computing environments.<p><a id="Further_topics" name="Further_topics"></a><h2><span class="mw-headline">Further topics</span></h2>
      <p><a id="Hardware" name="Hardware"></a><h3><span class="mw-headline">Hardware</span></h3>
      <p>The term <b>hardware</b> covers all of those parts of a computer that are tangible objects. Circuits, displays, power supplies, cables, keyboards, printers and mice are all hardware.<table class="wikitable">
       <caption><b><a href="../../wp/h/History_of_computing_hardware.htm" title="History of computing hardware">History of computing hardware</a></b></caption>
       <tr>
        <td rowspan="2">First Generation (Mechanical/Electromechanical)</td>
        <td>Calculators</td>
        <td><!--del_lnk--> Antikythera mechanism, <!--del_lnk--> Difference Engine, <!--del_lnk--> Norden bombsight</td>
       </tr>
       <tr>
        <td>Programmable Devices</td>
        <td><!--del_lnk--> Jacquard loom, <!--del_lnk--> Analytical Engine, <!--del_lnk--> Digi-Comp I, <!--del_lnk--> Digi-Comp II, <!--del_lnk--> Geniac, <!--del_lnk--> Harvard Mark I</td>
       </tr>
       <tr>
        <td rowspan="2">Second Generation (Vacuum Tubes)</td>
        <td>Calculators</td>
        <td><!--del_lnk--> Atanasoff-Berry Computer</td>
       </tr>
       <tr>
        <td>Programmable Devices</td>
        <td><!--del_lnk--> ENIAC, <!--del_lnk--> EDSAC, <!--del_lnk--> EDVAC, <!--del_lnk--> UNIVAC I</td>
       </tr>
       <tr>
        <td rowspan="2">Third Generation (Discrete transistors and SSI, MSI, LSI <!--del_lnk--> Integrated circuits)</td>
        <td><!--del_lnk--> Mainframes</td>
        <td><!--del_lnk--> System/360, <!--del_lnk--> BUNCH</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Minicomputer</td>
        <td><!--del_lnk--> PDP-8, <!--del_lnk--> PDP-11, <!--del_lnk--> System/32, <!--del_lnk--> System/36</td>
       </tr>
       <tr>
        <td rowspan="9">Fourth Generation (VLSI integrated circuits)</td>
        <td>Minicomputer</td>
        <td><!--del_lnk--> VAX, <!--del_lnk--> AS/400</td>
       </tr>
       <tr>
        <td><!--del_lnk--> 4-bit microcomputer</td>
        <td><!--del_lnk--> Intel 4004, <!--del_lnk--> Intel 4040</td>
       </tr>
       <tr>
        <td><!--del_lnk--> 8-bit microcomputer</td>
        <td><!--del_lnk--> Intel 8008, <!--del_lnk--> Intel 8080, <!--del_lnk--> Motorola 6800, <!--del_lnk--> 6502, <!--del_lnk--> Zilog Z80</td>
       </tr>
       <tr>
        <td><!--del_lnk--> 16-bit microcomputer</td>
        <td><!--del_lnk--> 8088, <!--del_lnk--> Zilog Z8000, <!--del_lnk--> WDC 65816/65802</td>
       </tr>
       <tr>
        <td><!--del_lnk--> 32-bit microcomputer</td>
        <td><!--del_lnk--> 80386, <!--del_lnk--> Pentium, <!--del_lnk--> 68000, <!--del_lnk--> ARM architecture</td>
       </tr>
       <tr>
        <td><!--del_lnk--> 64-bit microcomputer </td>
        <td><!--del_lnk--> x86-64, <!--del_lnk--> PowerPC, <!--del_lnk--> MIPS, <!--del_lnk--> SPARC</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Embedded computer</td>
        <td><!--del_lnk--> 8048, <!--del_lnk--> 8051</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Personal computer</td>
        <td><!--del_lnk--> Desktop computer, <!--del_lnk--> Home computer, <!--del_lnk--> Laptop computer, <!--del_lnk--> Personal digital assistant (PDA), <!--del_lnk--> Portable computer, <!--del_lnk--> Tablet computer, <!--del_lnk--> Wearable computer</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Server class computer</td>
        <td>
        </td>
       </tr>
       <tr>
        <td rowspan="4">Theoretical/experimental</td>
        <td><a href="../../wp/q/Quantum_computer.htm" title="Quantum computer">Quantum computer</a></td>
        <td>
        </td>
       </tr>
       <tr>
        <td><!--del_lnk--> Chemical computer</td>
        <td>
        </td>
       </tr>
       <tr>
        <td><!--del_lnk--> DNA computing</td>
        <td>
        </td>
       </tr>
       <tr>
        <td><!--del_lnk--> Optical computer</td>
        <td>
        </td>
       </tr>
      </table>
      <table class="wikitable">
       <caption><b>Other Hardware Topics</b></caption>
       <tr>
        <td rowspan="3"><!--del_lnk--> Peripheral device (<!--del_lnk--> Input/output)</td>
        <td>Input</td>
        <td><!--del_lnk--> Mouse, <!--del_lnk--> Keyboard, <!--del_lnk--> Joystick, <!--del_lnk--> Image scanner</td>
       </tr>
       <tr>
        <td>Output</td>
        <td><!--del_lnk--> Monitor, <!--del_lnk--> Printer</td>
       </tr>
       <tr>
        <td>Both</td>
        <td><!--del_lnk--> Floppy disk drive, <!--del_lnk--> Hard disk, <!--del_lnk--> Optical disc drive, <!--del_lnk--> Teleprinter</td>
       </tr>
       <tr>
        <td rowspan="2"><!--del_lnk--> Computer busses</td>
        <td>Short range</td>
        <td><!--del_lnk--> RS-232, <!--del_lnk--> SCSI, <!--del_lnk--> PCI, <!--del_lnk--> USB</td>
       </tr>
       <tr>
        <td>Long range (<!--del_lnk--> Computer networking)</td>
        <td><!--del_lnk--> Ethernet, <!--del_lnk--> ATM, <!--del_lnk--> FDDI</td>
       </tr>
      </table>
      <p><a id="Software" name="Software"></a><h3><span class="mw-headline">Software</span></h3>
      <p><b>Software</b> refers to parts of the computer that have no material form; programs, data, protocols, etc are all software. When software is stored in hardware that cannot easily be modified (such as <!--del_lnk--> BIOS <!--del_lnk--> ROM in an <!--del_lnk--> IBM PC compatible), it is sometimes termed firmware to indicate that it falls into an area of uncertainty between hardware and software.<table class="wikitable">
       <caption><b><!--del_lnk--> Computer software</b></caption>
       <tr>
        <td rowspan="7"><!--del_lnk--> Operating system</td>
        <td><a href="../../wp/u/Unix.htm" title="Unix">Unix</a>/<!--del_lnk--> BSD</td>
        <td><!--del_lnk--> UNIX System V, <!--del_lnk--> AIX, <!--del_lnk--> HP-UX, <!--del_lnk--> Solaris (<!--del_lnk--> SunOS), <!--del_lnk--> FreeBSD, <!--del_lnk--> NetBSD, <!--del_lnk--> IRIX</td>
       </tr>
       <tr>
        <td><a href="../../wp/g/GNU.htm" title="GNU">GNU</a>/<a href="../../wp/l/Linux.htm" title="Linux">Linux</a></td>
        <td><!--del_lnk--> List of Linux distributions, <!--del_lnk--> Comparison of Linux distributions</td>
       </tr>
       <tr>
        <td><a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a></td>
        <td><!--del_lnk--> Windows 9x, <!--del_lnk--> Windows NT, <!--del_lnk--> Windows CE</td>
       </tr>
       <tr>
        <td><!--del_lnk--> DOS</td>
        <td><!--del_lnk--> DOS/360, <!--del_lnk--> QDOS, <!--del_lnk--> PC-DOS, <!--del_lnk--> MS-DOS, <!--del_lnk--> FreeDOS</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Mac OS</td>
        <td><!--del_lnk--> Mac OS classic, <!--del_lnk--> Mac OS X</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Embedded and <!--del_lnk--> real-time</td>
        <td><!--del_lnk--> List of embedded operating systems</td>
       </tr>
       <tr>
        <td>Experimental</td>
        <td><!--del_lnk--> Amoeba, <!--del_lnk--> Oberon/<!--del_lnk--> Bluebottle, <!--del_lnk--> Plan 9 from Bell Labs</td>
       </tr>
       <tr>
        <td rowspan="2"><!--del_lnk--> Library</td>
        <td><!--del_lnk--> Multimedia</td>
        <td><!--del_lnk--> DirectX, <!--del_lnk--> OpenGL, <!--del_lnk--> OpenAL</td>
       </tr>
       <tr>
        <td>Programming library</td>
        <td><!--del_lnk--> C standard library</td>
       </tr>
       <tr>
        <td rowspan="2"><!--del_lnk--> Data</td>
        <td><!--del_lnk--> Protocol</td>
        <td><!--del_lnk--> TCP/IP, <!--del_lnk--> Kermit, <!--del_lnk--> FTP, <!--del_lnk--> HTTP, <!--del_lnk--> SMTP</td>
       </tr>
       <tr>
        <td><!--del_lnk--> File format</td>
        <td><!--del_lnk--> HTML, <!--del_lnk--> XML, <!--del_lnk--> JPEG, <!--del_lnk--> MPEG, <!--del_lnk--> PNG</td>
       </tr>
       <tr>
        <td rowspan="3"><!--del_lnk--> User interface</td>
        <td><!--del_lnk--> Graphical user interface (<!--del_lnk--> WIMP)</td>
        <td><a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a>, <a href="../../wp/g/GNOME.htm" title="GNOME">GNOME</a>, <!--del_lnk--> QNX Photon, <!--del_lnk--> CDE, <!--del_lnk--> GEM</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Text user interface</td>
        <td><!--del_lnk--> Command line interface, <!--del_lnk--> shells</td>
       </tr>
       <tr>
        <td>Other</td>
        <td>
        </td>
       </tr>
       <tr>
        <td rowspan="9"><!--del_lnk--> Application</td>
        <td><!--del_lnk--> Office suite</td>
        <td><!--del_lnk--> Word processing, <!--del_lnk--> Desktop publishing, <!--del_lnk--> Presentation program, <!--del_lnk--> Database management system, Scheduling &amp; Time management, <!--del_lnk--> Spreadsheet, <!--del_lnk--> Accounting software</td>
       </tr>
       <tr>
        <td><a href="../../wp/i/Internet.htm" title="Internet">Internet</a> Access</td>
        <td><!--del_lnk--> Browser, <!--del_lnk--> E-mail client, <!--del_lnk--> Web server, <!--del_lnk--> Mail transfer agent, <!--del_lnk--> Instant messaging</td>
       </tr>
       <tr>
        <td>Design and manufacturing</td>
        <td><!--del_lnk--> Computer-aided design, <!--del_lnk--> Computer-aided manufacturing, Plant management, Robotic manufacturing, Supply chain management</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Graphics</td>
        <td><!--del_lnk--> Raster graphics editor, <!--del_lnk--> Vector graphics editor, <!--del_lnk--> 3D modeler, <!--del_lnk--> Animation editor, <!--del_lnk--> 3D computer graphics, <!--del_lnk--> Video editing, <!--del_lnk--> Image processing</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Audio</td>
        <td><!--del_lnk--> Digital audio editor, <!--del_lnk--> Audio playback, Mixing, <!--del_lnk--> Audio synthesis, <!--del_lnk--> Computer music</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Software Engineering</td>
        <td><!--del_lnk--> Compiler, <!--del_lnk--> Assembler, <!--del_lnk--> Interpreter, <!--del_lnk--> Debugger, <!--del_lnk--> Text Editor, <!--del_lnk--> Integrated development environment, <!--del_lnk--> Performance analysis, <!--del_lnk--> Revision control, <!--del_lnk--> Software configuration management</td>
       </tr>
       <tr>
        <td>Educational</td>
        <td><!--del_lnk--> Edutainment, <!--del_lnk--> Educational game, <!--del_lnk--> Serious game, <!--del_lnk--> Flight simulator</td>
       </tr>
       <tr>
        <td><a href="../../wp/c/Computer_and_video_games.htm" title="Computer and video games">Games</a></td>
        <td><!--del_lnk--> Strategy, Arcade, <!--del_lnk--> Puzzle, Simulation, <!--del_lnk--> First-person shooter, <!--del_lnk--> Platform, <!--del_lnk--> Massively multiplayer, <!--del_lnk--> Interactive fiction</td>
       </tr>
       <tr>
        <td>Misc</td>
        <td><!--del_lnk--> Artificial intelligence, <!--del_lnk--> Antivirus software, <!--del_lnk--> Malware scanner, <!--del_lnk--> Installer/<!--del_lnk--> Package management systems, <!--del_lnk--> File manager</td>
       </tr>
      </table>
      <p><a id="Programming_languages" name="Programming_languages"></a><h3><span class="mw-headline">Programming languages</span></h3>
      <p>Programming languages provide various ways of specifying programs for computers to run. Unlike <!--del_lnk--> natural languages, programming languages are designed to permit no ambiguity and to be concise. They are purely written languages and are often difficult to read aloud. They are generally either translated into <!--del_lnk--> machine language by a <!--del_lnk--> compiler or an <!--del_lnk--> assembler before being run, or translated directly at run time by an <!--del_lnk--> interpreter. Sometimes programs are executed by a hybrid method of the two techniques. There are thousands of different programming languages&mdash;some intended to be general purpose, others useful only for highly specialized applications.<table class="wikitable">
       <caption><b><!--del_lnk--> Programming Languages</b></caption>
       <tr>
        <td rowspan="1"><!--del_lnk--> Lists of programming languages</td>
        <td><!--del_lnk--> Timeline of programming languages, <!--del_lnk--> Categorical list of programming languages, <!--del_lnk--> Generational list of programming languages, <!--del_lnk--> Alphabetical list of programming languages, <!--del_lnk--> List of esoteric programming languages, <!--del_lnk--> Non-English-based programming languages</td>
       </tr>
       <tr>
        <td rowspan="1">Commonly used <!--del_lnk--> Assembly languages</td>
        <td><!--del_lnk--> ARM, <!--del_lnk--> MIPS, <!--del_lnk--> x86</td>
       </tr>
       <tr>
        <td rowspan="1">Commonly used <!--del_lnk--> High level languages</td>
        <td><a href="../../wp/b/BASIC.htm" title="BASIC">BASIC</a>, <!--del_lnk--> C, <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a>, <!--del_lnk--> C#, <!--del_lnk--> COBOL, <!--del_lnk--> Fortran, <!--del_lnk--> Java, <!--del_lnk--> Lisp, <!--del_lnk--> Pascal</td>
       </tr>
       <tr>
        <td rowspan="1">Commonly used <!--del_lnk--> Scripting languages</td>
        <td><!--del_lnk--> JavaScript, <a href="../../wp/p/Python_%2528programming_language%2529.htm" title="Python (programming language)">Python</a>, <!--del_lnk--> Ruby, <!--del_lnk--> PHP, <a href="../../wp/p/Perl.htm" title="Perl">Perl</a></td>
       </tr>
      </table>
      <p><a id="Professions_and_organizations" name="Professions_and_organizations"></a><h3><span class="mw-headline">Professions and organizations</span></h3>
      <p>As the use of computers has spread throughout society, there are an increasing number of careers involving computers. Following the theme of hardware, software and firmware, the brains of people who work in the industry are sometimes known irreverently as wetware or &quot;meatware&quot;.<table class="wikitable">
       <caption><b>Computer-related professions</b></caption>
       <tr>
        <td>Hardware-related</td>
        <td><a href="../../wp/e/Electrical_engineering.htm" title="Electrical engineering">Electrical engineering</a>, <!--del_lnk--> Electronics engineering, <!--del_lnk--> Computer engineering</td>
       </tr>
       <tr>
        <td>Software-related</td>
        <td><!--del_lnk--> Human-computer interaction, <!--del_lnk--> Information technology, <!--del_lnk--> Software engineering, <!--del_lnk--> Systems analyst, <!--del_lnk--> Web design</td>
       </tr>
      </table>
      <p>The need for computers to work well together and to be able to exchange information has spawned the need for many standards organizations, clubs and societies of both a formal and informal nature.<table class="wikitable">
       <caption><b>Organizations</b></caption>
       <tr>
        <td>Standards groups</td>
        <td><!--del_lnk--> ANSI, <!--del_lnk--> IEC, <!--del_lnk--> IEEE, <!--del_lnk--> IETF, <!--del_lnk--> ISO, <!--del_lnk--> W3C</td>
       </tr>
       <tr>
        <td>Professional Societies</td>
        <td><!--del_lnk--> ACM, <!--del_lnk--> SIGGRAPH, <!--del_lnk--> IET</td>
       </tr>
       <tr>
        <td><!--del_lnk--> Free/<!--del_lnk--> Open source software groups</td>
        <td><!--del_lnk--> Free Software Foundation, <!--del_lnk--> Mozilla Foundation, <!--del_lnk--> Apache Software Foundation</td>
       </tr>
      </table>
      <p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Computer&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
