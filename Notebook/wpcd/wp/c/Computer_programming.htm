<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Computer programming,2006,Abstraction (computer science),Algorithm,Apple Computer,Artificial intelligence,Assembly language,August 22,BASIC,Binary,Bjarne Stroustrup" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Computer programming</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Computer_programming";
			var wgTitle = "Computer programming";
			var wgArticleId = 5311;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Computer_programming">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Computer programming</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <p>The output from the process of <b>computer programming</b> (often shortened to <b>programming</b> or <b>coding</b>) is <!--del_lnk--> source code written in a <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a>. This code may be a modification of existing source or something completely new. The process of writing source code requires expertise in many different subjects, including knowledge of the application domain and <a href="../../wp/a/Algorithm.htm" title="Algorithm">algorithms</a> to implement the desired behaviour.<p>Within <!--del_lnk--> software engineering, programming (the <i>implementation</i>) is regarded as one phase in a <!--del_lnk--> software development process.<p>There is an on going debate on the extent to which the writing of programs is an art or an engineering discipline.<p>Another on going debate is the extent to which the programming language used in writing programs effects the form that the final program takes. This debate is analogous to that surrounding the <!--del_lnk--> Sapir Whorf hypothesis in <a href="../../wp/l/Linguistics.htm" title="Linguistics">linguistics</a>.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Programming_languages" name="Programming_languages"></a><h2> <span class="mw-headline">Programming languages</span></h2>
      <dl>
       <dd>
      </dl>
      <p>Different programming languages support different styles of programming (called <i><!--del_lnk--> programming paradigms</i>). The choice of language used may be an individual&#39;s choice or may be dictated by company policy. Ideally the programming language best suited for the task at hand will be selected. Trade-offs from this ideal involve finding enough programmers, who know the language, to build a team, the availability of <!--del_lnk--> compilers for that language, and the efficiency with which programs written in a given language execute.<p><a id="History_of_programming" name="History_of_programming"></a><h2> <span class="mw-headline">History of programming</span></h2>
      <div class="thumb tright">
       <div style="width:182px;"><a class="internal" href="../../images/34/3411.jpg.htm" title="Wired plug board for an IBM 402 Accounting Machine."><img alt="Wired plug board for an IBM 402 Accounting Machine." height="135" longdesc="/wiki/Image:IBM402plugboard.Shrigley.wireside.jpg" src="../../images/34/3411.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/34/3411.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> Wired plug board for an IBM 402 Accounting Machine.</div>
       </div>
      </div>
      <p>The earliest programmable machine (that is, a machine that can adjust its capabilities based upon changing its &quot;program&quot;) can be said to be the <!--del_lnk--> Jacquard Loom, which was developed in 1801. The machine used a series of pasteboard cards with holes punched in them. The hole pattern represented the pattern that the loom had to follow in weaving cloth. The loom could produce entirely different weaves using different sets of cards. This innovation was later refined by <!--del_lnk--> Herman Hollerith of <!--del_lnk--> IBM in the development of the famous IBM <!--del_lnk--> punch card. These were used with a variety of machines called <!--del_lnk--> unit record equipment to perform data processing tasks. The unit record equipment were programmed by changing the wiring of <!--del_lnk--> plug-boards. Early computers used similar programming methods.<div class="thumb tleft">
       <div style="width:182px;"><a class="internal" href="../../images/34/3412.jpg.htm" title="A box of punch cards with several program decks."><img alt="A box of punch cards with several program decks." height="200" longdesc="/wiki/Image:PunchCardDecks.agr.jpg" src="../../images/34/3412.jpg" width="180" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/34/3412.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> A box of punch cards with several program decks.</div>
       </div>
      </div>
      <p>The invention of the <!--del_lnk--> Von Neumann architecture allowed programs to be stored in <!--del_lnk--> computer memory. Early programs had to be painstakingly crafted using the instructions of the particular machine, often in <!--del_lnk--> binary notation. Every model of computer would be likely to need different instructions to do the same task. Later <!--del_lnk--> assembly languages were developed that let the programmer specify each instruction in a text format, entering abbreviations for each operation code instead of a number and specifying addresses in symbolic form (e.g. ADD X, TOTAL). In 1954 <!--del_lnk--> Fortran, the first higher level programming language, was invented. This allowed programmers to specify calculations by entering a formula directly (e.g. Y = X*2 + 5*X + 9). The program text, or <i>source</i>, was converted into machine instructions using a special program called a <!--del_lnk--> compiler. Many other languages were developed, including ones for commercial programming, such as <!--del_lnk--> COBOL. Programs were mostly still entered using punch cards or <!--del_lnk--> paper tape. See <!--del_lnk--> computer programming in the punch card era. In the mid-1970s, <!--del_lnk--> mass storage devices and <!--del_lnk--> computer terminals became inexpensive enough so programs could be created by typing directly into the computers. <!--del_lnk--> Text editors were developed that allowed changes and corrections to be made much more easily than with punch cards.<p>As time has progressed computers have made giant leaps in the area of processing power. This has brought about newer programing languages that are more <!--del_lnk--> abstracted from the underlying hardware. Although these more abstracted languages require additional <!--del_lnk--> overhead, in most cases the huge increase in speed of modern computers has brought about little performance decrease compared to earlier counterparts. The benefits of these more abstracted languages is that they allow both an easier learning curve for people less familiar with the older lower-level programming languages, and they also allow a more experienced programmer to develop simple applications quickly. Despite these benefits, large complicated programs, and programs that are more dependent on speed still require the faster and relatively lower-level languages with todays hardware. (The same concerns were raised about the original Fortran language.)<p>Throughout the second half of the twentieth century, programming was an attractive career in most developed countries. Some forms of programming have been increasingly subject to <!--del_lnk--> offshore outsourcing (importing software and services from other countries, usually at a lower wage), making programming career decisions in developed countries more complicated, while increasing economic opportunities in less developed areas. It is unclear how far this trend will continue and how deeply it will impact programmer wages and opportunities.<p><a id="Examples_of_computer_programming_languages" name="Examples_of_computer_programming_languages"></a><h2> <span class="mw-headline">Examples of computer programming languages</span></h2>
      <p>In an almost evolutionary order:<ul>
       <li><!--del_lnk--> FORTRAN is a general-purpose, procedural, imperative programming language that is especially suited to numeric computation and scientific computing. Originally developed by <!--del_lnk--> John Backus of International Business Machines Corporation (IBM) in the 1950s for scientific and engineering applications.<li><!--del_lnk--> C is a compiled procedural, imperative programming language made popular as the basis of <a href="../../wp/u/Unix.htm" title="Unix">Unix</a>.<li><!--del_lnk--> Shell scripting, in particular using either a variant of the <!--del_lnk--> Bourne shell or the <!--del_lnk--> C shell, is popular among UNIX hackers. Although the exact implementation varies among different shells, the core principles remain intact: only providing facilities for program flow (also seen in C) while placing emphasis on using external programs, although most shells feature some other functions internally, known as builtins. Shell scripting is used primarily in systems administration, especially where tasks need to be automated and run at specific times (backups, monitoring, file system maintenance, among others). It is also used as a tool for rapid prototyping when the exact design of a program is not yet clear enough for a full implementation, often in a <!--del_lnk--> compiled language like C. Whilst most shell scripts are relatively simple it is possible to create complex and powerful programs in many implementations.<li><!--del_lnk--> SMALLTALK invented 1971 was the most important fundament for object oriented programming. It started a new programming paradigm, which significantly influenced the whole art of programming. Smalltalk is a pure object oriented (OO) language with a minimalistic syntax. This is possible as nearly everything is done inside the class library. Even standard control structures are implemented in the class library. Nothing exists besides objects. Few OO-languages have this clarity and simplicity.<li><!--del_lnk--> Pascal is a general-purpose structured language named after the famous mathematician and philosopher <a href="../../wp/b/Blaise_Pascal.htm" title="Blaise Pascal">Blaise Pascal</a>. It was very popular during the &#39;80s and &#39;90s. Whilst popularity of Pascal itself has waned (its principal use is in teaching of programming) languages derived from it (such as Object Pascal) are still in use.<li><a href="../../wp/b/BASIC.htm" title="BASIC">BASIC</a> (Beginner&#39;s All purpose Symbolic Instruction Code) was invented by <!--del_lnk--> John Kemeny and <!--del_lnk--> Thomas Kurtz of Dartmouth College. It became the most widely used language when microcomputers first hit the market, in the &#39;70s and &#39;80s. Many dialects of BASIC have been produced. Because early dialects lacked important features such as strong data typing, procedures and functions, BASIC was typically seen as a language for learning programming and prototyping rather than for enterprise development. This is not true today since many BASIC compilers offer all of the structured programming advantages as other languages.<li><!--del_lnk--> Visual Basic is Microsoft&#39;s implementation of BASIC as an <!--del_lnk--> integrated development environment.<li><!--del_lnk--> Objective-C is a <!--del_lnk--> reflective, <!--del_lnk--> object oriented <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a> which adds <!--del_lnk--> Smalltalk-style <!--del_lnk--> messaging to <!--del_lnk--> C. Today it is used primarily on <!--del_lnk--> Mac OS X and <!--del_lnk--> GNUstep, two environments based on the <!--del_lnk--> OpenStep standard, and is the primary language used for the <!--del_lnk--> NeXTSTEP, <!--del_lnk--> OPENSTEP, and <!--del_lnk--> Cocoa application frameworks. Generic Objective-C programs that do not make use of these libraries can also be compiled for any system supported by <!--del_lnk--> gcc, which includes an Objective-C compiler.<li><a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a> is a compiled programming language based on C, with support for <!--del_lnk--> object-oriented programming. It is one of the most widely used programming languages currently available. It is often considered to be the industry-standard language of <!--del_lnk--> game development, but is also very often used to write other types of computer software applications. C++ was developed by <!--del_lnk--> Bjarne Stroustrup and was based on the programming language C. C++ retains the syntax and many familiar functions of C, but also adds various concepts associated with other programming paradigms, such as <!--del_lnk--> classes.<li><!--del_lnk--> C# is an <!--del_lnk--> object-oriented <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a> developed by <a href="../../wp/m/Microsoft.htm" title="Microsoft">Microsoft</a> as part of their <!--del_lnk--> .NET initiative. C# has a procedural, object oriented <!--del_lnk--> syntax based on <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a> that includes aspects of several other programming languages (most notably <!--del_lnk--> Delphi, <!--del_lnk--> Visual Basic, and <!--del_lnk--> Java) with a particular emphasis on simplification (less symbolic requirements than C++, less decorative requirements than Java). Though developed by <a href="../../wp/m/Microsoft.htm" title="Microsoft">Microsoft</a>, <!--del_lnk--> C# is standardized by the <!--del_lnk--> ECMA and <!--del_lnk--> International Standards Organization.<li><!--del_lnk--> Java is an object oriented interpreted programming language. It has gained popularity in the past few years for its ability to be run on many platforms, including <!--del_lnk--> Solaris, <a href="../../wp/l/Linux.htm" title="Linux">Linux</a>, <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a>, <!--del_lnk--> Mac OS and other systems. It was developed by <!--del_lnk--> Sun Microsystems.<li><!--del_lnk--> Lisp is a family of functional, sometimes scripted, programming languages often used in <!--del_lnk--> AI.<li><!--del_lnk--> Object Pascal is an object oriented derivative of Pascal. Developed by <!--del_lnk--> Apple Computer in the 1980s, today it is primarily known as the language of <!--del_lnk--> Borland Delphi. It is also used with <!--del_lnk--> Kylix, <!--del_lnk--> Chrome and various open source object pascal implementations, such as <!--del_lnk--> FreePascal.<li><!--del_lnk--> The Delphi Language is the name of the Object Pascal derivative that is the primary language of later versions of Borland&#39;s <!--del_lnk--> Delphi Studio integrated development environment.<li><!--del_lnk--> Perl one of the first widely used, cross-platform, interpreted languages, <!--del_lnk--> Perl owes much of its syntax and semantics to <!--del_lnk--> C and the <a href="../../wp/u/Unix.htm" title="Unix">Unix</a> <!--del_lnk--> shell.<li><!--del_lnk--> Python is an interpreted, <!--del_lnk--> dynamically typed, object-oriented language that has some unique syntax features (like the significance of indentation). Though strictly speaking an interpreted language, its usage domain follows that of <!--del_lnk--> Java and <!--del_lnk--> C#.<li><!--del_lnk--> Ruby is very much like <!--del_lnk--> Python, though it features some constructs more closely related to those found in <!--del_lnk--> Perl and <!--del_lnk--> Lisp. It is also the basis of a very popular <!--del_lnk--> web application framework named <!--del_lnk--> Ruby on Rails.<li><!--del_lnk--> PHP is a newer programming language with focus on web design. It has a <!--del_lnk--> C-like <!--del_lnk--> syntax.</ul>
      <p><a id="Software_development" name="Software_development"></a><h2> <span class="mw-headline">Software development</span></h2>
      <dl>
       <dd>
      </dl>
      <p><i><!--del_lnk--> Software</i> is a <!--del_lnk--> mass noun for computer programs and data. The accompanying documentation and <!--del_lnk--> software license are also considered an essential part of the software, even though they don&#39;t involve any actual coding.<p>Creating software involves:<ul>
       <li><!--del_lnk--> Requirements analysis<li><!--del_lnk--> Specification<li><!--del_lnk--> Software architecture<li><!--del_lnk--> Coding<li><!--del_lnk--> Compilation<li><!--del_lnk--> Software testing<li><!--del_lnk--> Documentation<li><!--del_lnk--> Integration<li><!--del_lnk--> Maintenance</ul>
      <div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Computer_programming&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
