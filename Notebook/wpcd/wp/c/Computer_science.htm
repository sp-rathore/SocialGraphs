<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Computer science,2006,Abacus,Alan Turing,Algebra,Algorithms,Alonzo Church,Analysis of algorithms,Artificial intelligence,Association for Computing Machinery,Automata theory" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Computer science</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Computer_science";
			var wgTitle = "Computer science";
			var wgArticleId = 5323;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Computer_science">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Computer science</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <p><b>Computer science</b>, or <b>computing science</b>, is the study of the theoretical foundations of <a href="../../wp/i/Information.htm" title="Information">information</a> and <!--del_lnk--> computation and their implementation and application in <!--del_lnk--> computer systems. Computer science has many <!--del_lnk--> sub-fields; some emphasize the computation of specific results (such as <!--del_lnk--> computer graphics), while others (such as <!--del_lnk--> computational complexity theory) relate to properties of <!--del_lnk--> computational problems. Still others focus on the challenges in implementing computations. For example, <!--del_lnk--> programming language theory studies approaches to describing computations, while <a href="../../wp/c/Computer_programming.htm" title="Computer programming">computer programming</a> applies specific <a href="../../wp/p/Programming_language.htm" title="Programming language">programming languages</a> to solve specific computational problems.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <dl>
       <dd>
      </dl>
      <p>The history of computer science predates the invention of the modern <!--del_lnk--> digital computer by many years. Machines for calculating fixed numerical tasks have existed since antiquity, such as the <a href="../../wp/a/Abacus.htm" title="Abacus">abacus</a>. <!--del_lnk--> Wilhelm Schickard built the first mechanical calculator in 1623. <a href="../../wp/c/Charles_Babbage.htm" title="Charles Babbage">Charles Babbage</a> designed a <!--del_lnk--> difference engine in <!--del_lnk--> Victorian times, and around 1900 the <!--del_lnk--> IBM corporation sold punch-card machines. However all of these machines were constrained to perform a single task, or at best, some subset of all possible tasks.<p>Prior to the 1950s, the term <i><!--del_lnk--> computer</i> referred to a human clerk who performed calculations. Early researchers in what came to be called computer science, such as <!--del_lnk--> Kurt G&ouml;del, <!--del_lnk--> Alonzo Church, and <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>, were interested in the question of computability: what things can be computed by a human clerk who simply follows a list of instructions with paper and pencil, for as long as necessary, and without ingenuity or insight? Part of the motivation for this work was the desire to develop <i>computing machines</i> that could automate the often tedious and error-prone work of a human computer. Their key insight was to construct universal computing systems capable (in theory) of performing all possible computable tasks, and thus generalising all previous dedicated-task machines into the single notion of the universal computer. The creation of the concept of a universal computer marked the birth of modern computer science.<p>During the 1940s, as newer and more powerful computing machines were developed, the term <i>computer</i> came to refer to the machines rather than their human predecessors. As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study <!--del_lnk--> computation in general. Computer science began to be established as a distinct academic discipline in the 1960s, with the creation of the first computer science departments and degree programs. Since practical computers became available, many applications of computing have become distinct areas of study in their own right.<p><a id="Major_achievements" name="Major_achievements"></a><h2> <span class="mw-headline">Major achievements</span></h2>
      <p>Despite its relatively short history as a formal academic discipline, computer science has made a number of fundamental contributions to <a href="../../wp/s/Science.htm" title="Science">science</a> and <a href="../../wp/s/Society.htm" title="Society">society</a>. These include:<ul>
       <li>A formal definition of <!--del_lnk--> computation and <!--del_lnk--> computability, and proof that there are computationally <!--del_lnk--> unsolvable and <!--del_lnk--> intractable problems.<li>The concept of a <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a>, a tool for the precise expression of methodological information at various levels of abstraction</ul>
      <ul>
       <li>The theory and practice of <!--del_lnk--> compilers for translating between programming languages<li>Practical applications: the <!--del_lnk--> PC, the <a href="../../wp/i/Internet.htm" title="Internet">internet</a>, <!--del_lnk--> search engines, <!--del_lnk--> scientific computing</ul>
      <p><a id="Relationship_with_other_fields" name="Relationship_with_other_fields"></a><h2> <span class="mw-headline">Relationship with other fields</span></h2>
      <dl>
       <dd>
      </dl>
      <p>Despite its name, much of computer science does not involve the study of computers themselves. In fact, the renowned computer scientist <!--del_lnk--> Edsger Dijkstra is often quoted as saying, <i>&quot;Computer science is no more about computers than astronomy is about telescopes.&quot;</i> The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of <!--del_lnk--> computer hardware is usually considered part of <!--del_lnk--> computer engineering, while the study of commercial <!--del_lnk--> computer systems and their deployment is often called <!--del_lnk--> information technology or <!--del_lnk--> information systems. Computer science is sometimes criticized as being insufficiently scientific, a view espoused in the statement <i>&quot;Science is to computer science as hydrodynamics is to plumbing&quot;</i> credited to <!--del_lnk--> Stan Kelly-Bootle and others. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research has also often crossed into other disciplines, such as <!--del_lnk--> artificial intelligence, <!--del_lnk--> cognitive science, <a href="../../wp/p/Physics.htm" title="Physics">physics</a> (see <!--del_lnk--> quantum computing), and <a href="../../wp/l/Linguistics.htm" title="Linguistics">linguistics</a>.<p>Computer science is considered by some to have a much closer relationship with <a href="../../wp/m/Mathematics.htm" title="Mathematics">mathematics</a> than many scientific disciplines. Early computer science was strongly influenced by the work of mathematicians such as <!--del_lnk--> Kurt G&ouml;del and <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>, and there continues to be a useful interchange of ideas between the two fields in areas such as <!--del_lnk--> mathematical logic, <!--del_lnk--> category theory, <!--del_lnk--> domain theory, and <a href="../../wp/a/Algebra.htm" title="Algebra">algebra</a>.<p>The relationship between computer science and <!--del_lnk--> software engineering is a contentious issue, which is further muddied by <!--del_lnk--> disputes over what the term &quot;software engineering&quot; means, and how <!--del_lnk--> computer science is defined. Some people believe that software engineering is a subset of computer science. Others, taking a cue from the relationship between other engineering and science disciplines, believe that the principle focus of computer science is studying the properties of computation in general, while the principle focus of software engineering is the design of specific computations to achieve practical goals, making them different disciplines. This view is promulgated by (among others) <!--del_lnk--> David Parnas. Still others maintain that software cannot be engineered at all.<p><a id="Fields_of_computer_science" name="Fields_of_computer_science"></a><h2> <span class="mw-headline">Fields of computer science</span></h2>
      <p>Computer science searches for concepts and proofs to explain and describe computational systems of interest. It is a science because given a system of interest it performs /analysis/ and seeks general principals to explain that system. As with all sciences, these theories can then be utilised to synthesize practical engineering applications, which in turn may suggest new systems to be studied and analysed.<p><a id="Mathematical_foundations" name="Mathematical_foundations"></a><h3> <span class="mw-headline">Mathematical foundations</span></h3>
      <dl>
       <dt><!--del_lnk--> Mathematical logic<dd>Boolean logic and other ways of modeling logical queries; the uses and limitations of formal proof methods<dt><!--del_lnk--> Number theory<dd>Theory of proofs and heuristics for finding proofs in the simple domain of integers. Used in <a href="../../wp/c/Cryptography.htm" title="Cryptography">cryptography</a> as well as a test domain in <!--del_lnk--> artificial intelligence.<dt><!--del_lnk--> Graph theory<dd>Foundations for data structures and searching algorithms.<dt><!--del_lnk--> Type Theory<dd>Formal analysis of the types of data, and the use of these types to understand properties of programs &mdash; especially program safety.</dl>
      <p><a id="Theory_of_computation" name="Theory_of_computation"></a><h3> <span class="mw-headline">Theory of computation</span></h3>
      <dl>
       <dd>
      </dl>
      <dl>
       <dt><!--del_lnk--> Automata theory<dd>Different logical structures for solving problems.<dt><!--del_lnk--> Computability theory<dd>What is calculable with the current models of computers. Proofs developed by <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a> and others provide insight into the possibilities of what may be computed and what may not.<dt><!--del_lnk--> Computational complexity theory<dd>Fundamental bounds (especially time and storage space) on classes of computations.<dt><!--del_lnk--> Quantum computing theory</dl>
      <p><a id="Algorithms_and_data_structures" name="Algorithms_and_data_structures"></a><h3> <span class="mw-headline">Algorithms and data structures</span></h3>
      <dl>
       <dt><!--del_lnk--> Analysis of algorithms<dd>Time and space complexity of algorithms.<dt><!--del_lnk--> Algorithms<dd>Formal logical processes used for computation, and the efficiency of these processes.<dt><!--del_lnk--> Data structures<dd>The organization of and rules for the manipulation of data.</dl>
      <p><a id="Programming_languages_and_compilers" name="Programming_languages_and_compilers"></a><h3> <span class="mw-headline">Programming languages and compilers</span></h3>
      <dl>
       <dt><!--del_lnk--> Compilers<dd>Ways of translating computer programs, usually from <!--del_lnk--> higher level languages to <!--del_lnk--> lower level ones.<dt><a href="../../wp/p/Programming_language.htm" title="Programming language">Programming languages</a><dd>Formal language paradigms for expressing algorithms, and the properties of these languages (EG: what problems they are suited to solve).</dl>
      <p><a id="Concurrent.2C_parallel.2C_and_distributed_systems" name="Concurrent.2C_parallel.2C_and_distributed_systems"></a><h3> <span class="mw-headline">Concurrent, parallel, and distributed systems</span></h3>
      <dl>
       <dt><!--del_lnk--> Concurrency<dd>The theory and practice of simultaneous computation; data safety in any multitasking or multithreaded environment.<dt><!--del_lnk--> Distributed computing<dd>Computing using multiple computing devices over a network to accomplish a common objective or task and there by reducing the latency involved in single processor contributions for any task.<dt><!--del_lnk--> Parallel computing<dd>Computing using multiple concurrent threads of execution.</dl>
      <p><a id="Software_engineering" name="Software_engineering"></a><h3> <span class="mw-headline">Software engineering</span></h3>
      <dl>
       <dt><!--del_lnk--> Formal methods<dd>Mathematical approaches for describing and reasoning about software designs.<dt><!--del_lnk--> Software engineering<dd>The principles and practice of designing, developing, and testing programs, as well as proper engineering practices.<dt><!--del_lnk--> Reverse engineering<dd>The application of the scientific method to the understanding of arbitrary existing software<dt><!--del_lnk--> Algorithm design<dd>Using ideas from algorithm theory to creatively design solutions to real tasks<dt><a href="../../wp/c/Computer_programming.htm" title="Computer programming">Computer programming</a><dd>The practice of using a programming language to implement algorithms</dl>
      <p><a id="Computer_architecture" name="Computer_architecture"></a><h3> <span class="mw-headline">Computer architecture</span></h3>
      <dl>
       <dt><!--del_lnk--> Computer architecture<dd>The design, organization, optimization and verification of a computer system, mostly about <!--del_lnk--> CPUs and <!--del_lnk--> Memory subsystem (and the bus connecting them).<dt><!--del_lnk--> Operating systems<dd>Systems for managing computer programs and providing the basis of a useable system.</dl>
      <p><a id="Communications" name="Communications"></a><h3> <span class="mw-headline">Communications</span></h3>
      <dl>
       <dt><a href="../../wp/g/Game_theory.htm" title="Game theory">Game theory</a><dd>Recently game theory has drawn attention from computer scientists because of its use in artificial intelligence and <!--del_lnk--> cybernetics.</dl>
      <dl>
       <dt><!--del_lnk--> Networking<dd>Algorithms and protocols for reliably communicating data across different shared or dedicated media, often including <!--del_lnk--> error correction.</dl>
      <dl>
       <dt><a href="../../wp/c/Cryptography.htm" title="Cryptography">Cryptography</a><dd>Applies results from complexity, probability and number theory to invent and break codes.</dl>
      <p><a id="Databases" name="Databases"></a><h3> <span class="mw-headline">Databases</span></h3>
      <dl>
       <dt><!--del_lnk--> Relational databases<dt><!--del_lnk--> Data mining<dd>Study of algorithms for searching and processing information in documents and databases; closely related to <!--del_lnk--> information retrieval.</dl>
      <p><a id="Artificial_intelligence" name="Artificial_intelligence"></a><h3> <span class="mw-headline">Artificial intelligence</span></h3>
      <dl>
       <dt><!--del_lnk--> Artificial intelligence<dd>The implementation and study of systems that exhibit an autonomous intelligence or behaviour of their own.<dt><!--del_lnk--> Automated reasoning<dd>Solving engines, such as used in <!--del_lnk--> Prolog, which produce steps to a result given a query on a fact and rule database.<dt><!--del_lnk--> Robotics<dd>Algorithms for controlling the behaviour of robots.<dt><!--del_lnk--> Computer vision<dd>Algorithms for identifying three dimensional objects from a two dimensional picture.<dt><!--del_lnk--> Machine learning<dd>Automated creation of a set of rules and axioms based on input.</dl>
      <p><a id="Soft_computing" name="Soft_computing"></a><h3> <span class="mw-headline">Soft computing</span></h3>
      <dl>
       <dd>
      </dl>
      <p>A collective term for techniques used in solving specific problems. See the main article.<p><a id="Computer_graphics" name="Computer_graphics"></a><h3> <span class="mw-headline">Computer graphics</span></h3>
      <dl>
       <dt><!--del_lnk--> Computer graphics<dd>Algorithms both for generating visual images synthetically, and for integrating or altering visual and spatial information sampled from the real world.<dt><!--del_lnk--> Image processing<dd>Determining information from an image through computation.<dt><!--del_lnk--> Human computer interaction<dd>The study and design of computer interfaces that people use.</dl>
      <p><a id="Scientific_computing" name="Scientific_computing"></a><h3> <span class="mw-headline">Scientific computing</span></h3>
      <dl>
       <dt><!--del_lnk--> Numerical algorithms<dd>Numerical solution of mathematical problems such as <!--del_lnk--> root-finding, <!--del_lnk--> integration, the <!--del_lnk--> solution of ordinary differential equations and the approximation of <!--del_lnk--> special functions.<dt><!--del_lnk--> Symbolic mathematics<dd>Manipulation and solution of expressions in symbolic form, also known as <!--del_lnk--> Computer algebra.<dt><!--del_lnk--> Computational physics<dd>Numerical simulations of large non-analytic systems<dt><a href="../../wp/c/Computational_chemistry.htm" title="Computational chemistry">Computational chemistry</a><dd>Computational modelling of theoretical chemistry in order to determine chemical structures and properties<dt><a href="../../wp/b/Bioinformatics.htm" title="Bioinformatics">Bioinformatics</a><dd>The use of computer science to maintain, analyse, store <!--del_lnk--> biological data and to assist in solving biological problems such as <!--del_lnk--> Protein folding, function prediction and <!--del_lnk--> Phylogeny.<dt><!--del_lnk--> Computational neuroscience<dd>Computational modelling of real brains<dt><!--del_lnk--> Cognitive Science<dd>Computational modelling of real minds</dl>
      <p><a id="Computer_science_education" name="Computer_science_education"></a><h2> <span class="mw-headline">Computer science education</span></h2>
      <p>Some universities teach computer science as a theoretical study of computation and algorithmic reasoning. These programs often feature the <!--del_lnk--> theory of computation, <!--del_lnk--> analysis of algorithms, <!--del_lnk--> formal methods, <!--del_lnk--> concurrency theory, <!--del_lnk--> databases, <!--del_lnk--> computer graphics and <!--del_lnk--> systems analysis, among others. They typically also teach <a href="../../wp/c/Computer_programming.htm" title="Computer programming">computer programming</a>, but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study.<p>Other colleges and universities, as well as <!--del_lnk--> secondary schools and vocational programs that teach computer science, emphasize the practice of advanced <a href="../../wp/c/Computer_programming.htm" title="Computer programming">computer programming</a> rather than the theory of algorithms and computation in their computer science curricula. Such curricula tend to focus on those skills that are important to workers entering the software industry. The practical aspects of computer programming are often referred to as <!--del_lnk--> software engineering. However, there is a lot of <!--del_lnk--> disagreement over what the term &quot;software engineering&quot; actually means, and whether it is the same thing as programming.<dl>
       <dd>See <!--del_lnk--> Peter J. Denning, <i><!--del_lnk--> Great principles in computing curricula</i>, Technical Symposium on Computer Science Education, 2004.</dl>
      <p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Computer_science&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
