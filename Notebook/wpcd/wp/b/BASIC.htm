<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="BASIC,APL programming language,Acorn Computers Ltd,Acronym,Algol programming language,Altair 8800,Altair BASIC,Apple Computer,Apple II family,Array,Atari BASIC" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>BASIC</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "BASIC";
			var wgTitle = "BASIC";
			var wgArticleId = 4015;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-BASIC">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">BASIC</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <p>In <a href="../../wp/c/Computer_programming.htm" title="Computer programming">computer programming</a>, <b>BASIC</b> (an <!--del_lnk--> acronym for <b>Beginner&#39;s All-purpose Symbolic Instruction Code</b>) refers to a family of high-level <a href="../../wp/p/Programming_language.htm" title="Programming language">programming languages</a>. It was originally designed in 1963, by <!--del_lnk--> John George Kemeny and <!--del_lnk--> Thomas Eugene Kurtz at <!--del_lnk--> Dartmouth College, to provide access for non-science students to computers. At the time, nearly all computer use required writing custom software, which was something only <!--del_lnk--> scientists and <!--del_lnk--> mathematicians tended to do. The language (in one variant or another) became widespread on <!--del_lnk--> home microcomputers in the 1980s, and remains popular to this day in a handful of heavily evolved <!--del_lnk--> dialects.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <p>Prior to the mid-1960s, <a href="../../wp/c/Computer.htm" title="Computers">computers</a> were extremely expensive tools used only for special-purpose tasks. A simple <!--del_lnk--> batch processing arrangement ran only a single &quot;job&quot; at a time, one after another. During the 1960s, however, faster and more affordable computers became available. With this extra processing power, computers would sometimes sit idle, without jobs to run.<p>Programming languages in the batch programming era tended to be designed, like the machines on which they ran, for specific purposes (such as <!--del_lnk--> scientific formula calculations or business data processing or eventually for <!--del_lnk--> text editing). Since even the newer less expensive machines were still major investments, there was strong tendency to consider efficiency (ie, execution speed, and such) to be the most important feature of a language. In general, these specialized languages were difficult to use and had widely disparate <!--del_lnk--> syntax.<p>As prices decreased, the possibility of sharing computer access began to move from research labs to commercial use. Newer computer systems supported <!--del_lnk--> time-sharing, a system which allows multiple users or processes to use the <!--del_lnk--> CPU and memory. In such a system the <!--del_lnk--> operating system alternates between running processes, giving each one running time on the CPU before switching to another. The machines had become fast enough that most users could feel they had the machine all to themselves. In theory, timesharing reduced the cost of computing tremendously, as a single machine could be shared among (up to) hundreds of users.<p><a id="Early_years_.E2.80.94_the_mini_computer_era" name="Early_years_.E2.80.94_the_mini_computer_era"></a><h3> <span class="mw-headline">Early years &mdash; the mini computer era</span></h3>
      <p>The original BASIC language was designed in 1963 by <!--del_lnk--> John Kemeny and <!--del_lnk--> Thomas Kurtz and implemented by a team of Dartmouth students under their direction. BASIC was designed to allow students to write programs for the <!--del_lnk--> Dartmouth Time-Sharing System. It intended to address the complexity issues of older languages with a new language design specifically for the new class of users time-sharing systems allowed &mdash; that is, a less technical user who did not have the mathematical background of the more traditional users and was not interested in acquiring it. Being able to use a computer to support teaching and research was quite attractive enough. In the following years, as other dialects of BASIC appeared, Kemeny and Kurtz&#39; original BASIC dialect became known as <i><!--del_lnk--> Dartmouth BASIC</i>.<p>The eight design principles of BASIC were:<ol>
       <li>Be easy for beginners to use.<li>Be a <!--del_lnk--> general-purpose programming language.<li>Allow advanced features to be added for experts (while keeping the language simple for beginners).<li>Be <!--del_lnk--> interactive.<li>Provide clear and friendly <!--del_lnk--> error messages.<li>Respond quickly for small programs.<li>Not require an understanding of computer hardware.<li>Shield the user from the operating system.</ol>
      <p>The language was based partly on <!--del_lnk--> FORTRAN II and partly on <!--del_lnk--> ALGOL 60, with additions to make it suitable for timesharing. (The features of other time-sharing systems such as JOSS and CORC, and to a lesser extent LISP, were also considered). It had been preceded by other teaching-language experiments at Dartmouth such as the DARSIMCO (1956) and DOPE (1962 implementations of SAP and DART (1963) which was a simplified FORTRAN II). Initially, BASIC concentrated on supporting straightforward mathematical work, with <!--del_lnk--> matrix arithmetic support from its initial implementation as a batch language and full string functionality being added by 1965. BASIC was first implemented on the <!--del_lnk--> GE-265 <!--del_lnk--> mainframe which supported multiple <!--del_lnk--> terminals. Contrary to popular belief, it was a <!--del_lnk--> compiled language at the time of its introduction. It was also quite efficient, beating FORTRAN II and ALGOL 60 implementations on the 265 at several fairly computationally intensive programming problems such as maximization <!--del_lnk--> Simpson&#39;s Rule.<p>The designers of the language decided to make the compiler available without charge so that the language would become widespread. They also made it available to high schools in the Dartmouth area and put a considerable amount of effort into promoting the language. As a result, knowledge of BASIC became relatively widespread (for a computer language) and BASIC was implemented by a number of manufacturers, becoming fairly popular on newer <!--del_lnk--> minicomputers like the <!--del_lnk--> DEC <!--del_lnk--> PDP series and the <!--del_lnk--> Data General <!--del_lnk--> Nova. In these instances the language tended to be implemented as an <!--del_lnk--> interpreter, instead of (or in addition to) a <!--del_lnk--> compiler.<p>Several years after its release, highly-respected computer professionals, notably <!--del_lnk--> Edsger W. Dijkstra, expressed their opinions that the use of <!--del_lnk--> GOTO statements, which existed in many languages including BASIC, promoted poor programming practices. Some have also derided BASIC as too slow (most interpreted versions are slower than equivalent compiled versions) or too simple (many versions, especially for small computers left out important features and capabilities).<p><a id="Explosive_growth_.E2.80.94_the_home_computer_era" name="Explosive_growth_.E2.80.94_the_home_computer_era"></a><h3> <span class="mw-headline">Explosive growth &mdash; the home computer era</span></h3>
      <p>Notwithstanding the language&#39;s use on several minicomputers, it was the introduction of the <!--del_lnk--> MITS <!--del_lnk--> Altair 8800 <!--del_lnk--> microcomputer in 1975 that provided BASIC a path to universality. Most programming languages required more memory (and/or disk space) than were available on the small computers most users could afford. With the slow memory access that tapes provided and the lack of suitable text editors, a language like BASIC which could satisfy these constraints was attractive. BASIC also had the advantage that it was fairly well known to the young designers who took an interest in microcomputers. Kemeny and Kurtz&#39;s earlier proselytizing paid off in this respect. One of the first to appear for the 8080 machines like the Altair was <!--del_lnk--> Tiny BASIC, a simple BASIC implementation originally written by Dr. <!--del_lnk--> Li-Chen Wang, and then ported onto the Altair by Dennis Allison at the request of <!--del_lnk--> Bob Albrecht (who later founded <!--del_lnk--> Dr. Dobb&#39;s Journal). The Tiny BASIC design and the full source code were published in 1976 in DDJ.<p>In 1975, MITS released <!--del_lnk--> Altair BASIC, developed by <a href="../../wp/b/Bill_Gates.htm" title="Bill Gates">Bill Gates</a> and <!--del_lnk--> Paul Allen as <!--del_lnk--> Micro-Soft. The first Altair version was co-written by Gates, Allen and <!--del_lnk--> Monte Davidoff. Versions of <!--del_lnk--> Microsoft BASIC soon started appearing on other platforms under license, and millions of copies and variants were soon in use; it became one of the standard languages on the <!--del_lnk--> Apple II (based on the quite different 6502 MPU). By 1979, Microsoft was talking with several microcomputer vendors, including <!--del_lnk--> IBM, about licensing a BASIC interpreter for their computers. A version was included in the IBM PC <!--del_lnk--> ROM chips and PCs without floppy disks automatically booted into BASIC just like many other small computers.<p>Newer companies attempted to follow the successes of MITS, <!--del_lnk--> IMSAI, <!--del_lnk--> North Star and <!--del_lnk--> Apple, thus creating a <!--del_lnk--> home computer industry; meanwhile, BASIC became a standard feature of all but a very few home computers. Most came with a BASIC interpreter in ROM, thus avoiding the unavailable, or too expensive, disk problem. Soon there were many millions of machines running BASIC variants around the world, likely a far greater number than all the users of all other languages put together.<p>There are more <!--del_lnk--> dialects of BASIC than there are of any other <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a>. Most of the <!--del_lnk--> home computers of the 1980s had a <!--del_lnk--> ROM-resident BASIC <!--del_lnk--> interpreter.<p>The <a href="../../wp/b/BBC.htm" title="BBC">BBC</a> published <!--del_lnk--> BBC BASIC, developed for them by <!--del_lnk--> Acorn Computers Ltd, incorporating many extra structuring keywords, as well as comprehensive and versatile direct access to the operating system. It also featured a fully integrated assembler. BBC BASIC was a very well-regarded dialect, and made the transition from the original <!--del_lnk--> BBC Micro computer to more than 30 other platforms.<p>During this growth time for BASIC, many magazines were published such as <i>Creative Magazine</i> that included complete source codes for games, utilities, and other programs. Given BASIC&#39;s straightforward nature, it was considered a simple matter to type in the code from the magazine and execute the program. Different magazines were published featuring programs for specific computers, though some BASIC programs were universal and could be input into any BASIC-using machine.<p><a id="Maturity_.E2.80.94_the_personal_computer_era" name="Maturity_.E2.80.94_the_personal_computer_era"></a><h3> <span class="mw-headline">Maturity &mdash; the personal computer era</span></h3>
      <p>Many newer BASIC versions were created during this period. Microsoft sold several versions of BASIC for <!--del_lnk--> MS-DOS/<!--del_lnk--> PC-DOS including <!--del_lnk--> BASICA, <!--del_lnk--> GW-BASIC (a BASICA-compatible version that did not need IBM&#39;s ROM) and <!--del_lnk--> QuickBASIC. Turbo Pascal-publisher <!--del_lnk--> Borland published <!--del_lnk--> Turbo BASIC 1.0 in 1985 (successor versions are still being marketed by the original author under the name <!--del_lnk--> PowerBASIC).<p>These languages introduced many extensions to the original home computer BASIC, such as improved <!--del_lnk--> string manipulation and graphics support, access to the <!--del_lnk--> file system and additional <!--del_lnk--> data types. More important were the facilities for <!--del_lnk--> structured programming, including additional <!--del_lnk--> control structures and proper <!--del_lnk--> subroutines supporting <!--del_lnk--> local variables.<p>However, by the latter half of the 1980s newer computers were far more capable with more resources. At the same time, computers had progressed from a hobbyist interest to tools used primarily for applications written by others, and programming became less important for most users. BASIC started to recede in importance, though numerous versions remained available. Compiled BASIC or CBASIC is still used in many IBM 4690 OS point of sale systems.<p>BASIC&#39;s fortunes reversed once again with the introduction of <!--del_lnk--> Visual Basic by Microsoft. It is somewhat difficult to consider this language to be BASIC, because of the major shift in its orientation towards an <!--del_lnk--> object-oriented and <!--del_lnk--> event-driven perspective. While this could be considered an evolution of the language, few of the distinctive features of early <!--del_lnk--> Dartmouth BASIC, such as <!--del_lnk--> line numbers and the <code>INPUT</code> keyword, remain.<p>Many BASIC dialects have also sprung up in the last few years, including <!--del_lnk--> Bywater BASIC and <!--del_lnk--> True BASIC (the direct successor to Dartmouth BASIC from a company controlled by Kurtz). Recently, the remaining community using Microsoft&#39;s pre-Visual Basic products have begun to switch wholesale to <!--del_lnk--> FreeBASIC, a <!--del_lnk--> GPLed compiler which has moved BASIC onto a <!--del_lnk--> GCC backend. Many other BASIC variants and adaptations have been written by hobbyists, equipment developers, and others, as it is a relatively simple language to develop translators for. An example of an open source interpreter, written in C, is <!--del_lnk--> MiniBasic.<p>The ubiquity of BASIC interpreters on personal computers was such that textbooks once included simple <b>TRY IT IN BASIC</b> exercises that encouraged students to experiment with mathematical and computational concepts on classroom or home computers. Futurist and sci-fi writer <!--del_lnk--> David Brin mourns the loss of ubiquitous BASIC in a recent Salon article <!--del_lnk--> Why Johnny Can&#39;t Code.<p><a id="The_language" name="The_language"></a><h2> <span class="mw-headline">The language</span></h2>
      <p><a id="Syntax" name="Syntax"></a><h3> <span class="mw-headline">Syntax</span></h3>
      <p>Basic statements are terminated by line endings unless there is a line continuation character. A very minimal BASIC syntax only needs the LET, PRINT, IF and <!--del_lnk--> GOTO commands.<p>Line numbers were a very distinctive aspect of classic home computer BASIC. Due to the limitations of static line numbering, BASIC interpreters later introduced a built-in RENUMBER command which allowed for more interactive programming. Some (but not all) modern BASIC dialects have abandoned line numbers altogether in favour of line labels, and support advanced control structures and data declaration constructs available in other languages such as <!--del_lnk--> C and <!--del_lnk--> Pascal (note also that some versions of BASIC that used line numbers implemented these constructs as well):<ul>
       <li><!--del_lnk--> for loops<li><!--del_lnk--> while loops<li><!--del_lnk--> switch statements<li><!--del_lnk--> subroutines and functions</ul>
      <p>Recent variants such as <!--del_lnk--> Visual Basic have introduced features such as the For Each...Loop construct for looping through collections and arrays in VBA and Visual Basic 4 and later, and even <!--del_lnk--> Object-oriented programming with <!--del_lnk--> inheritance in the latest version. <!--del_lnk--> Memory management is easier than in many other procedural programming languages because of the commonly included <!--del_lnk--> garbage collector.<p>This wealth of variants shows that the language user and developer communities are active, and that BASIC may be seen as a subculture dealing with computer programming rather than as a fixed set of syntactic rules. This applies as well to other &quot;old&quot; computer languages like <!--del_lnk--> COBOL and <!--del_lnk--> FORTRAN, although the BASIC movement is by far the largest; this may be explained by the large number of IT professionals who learned to program in BASIC during the home computer era in the 1980s.<p><a id="Procedures_and_flow_control" name="Procedures_and_flow_control"></a><h3> <span class="mw-headline">Procedures and flow control</span></h3>
      <p>Most BASICs do not use an external library for common operations like other languages such as C. Instead, the interpreter (or compiler) contains an extensive built-in library of intrinsic procedures, rather like most Pascals. These procedures include most of the tools a programmer needs to learn programming and write simple applications, including functions for math, strings, console input/output, graphics and file manipulation.<p>Some BASIC dialects do not provide built-in structuring facilities, such as the Procedure construct. In these, programmers must write their programs using <!--del_lnk--> GOSUB statements and ad hoc argument transmission to emulate these structures. When not done by an expert, this produces poorly-structured unmaintainable programs, commonly referred to as <i><!--del_lnk--> spaghetti code</i>. GOSUB statements branch to simple kinds of <!--del_lnk--> subroutines without (though sometimes with) parameters or local variables. Most modern versions of BASIC such as <!--del_lnk--> Microsoft QuickBASIC have added support for full subroutines and functions. Most BASICs, like FORTRAN, ALGOL or Pascal, make a distinction between a procedure which returns a value (called a function) and a procedure which does not (called a subroutine).<p>While functions, in the larger sense of subroutines returning values, were a latecomer to BASIC dialects, many early systems supported the definition of one-line mathematical functions by DEF FN (&quot;DEFine FunctioN&quot;). The original Dartmouth BASIC also supported Algol-like functions and subroutines from the late 1960s, as did the <!--del_lnk--> BASIC09 variant from about 1979.<p><a id="Data_types" name="Data_types"></a><h3> <span class="mw-headline">Data types</span></h3>
      <p>BASIC is known for good <!--del_lnk--> string manipulation functions. Early dialects already had a set of fundamental functions (LEFT$, MID$, RIGHT$) for string operations. Because strings are often used in everyday applications, this was a considerable convenience advantage over many other languages at the time of its introduction.<p>The original Dartmouth BASIC supported only numeric and string data types. There was no <!--del_lnk--> integer type, leaving all numeric variables as <!--del_lnk--> floating point. Strings were dynamic, and could change their length. <!--del_lnk--> Arrays of both numbers and strings were supported, as well as simple matrices (ie, two dimensional arrays).<p>Every modern BASIC dialect at least has a numeric and a string data type. Data types are usually distinguished by a <i><!--del_lnk--> sigil</i>, or suffixed character; typically, string identifiers end with &#39;$&#39;, whereas integer numerics usually end with a &#39;%&#39;. In some dialects, variables must be declared (using the DIM statement) on their first usage; other dialects do not require it, but can optionally enforce it&mdash;typically using a directive such as <i>Option Explicit</i>, In <!--del_lnk--> Visual Basic it is off by default but can be turned on using <i>Option Explicit On</i>. Many dialects also support such additional types as 16- and 32-bit integers and floating-point numbers. Some have &quot;polynomial&quot;, &quot;complex&quot;, &quot;list&quot; and specialized types designed to support particular end users&#39; needs. Additionally, some allow user-defined types in a manner similar to Pascal &quot;<!--del_lnk--> records&quot; or C &quot;structs&quot;.<p>Most BASIC dialects beyond the most primitive also support arrays of numerics or of other types. In some, arrays must be pre-declared (ie, allocated with the DIM statement) before they can be used. Support for two- and higher-dimensional arrays, as well as arrays of non-numeric types, is common in advanced BASICs.<pre>
DIM myIntArray(100) AS INTEGER   &mdash; some versions will only allow: DIM myIntArray%(100)  
DIM myStringArray(50) AS STRING  &mdash; some versions will only allow: DIM myStringArray$(50)  
</pre><p>Depending on the dialect of BASIC, arrays are 0-based (ie, the first element has subscript &#39;0&#39;), while others are 1-based (the first element is subscripted &#39;1&#39;). So, in some, commands like the first in the example will define a 101-element array of integers with elements from 0 to 100, others may define a 100-element array of integers with elements from 1 to 100 or, rarely, from 0 to 99. It may also be possible to set a default beginning element number other than 0 or 1 with an additional command such as <i>Option Base</i>. The Microsoft BASIC example above will create an array with elements numbered from 0 to 100.<p>When working with strings, commands like the second may allocate a 50-element array of variable-length strings, or may allocate a single string of 50 characters. Note that they are also subject to the basing differences mentioned above.<p>These non-standard and, to some, less than intuitive dimensioning examples often confuse the novice (and even the advanced) programmer. Newer dialects offer specific dimensioning, such as DIM myIntArray (10 TO 20) AS INTEGER which would be an 11-element array with elements numbered from 10 to 20.<p><a id="Relational.2C_logical_operators" name="Relational.2C_logical_operators"></a><h3> <span class="mw-headline">Relational, logical operators</span></h3><pre>
 =  equal           &lt;=  less than or equal       NOT  logical negation
&lt;&gt;  not equal       &gt;=  greater than or equal    AND  logical conjunction
 &lt;  less than                                    OR   logical disjunction
 &gt;  greater than
</pre><p>Note that there is no lexical distinction between the assignment operator and the equality operator in BASIC; a single <!--del_lnk--> equal sign is used for both. There is, however, a method available to the programmer if a visible difference between the two is wanted: the optional LET keyword allows for assignments to be clearly and unambiguously distinguished from the use of the equality operator. Example: <code>IF X=7 THEN LET Y=3</code>.<p>Also note that the AND, OR, NOT operators are actually bitwise arithmetic operations. They can also be used as logical operations, because most BASIC dialects represent the boolean values by -1 (true) and 0 (false). However, they resemble the <!--del_lnk--> C bitwise arithmetic operators <code>&amp;</code>, <code>|</code> and <code>~</code> respectively, more than the <!--del_lnk--> C logical operators <code>&amp;&amp;</code>, <code>||</code> and <code>!</code>: for example, AND and OR always evaluate <b>both</b> their arguments (they are not <i>short-circuiting</i> operators).<p><a id="Examples" name="Examples"></a><h2> <span class="mw-headline">Examples</span></h2>
      <p><a id="A_first_program" name="A_first_program"></a><h3> <span class="mw-headline">A first program</span></h3>
      <p>New BASIC programmers on a home computer might start with a simple program similar to the <!--del_lnk--> Hello world program made famous by <!--del_lnk--> Kernighan and Ritchie. This generally involves a simple use of the language&#39;s PRINT statement to display the a message (such as the programmer&#39;s name) to the screen. Often an <!--del_lnk--> infinite loop was used to fill the display with the message.<p><a id="Classic_BASIC" name="Classic_BASIC"></a><h3> <span class="mw-headline">Classic BASIC</span></h3>
      <p>Note that this example is actually well structured, demonstrating that use of the GOTO statement need not necessarily lead to an unstructured program.<pre>
 10 INPUT &quot;What is your name: &quot;; U$
 20 PRINT &quot;Hello &quot;; U$
 30 REM
 40 INPUT &quot;How many stars do you want: &quot;; N
 50 S$ = &quot;&quot;
 60 FOR I = 1 TO N
 70 S$ = S$ + &quot;*&quot;
 80 NEXT I
 90 PRINT S$
 100 REM
 110 INPUT &quot;Do you want more stars? &quot;; A$
 120 IF LEN(A$) = 0 THEN GOTO 110
 130 A$ = LEFT$(A$, 1)
 140 IF (A$ = &quot;Y&quot;) OR (A$ = &quot;y&quot;) THEN GOTO 40
 150 PRINT &quot;Goodbye &quot;;
 160 FOR I = 1 TO 200
 170 PRINT U$; &quot; &quot;;
 180 NEXT I
 190 PRINT
</pre><p><a id="Modern_BASIC" name="Modern_BASIC"></a><h3> <span class="mw-headline">Modern BASIC</span></h3>
      <p>&quot;Modern&quot; structured BASICs (for example, <!--del_lnk--> QuickBASIC, <!--del_lnk--> FreeBasic, <!--del_lnk--> PureBasic, <!--del_lnk--> BlitzMax, <!--del_lnk--> PowerBASIC, and <!--del_lnk--> TrueBASIC) support classic commands such as GOTO statements to varying degrees, while adding many more modern keywords.<p>The previous example in <!--del_lnk--> QuickBASIC:<pre>
INPUT &quot;What is your name&quot;; UserName$
PRINT &quot;Hello &quot;; UserName$
DO
   INPUT &quot;How many stars do you want&quot;; NumStars
   Stars$ = &quot;&quot;
   Stars$ = REPEAT$(&quot;*&quot;, NumStars)   &#39; &lt;- ANSI BASIC
   <i>--or--</i>
   Stars$ = STRING$(NumStars, &quot;*&quot;)   &#39; &lt;- MS   BASIC
   PRINT Stars$
   DO
      INPUT &quot;Do you want more stars&quot;;  Answer$
   LOOP UNTIL Answer$ &lt;&gt; &quot;&quot;
   Answer$ = LEFT$(Answer$, 1)
LOOP WHILE  UCASE$(Answer$) = &quot;Y&quot;
PRINT &quot;Goodbye &quot;;
FOR I = 1 TO 200
   PRINT UserName$; &quot; &quot;;
NEXT I
PRINT
</pre><p>For comparison, the same program in the more modern <!--del_lnk--> PureBasic:<pre>
OpenConsole()
Print(&quot;What is your name &quot;)
UserName$ = Input()
PrintN(&quot;Hello &quot; + UserName$)
Repeat
   Print(&quot;How many stars do you want &quot;)
   NumStars = Val(Input())
   Stars$ = RSet(&quot;&quot;, NumStars, &quot;*&quot;)
   PrintN(Stars$)
   Repeat
      Print(&quot;Do you want more stars &quot;)
      Answer$ = Input()
   Until Answer$ &lt;&gt; &quot;&quot;
   Answer$ = Left(Answer$, 1)
Until UCase(Answer$) &lt;&gt; &quot;Y&quot;
Print(&quot;Goodbye &quot;)
For I = 1 To 200
   Print(UserName$ + &quot; &quot;)
Next I
PrintN(&quot;&quot;)
CloseConsole()
</pre><p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/BASIC&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
