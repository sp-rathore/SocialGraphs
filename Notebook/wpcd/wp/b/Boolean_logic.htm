<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="noindex,nofollow" name="robots" />
  <meta content="Boolean logic,Digital systems,Digital systems,1938,19th century,Absorption laws,Algebra of sets,Algebraic structure,Associativity,Binary arithmetic,Binary numeral system" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Boolean logic</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/skins-1.5";
var wgArticlePath = "/wiki/$1";
var wgScriptPath = "/w";
var wgServer = "http://en.wikipedia.org";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Boolean_logic";
var wgTitle = "Boolean logic";
var wgAction = "view";
var wgArticleId = "2701239";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "127709360";
/*]]>*/</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Boolean_logic">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Boolean logic</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.Mathematics.htm">Mathematics</a></h3>
      <!-- start content -->
      <p><b>Boolean logic</b> is a complete system for <a href="../../wp/l/Logic.htm" title="Logic">logical</a> <!--del_lnk--> operations. It was named after <!--del_lnk--> George Boole, an English mathematician at <!--del_lnk--> University College Cork who first defined an <!--del_lnk--> algebraic system of logic in the mid <a href="../../wp/1/19th_century.htm" title="19th century">19th century</a>. Boolean logic has many applications in electronics, computer hardware and software, and is the base of <!--del_lnk--> digital electronics. In <!--del_lnk--> 1938, <!--del_lnk--> Claude Shannon showed how electric circuits with relays were a model for Boolean logic. This fact soon proved enormously consequential with the emergence of the electronic <a href="../../wp/c/Computer.htm" title="Computer">computer</a>.<p><i>Using the <!--del_lnk--> algebra of sets, this article contains a basic introduction to <a href="../../wp/s/Set.htm" title="Set">sets</a>, Boolean operations, <a href="../../wp/v/Venn_diagram.htm" title="Venn diagram">Venn diagrams</a>, <!--del_lnk--> truth tables, and Boolean applications. The <!--del_lnk--> Boolean algebra article discusses a type of <!--del_lnk--> algebraic structure that satisfies the axioms of Boolean logic. The <!--del_lnk--> binary arithmetic article discusses the use of <!--del_lnk--> binary numbers in <a href="../../wp/c/Computer.htm" title="Computer">computer</a> systems.</i><script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
      <p><a id="Terms" name="Terms"></a><h2> <span class="mw-headline">Terms</span></h2>
      <div class="thumb tright">
       <div class="thumbinner" style="width:292px;"><a class="internal" href="../../images/170/17055.svg.htm" title="Venn diagram showing the intersection of sets A AND B (in violet), the union of sets A OR B (all the colored regions), and set A XOR B (all the colored regions except the violet).  The &quot;universe&quot; is represented by the rectangular frame."><img alt="Venn diagram showing the intersection of sets A AND B (in violet), the union of sets A OR B (all the colored regions), and set A XOR B (all the colored regions except the violet).  The &quot;universe&quot; is represented by the rectangular frame." class="thumbimage" height="191" longdesc="/wiki/Image:Venn_A_intersect_B.svg" src="../../images/45/4508.png" width="290" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/170/17055.svg.htm" title="Enlarge"><img alt="" height="11" src="../../images/0/1.png" width="15" /></a></div> Venn diagram showing the intersection of sets A AND B (in violet), the union of sets A OR B (all the colored regions), and set A XOR B (all the colored regions except the violet). The &quot;universe&quot; is represented by the rectangular frame.</div>
       </div>
      </div>
      <p>Let <i>X</i> be a set:<ul>
       <li>An <b>element</b> is one member of a set. This is denoted by <img alt="\in" class="tex" src="../../images/45/4509.png" />. If it&#39;s not an element of the set, this is denoted by <img alt="\notin" class="tex" src="../../images/45/4510.png" />.</ul>
      <ul>
       <li>The <b>universe</b> is the set <i>X</i>, sometimes denoted by 1. Note that this use of the word universe means <i>&quot;all elements being considered&quot;</i>, which are not necessarily the same as <i>&quot;all elements there are&quot;</i>.</ul>
      <ul>
       <li>The <b>empty set</b> or <b>null set</b> is the set of no elements, denoted by <img alt="\varnothing" class="tex" src="../../images/45/4511.png" /> and sometimes 0.</ul>
      <ul>
       <li>A <b>unary operator</b> applies to a single set. There is one unary operator, called logical <b>NOT</b>. It works by taking the <!--del_lnk--> complement.</ul>
      <ul>
       <li>A <b>binary operator</b> applies to two sets. The basic binary operators are logical <b>OR</b> and logical <b>AND</b>. They perform the <!--del_lnk--> union and <!--del_lnk--> intersection of sets. There are also other derived binary operators, such as <b>XOR</b> (exclusive OR). See <!--del_lnk--> the geometry of logic.</ul>
      <ul>
       <li>A <b>subset</b> is denoted by <img alt="A \subseteq B" class="tex" src="../../images/45/4512.png" /> and means every element in set A is also in set B.</ul>
      <ul>
       <li>A <b>proper subset</b> is denoted by <img alt="A \subset B" class="tex" src="../../images/45/4514.png" /> and means every element in set A is also in set B and the two sets are not equal.</ul>
      <ul>
       <li>A <b>superset</b> is denoted by <img alt="A \supseteq B" class="tex" src="../../images/45/4515.png" /> and means every element in set B is also in set A.</ul>
      <ul>
       <li>A <b>proper superset</b> is denoted by <img alt="A \supset B" class="tex" src="../../images/45/4516.png" /> and means every element in set B is also in set A and the two sets are not equal.</ul>
      <p><a id="Example" name="Example"></a><h2> <span class="mw-headline">Example</span></h2>
      <div class="floatright"><span><a class="image" href="../../images/45/4517.png.htm" title=""><img alt="" height="307" longdesc="/wiki/Image:Boolean_multiples_of_2_3_5.svg" src="../../images/45/4517.png" width="480" /></a></span></div>
      <p>Let&#39;s imagine that set A contains all even numbers (multiples of two) in &quot;the universe&quot; and set B contains all multiples of three in &quot;the universe&quot;. Then the <b>intersection</b> of the two sets (all elements in sets A AND B) would be all multiples of six in &quot;the universe&quot;.<p>The complement of set A (all elements NOT in set A) would be all odd numbers in &quot;the universe&quot;.<p><a id="Chaining_operations_together" name="Chaining_operations_together"></a><h3> <span class="mw-headline">Chaining operations together</span></h3>
      <p>While at most two sets are joined in any Boolean operation, the new set formed by that operation can then be joined with other sets utilizing additional Boolean operations. Using the previous example, we can define a new set C as the set of all multiples of five in &quot;the universe&quot;. Thus &quot;sets A AND B AND C&quot; would be all multiples of 30 in &quot;the universe&quot;. If more convenient, we may consider set AB to be the intersection of sets A and B, or the set of all multiples of six in &quot;the universe&quot;. Then we can say &quot;sets AB AND C&quot; are the set of all multiples of 30 in &quot;the universe&quot;. We could then take it a step further, and call this result set ABC.<p><a id="Use_of_parentheses" name="Use_of_parentheses"></a><h3> <span class="mw-headline">Use of parentheses</span></h3>
      <p>While any number of logical ANDs (or any number of logical ORs) may be chained together without ambiguity, the combination of ANDs and ORs and NOTs can lead to ambiguous cases. In such cases, parentheses may be used to clarify the order of operations. As always, the operations within the innermost pair is performed first, followed by the next pair out, etc., until all operations within parentheses have been completed. Then any operations outside the parentheses are performed.<p><a id="Properties" name="Properties"></a><h2> <span class="mw-headline">Properties</span></h2>
      <p>Let&#39;s define symbols for the two primary binary operations as <img alt="\land / \cap" class="tex" src="../../images/45/4519.png" /> (logical AND/intersection) and <img alt="\lor / \cup" class="tex" src="../../images/45/4520.png" /> (logical OR/union), and for the single unary operation <img alt="\lnot" class="tex" src="../../images/45/4521.png" /> / ~ (logical NOT/complement). We will also use the values 0 (logical FALSE/the empty set) and 1 (logical TRUE/the universe). The following properties apply to both Boolean algebra and Boolean logic:<dl>
       <dd>
        <table cellpadding="5">
         <tr>
          <td><img alt="a \lor (b \lor c) = (a \lor b) \lor c" class="tex" src="../../images/45/4522.png" /></td>
          <td><img alt="a \land (b \land c) = (a \land b) \land c" class="tex" src="../../images/45/4523.png" /></td>
          <td><!--del_lnk--> associativity</td>
         </tr>
         <tr>
          <td><img alt="a \lor b = b \lor a" class="tex" src="../../images/45/4524.png" /></td>
          <td><img alt="a \land  b = b \land a" class="tex" src="../../images/45/4525.png" /></td>
          <td><!--del_lnk--> commutativity</td>
         </tr>
         <tr>
          <td><img alt="a  \lor (a \land b) = a" class="tex" src="../../images/45/4526.png" /></td>
          <td><img alt="a \land (a \lor b) = a" class="tex" src="../../images/45/4527.png" /></td>
          <td><!--del_lnk--> absorption</td>
         </tr>
         <tr>
          <td><img alt="a \lor  (b \land c) = (a \lor b) \land (a \lor c)" class="tex" src="../../images/45/4528.png" /></td>
          <td><img alt="a \land  (b \lor c) = (a \land b) \lor (a \land c)" class="tex" src="../../images/45/4529.png" /></td>
          <td><!--del_lnk--> distributivity</td>
         </tr>
         <tr>
          <td><img alt="a \lor  \lnot a = 1" class="tex" src="../../images/45/4530.png" /></td>
          <td><img alt="a \land \lnot a = 0" class="tex" src="../../images/45/4531.png" /></td>
          <td><!--del_lnk--> complements</td>
         </tr>
         <tr>
          <td><img alt="a \lor a = a" class="tex" src="../../images/45/4533.png" /></td>
          <td><img alt="a \land a = a" class="tex" src="../../images/45/4534.png" /></td>
          <td><!--del_lnk--> idempotency</td>
         </tr>
         <tr>
          <td><img alt="a \lor 0 = a" class="tex" src="../../images/45/4539.png" /></td>
          <td><img alt="a \land 1 = a" class="tex" src="../../images/45/4540.png" /></td>
          <td rowspan="2"><!--del_lnk--> boundedness</td>
         </tr>
         <tr>
          <td><img alt="a \lor 1 = 1" class="tex" src="../../images/45/4542.png" /></td>
          <td><img alt="a \land 0 = 0" class="tex" src="../../images/45/4543.png" /></td>
         </tr>
         <tr>
          <td><img alt="\lnot 0 = 1" class="tex" src="../../images/45/4545.png" /></td>
          <td><img alt="\lnot 1 = 0" class="tex" src="../../images/45/4546.png" /></td>
          <td>0 and 1 are <!--del_lnk--> complements</td>
         </tr>
         <tr>
          <td><img alt="\lnot (a \lor b) = \lnot a  \land \lnot b" class="tex" src="../../images/45/4547.png" /></td>
          <td><img alt="\lnot (a \land b) = \lnot a  \lor \lnot b" class="tex" src="../../images/45/4548.png" /></td>
          <td><!--del_lnk--> de Morgan&#39;s laws</td>
         </tr>
         <tr>
          <td><img alt="\lnot \lnot a = a" class="tex" src="../../images/45/4550.png" /></td>
          <td>
          </td>
          <td><!--del_lnk--> involution</td>
         </tr>
        </table>
      </dl>
      <p>The first three properties define a <!--del_lnk--> lattice; the first five define a <!--del_lnk--> Boolean algebra.<p><a id="Truth_tables" name="Truth_tables"></a><h2> <span class="mw-headline">Truth tables</span></h2>
      <p>For Boolean logic using only two values, 0 and 1, the INTERSECTION and UNION of those values may be defined using <!--del_lnk--> truth tables such as these:<table>
       <tr>
        <td width="80">
        </td>
        <td>
         <table border="1" cellpadding="4" cellspacing="0">
          <tr>
           <th><img alt="\cap" class="tex" src="../../images/45/4551.png" /></th>
           <th>0</th>
           <th>1</th>
          </tr>
          <tr>
           <th>0</th>
           <td>0</td>
           <td>0</td>
          </tr>
          <tr>
           <th>1</th>
           <td>0</td>
           <td>1</td>
          </tr>
         </table>
        </td>
        <td width="40">
        </td>
        <td>
         <table border="1" cellpadding="4" cellspacing="0">
          <tr>
           <th><img alt="\cup" class="tex" src="../../images/45/4552.png" /></th>
           <th>0</th>
           <th>1</th>
          </tr>
          <tr>
           <th>0</th>
           <td>0</td>
           <td>1</td>
          </tr>
          <tr>
           <th>1</th>
           <td>1</td>
           <td>1</td>
          </tr>
         </table>
        </td>
       </tr>
      </table>
      <ul>
       <li>More complex truth tables involving multiple inputs, and other Boolean operations, may also be created.</ul>
      <ul>
       <li>Truth tables have applications in <a href="../../wp/l/Logic.htm" title="Logic">logic</a>, interpreting 0 as FALSE, 1 as TRUE, <img alt="\cap" class="tex" src="../../images/45/4551.png" /> as AND, <img alt="\cup" class="tex" src="../../images/45/4552.png" /> as OR, and &not; as NOT.</ul>
      <p><a id="Other_notations" name="Other_notations"></a><h2> <span class="mw-headline">Other notations</span></h2>
      <p><!--del_lnk--> Mathematicians and <!--del_lnk--> engineers often use plus (+) for OR and a product sign (<img alt="\cdot" class="tex" src="../../images/45/4555.png" />) for AND. OR and AND are somewhat analogous to addition and multiplication in other <!--del_lnk--> algebraic structures, and this notation makes it very easy to get <!--del_lnk--> sum of products form for normal algebra. NOT may be represented by a line drawn above the expression being negated (<img alt="\overline{x}" class="tex" src="../../images/226/22674.png" />).<p><!--del_lnk--> Programmers will often use a pipe symbol (|) for OR, an ampersand (&amp;) for AND, and a tilde (~) for NOT. In many <a href="../../wp/p/Programming_language.htm" title="Programming language">programming languages</a>, these symbols stand for <!--del_lnk--> bitwise operations. &quot;||&quot;, &quot;&amp;&amp;&quot;, and &quot;!&quot; are used for variants of these operations.<p>Another notation uses &quot;meet&quot; for AND and &quot;join&quot; for OR. However, this can lead to confusion, as the term &quot;join&quot; is also commonly used for any Boolean operation which combines sets together, which includes both AND and OR.<p><a id="Basic_mathematics_use_of_Boolean_terms" name="Basic_mathematics_use_of_Boolean_terms"></a><h2> <span class="mw-headline">Basic mathematics use of Boolean terms</span></h2>
      <ul>
       <li>In the case of simultaneous equations, they are connected with an implied logical AND:</ul>
      <dl>
       <dd>
        <dl>
         <dd>x + y = 2</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>AND</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>x - y = 2</dl>
      </dl>
      <ul>
       <li>The same applies to simultaneous inequalities:</ul>
      <dl>
       <dd>
        <dl>
         <dd>x + y &lt; 2</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>AND</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>x - y &lt; 2</dl>
      </dl>
      <ul>
       <li>The greater than or equals sign (<img alt="\ge" class="tex" src="../../images/45/4556.png" />) and less than or equals sign (<img alt="\le" class="tex" src="../../images/45/4557.png" />) may be assumed to contain a logical OR:</ul>
      <dl>
       <dd>
        <dl>
         <dd>X &lt; 2</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>OR</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>X = 2</dl>
      </dl>
      <ul>
       <li>The plus/minus sign (<img alt="\pm" class="tex" src="../../images/446/44607.png" />), as in the case of the solution to a square root problem, may be taken as logical OR:</ul>
      <dl>
       <dd>
        <dl>
         <dd>WIDTH = 3</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>OR</dl>
      </dl>
      <dl>
       <dd>
        <dl>
         <dd>WIDTH = -3</dl>
      </dl>
      <p><a id="English_language_use_of_Boolean_terms" name="English_language_use_of_Boolean_terms"></a><h2> <span class="mw-headline">English language use of Boolean terms</span></h2>
      <p>Care should be taken when converting an English sentence into a formal Boolean statement. Many English sentences have imprecise meanings, e.g. &quot;All that glitters is <b>not</b> gold,&quot; which could mean that &quot;nothing that glitters is gold&quot; or &quot;some things which glitter are not gold&quot;.<p>AND and OR can also be used interchangeably in English, in certain cases:<ul>
       <li>&quot;I always carry an umbrella for when it rains <b>and</b> snows.&quot;</ul>
      <ul>
       <li>&quot;I always carry an umbrella for when it rains <b>or</b> snows.&quot;</ul>
      <p>Sometimes the English words AND and OR have the opposite meaning in Boolean logic:<ul>
       <li>&quot;Give me all the red <b>and</b> blue berries&quot; usually means &quot;Give me all berries that are red <b>or</b> blue&quot;. An alternative phrasing for standard written English: &quot;Give me all berries that are red as well as all berries that are blue&quot;.</ul>
      <p>Also note that the word OR in English may correspond with either logical OR or logical XOR, depending on the context:<ul>
       <li>&quot;I start to sweat when the humidity <b>or</b> temperature is high.&quot; (logical OR)</ul>
      <ul>
       <li>&quot;You want ice cream and candy? You may have ice cream <b>or</b> candy.&quot; (logical XOR)</ul>
      <p>The combination AND/OR is sometimes used in English to specify a logical OR, when just using the word OR alone might have been mistaken as meaning logical XOR:<ul>
       <li>&quot;I&#39;m having chicken <b>and/or</b> beef for dinner.&quot; (logical OR). An alternative phrasing for standard written English: &quot;I&#39;m having either chicken or beef or both for dinner.&quot;</ul>
      <p>The use of the &quot;and/or&quot; <!--del_lnk--> virgule is generally disfavored in formal written English. Such usage may introduce critical imprecision in legal instruments, research findings, and <!--del_lnk--> specifications for computer programs or electronic circuits. For example, the statement: &quot;the program should verify that the applicant has checked the male <b>or</b> female box&quot;, should be taken as an XOR, and a check added to ensure that one, and only one, box is selected. In other cases, the interpretation of English may be less certain, and the author of the specification may need to be consulted to determine their true intent.<p><a id="Applications" name="Applications"></a><h2> <span class="mw-headline">Applications</span></h2>
      <p><a id="Digital_electronic_circuit_design" name="Digital_electronic_circuit_design"></a><h3> <span class="mw-headline">Digital electronic circuit design</span></h3>
      <p>Boolean logic is also used for circuit design in <a href="../../wp/e/Electrical_engineering.htm" title="Electrical engineering">electrical engineering</a>; here 0 and 1 may represent the two different states of one <!--del_lnk--> bit in a <!--del_lnk--> digital circuit, typically high and low <!--del_lnk--> voltage. Circuits are described by expressions containing variables, and two such expressions are equal for all values of the variables if, and only if, the corresponding circuits have the same input-output behavior. Furthermore, every possible input-output behaviour can be modeled by a suitable Boolean expression.<p>Basic <!--del_lnk--> logic gates such as AND, OR, and NOT gates may be used alone, or in conjunction with NAND, NOR, and XOR gates, to control digital electronics and circuitry. Whether these gates are wired in <!--del_lnk--> series or parallel controls the precedence of the operations.<p><a id="Database_applications" name="Database_applications"></a><h3> <span class="mw-headline">Database applications</span></h3>
      <p><!--del_lnk--> Relational databases use <!--del_lnk--> SQL, or other database-specific languages, to perform queries, which may contain Boolean logic. For this application, each record in a table may be considered to be an &quot;element&quot; of a &quot;set&quot;. For example, in SQL, these <!--del_lnk--> SELECT statements are used to retrieve data from tables in the database:<pre>
   SELECT * FROM EMPLOYEES WHERE LAST_NAME = &#39;Smith&#39; AND FIRST_NAME = &#39;John&#39; ;
</pre> <pre>
   SELECT * FROM EMPLOYEES WHERE LAST_NAME = &#39;Smith&#39; OR  FIRST_NAME = &#39;John&#39; ;
</pre> <pre>
   SELECT * FROM EMPLOYEES WHERE NOT LAST_NAME = &#39;Smith&#39; ;
</pre><p>Parentheses may be used to explicitly specify the order in which Boolean operations occur, when multiple operations are present:<pre>
   SELECT * FROM EMPLOYEES WHERE (NOT LAST_NAME = &#39;Smith&#39;) AND (FIRST_NAME = &#39;John&#39; OR FIRST_NAME = &#39;Mary&#39;) ;
</pre><p>Multiple sets of nested parentheses may also be used, where needed.<p>Any Boolean operation (or operations) which combines two (or more) tables together is referred to as a <b>join</b>, in relational database terminology.<p>In the field of <!--del_lnk--> Electronic Medical Records, some software applications use Boolean logic to query their patient databases, in what has been named <!--del_lnk--> Concept Processing technology.<p><a id="Search_engine_queries" name="Search_engine_queries"></a><h3> <span class="mw-headline">Search engine queries</span></h3>
      <p>Search engine queries also employ Boolean logic. For this application, each web page on the Internet may be considered to be an &quot;element&quot; of a &quot;set&quot;. The following examples use a syntax supported by <a href="../../wp/g/Google.htm" title="Google">Google</a>.<ul>
       <li>Doublequotes are used to combine whitespace-separated words into a single search term.<li>Whitespace is used to specify logical AND, as it is the default operator for joining search terms:</ul><pre>
   &quot;Search term 1&quot; &quot;Search term 2&quot;
</pre><ul>
       <li>The OR keyword is used for logical OR:</ul><pre>
   &quot;Search term 1&quot; OR &quot;Search term 2&quot;
</pre><ul>
       <li>The minus sign is used for logical NOT (AND NOT):</ul><pre>
   &quot;Search term 1&quot; -&quot;Search term 2&quot;
</pre><p>
       <br />
      <p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Boolean_logic&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
