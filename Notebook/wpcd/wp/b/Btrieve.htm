<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Btrieve,1994,2004,April 29,Architecture of Btrieve,Austin, Texas,Backend,Backus-Naur form,CEO,Caldera OpenLinux,Chairman" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Btrieve</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Btrieve";
			var wgTitle = "Btrieve";
			var wgArticleId = 542386;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Btrieve">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Btrieve</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Software.htm">Software</a></h3>
      <!-- start content -->
      <div class="metadata topicon" id="featured-star" style="right:10px; display:none;">
       <div style="position: relative; width: 14px; height: 14px; overflow: hidden">
        <div style="position: absolute; top: 0px; left: 0px; font-size: 100px; overflow: hidden; line-height: 100px; z-index: 3"><!--del_lnk--> <span title="This is a featured article. Click here for more information.">&nbsp;&nbsp;&nbsp;</span></div>
        <div style="position: absolute; top: 0px; left: 0px; z-index: 2"><a class="image" href="../../images/0/24.png.htm" title="This is a featured article. Click here for more information."><img alt="This is a featured article. Click here for more information." height="14" longdesc="/wiki/Image:LinkFA-star.png" src="../../images/0/24.png" width="14" /></a></div>
       </div>
      </div>
      <div class="floatright"><span><!--del_lnk--> <img alt="" height="40" longdesc="/wiki/Image:Pervasive_logo.png" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="150" /></span></div>
      <p>In <!--del_lnk--> computing, <b>Btrieve</b> is a <!--del_lnk--> transactional database based on <!--del_lnk--> Indexed Sequential Access Method (ISAM), which is a way of storing <!--del_lnk--> data for fast retrieval. Btrieve was modularised in version 6.15 and became one of two database <!--del_lnk--> backends that plugged into a standard <!--del_lnk--> software interface called the <!--del_lnk--> Micro-Kernel Database Engine (the other product is <!--del_lnk--> Scalable SQL, a <!--del_lnk--> relational database product that uses <!--del_lnk--> Structured Query Language, otherwise known as SQL). There have been several versions of the product for <!--del_lnk--> DOS, <a href="../../wp/l/Linux.htm" title="Linux">Linux</a>, older versions of <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a>, <!--del_lnk--> Windows 98, <!--del_lnk--> Windows NT, <a href="../../wp/w/Windows_2000.htm" title="Windows 2000">Windows 2000</a>, <a href="../../wp/w/Windows_XP.htm" title="Windows XP">Windows XP</a>, <!--del_lnk--> Windows Server 2003 and for <!--del_lnk--> Novell NetWare.<p>It was originally a record manager that was shipped by SoftCraft at around the same time as the release of the first <!--del_lnk--> IBM PCs. After gaining market share and popularity, it was purchased by Novell for integration into their Netware <!--del_lnk--> operating system. The product failed to gain significant market share and, after some reorganisation within Novell, the product was spun off to be developed by a new company known as Btrieve Technologies, Inc. (or BTI). After several new versions were released the company was renamed to <!--del_lnk--> Pervasive Software and they now sell a product called <!--del_lnk--> Pervasive PSQL that can use both Btrieve and SQL.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Architecture" name="Architecture"></a><h2> <span class="mw-headline">Architecture</span></h2>
      <dl>
       <dd>
      </dl>
      <div class="thumb tright">
       <div style="width:225px;"><a class="internal" href="../../images/239/23946.png.htm" title="The MKDE model allows for different database backends to be plugged in to Pervasive&#39;s software product."><img alt="The MKDE model allows for different database backends to be plugged in to Pervasive&#39;s software product." height="134" longdesc="/wiki/Image:MKDE_model.png" src="../../images/239/23946.png" width="223" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/239/23946.png.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> The MKDE model allows for different database backends to be plugged in to Pervasive&#39;s software product.</div>
       </div>
      </div>
      <p>Btrieve is not a <!--del_lnk--> relational database management system (RDBMS). Early descriptions of Btrieve referred to it as a <i>record manager</i> (though Pervasive initially used the term <!--del_lnk--> navigational database but later changed this to transactional database) because it only deals with the underlying record creation, data retrieval, record updating and data deletion primitives. It uses <!--del_lnk--> ISAM as its underlying <!--del_lnk--> indexing and storage mechanism. A key part of Pervasive&#39;s architecture is the use of a <!--del_lnk--> MicroKernel Database Engine, which allows different database <!--del_lnk--> backends to be modularised and integrated easily into their DBMS package, Pervasive.SQL. This has allowed them to support both their Btrieve navigational database engine and an SQL-based engine, Scalable SQL.<p>Current versions of Btrieve support <!--del_lnk--> system transactions and user transactions, where system transactions are a bundle of non-transactional operations and/or user transactions, while user transactions are transactions that work on actual data in the database. System transactions were developed to allow multiple transactions to be done in a batch and to allow the ability to recover data more easily.<p>The Btrieve file format consists entirely of <!--del_lnk--> pages, which are the data that moves between memory and storage media when the engine performs an I/O operation. Versions prior to 6.0 merely used data pages, index pages and a <!--del_lnk--> file control record (FCR). The file had an index for searching that linked to physical pages. Beginning with version 6.0 logical pages started to be used, which are pages that are mapped to physical pages (pages at a fixed location in the file) on the disk through the use of a set of <!--del_lnk--> page allocation tables (PATs). The FCR is a record that contains important information about Btrieve files, such as the number of pages in current use. In order to avoid corruption in the database Btrieve uses two methods of updating records: <i>pre-image paging</i> in Btrieve versions before 6.0 and <i>shadow paging</i> in subsequent versions. It was mainly the change-over from pre-image paging to shadow-paging that caused radical file format changes that broke compatibility between previous versions of Btrieve and version 6.x of the product.<p><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <p>Btrieve has been owned and developed by three different companies: SoftCraft, Novell and Btrieve Technologies, Inc. (later renamed Pervasive Software). They have a committed and loyal developer-base and in all the company&#39;s literature they remain fully committed to the product; in fact, Pervasive have even set up a <!--del_lnk--> Btrieve Society that recognises existing developers.<p><a id="SoftCraft_years" name="SoftCraft_years"></a><h3> <span class="mw-headline">SoftCraft years</span></h3>
      <p>The product was launched in February 1982 by SoftCraft, a firm located in <!--del_lnk--> Austin, <!--del_lnk--> Texas, by Doug and Nancy Woodward. Doug became the vice-president and handled software development, and Nancy became the president of the company. They released a number of versions over the next few years: in February 1983 they released the Btrieve 2.x series, and when <!--del_lnk--> MS-DOS 2.x developed support for file and directory handles they released Btrieve 3.0. When MS-DOS 3.1 standardised its internal interfaces in March 1985 they released Btrieve 3.1 C/S one month later, which had <!--del_lnk--> network and <!--del_lnk--> client/server support. In February 1986 Btrieve 4.0 was released, and when the 4.1 upgrade was released it gained support for extended key types and supplemental indexes.<p>Although Btrieve was fairly popular, it was not strongly differentiated from the <!--del_lnk--> killer-app database on the PC, <!--del_lnk--> dBase, and never gained the same sort of popularity. However, the known developer base had grown to over 5,000 users and it was widely used in the financial area. The company took some time to create a <!--del_lnk--> user-interface for the product, however in 1984 they released <b>Xtrieve</b>, a menu-driven program that used a new <!--del_lnk--> .DDF <!--del_lnk--> data dictionary to enforce <!--del_lnk--> relational database rules.<p><a id="Novell_acquisition" name="Novell_acquisition"></a><h3> <span class="mw-headline">Novell acquisition</span></h3>
      <div class="floatright"><span><!--del_lnk--> <img alt="" height="88" longdesc="/wiki/Image:Novell_Logo.png" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="76" /></span></div>
      <p>In 1987 <!--del_lnk--> Novell started diversifying and buying companies to add to their <!--del_lnk--> NetWare <!--del_lnk--> operating system. One of the companies they purchased was SoftCraft. Nancy Woodward became the Vice-President and General Manager of Novell&#39;s Austin operations while Doug Woodward became the Vice-President of Advanced Database Technologies. Early the next year Btrieve 5.0 was released to run as a native NetWare application, or VAP (Value Added Process). According to Jim Kyle, &quot;it had auto-increment key types, the BROUTER network process server, data-only and key-only files, and optional data compression&quot;. Version 5.1 was released in 1990 with increased file-handling transaction capability, logging and roll-forward operations, along with several API enhancements. Several versions were created for <!--del_lnk--> DOS, <!--del_lnk--> OS/2 and <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a>. Version 6.0 was released in June 1992, however it was not promoted extensively by Novell, and due to enhancements (such as the change from pre-imaging to shadow-paging) it was incompatible with previous versions of Btrieve. The market did not increase much for Btrieve and it did not see wide adoption due to these issues.<p>When the company was acquired by Novell, SoftCraft had been working on a product called <b>XQL</b>, which was an <!--del_lnk--> SQL interpreter that was designed to better deal with industry standard SQL, which the Xtrieve package was not fully compliant with. This became the basis for <b>NetWare SQL</b>, which was initially released in 1989, and was a bare-bones SQL interpreter which implemented the base IBM version of SQL.<p><a id="Btrieve_Technologies.2C_Inc." name="Btrieve_Technologies.2C_Inc."></a><h3> <span class="mw-headline">Btrieve Technologies, Inc.</span></h3>
      <div class="floatright"><span><!--del_lnk--> <img alt="" height="65" longdesc="/wiki/Image:Btrieve_logo.PNG" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="109" /></span></div>
      <p>By 1994 Novell had largely given up on attempting to make NetWare into a complete alternative operating system, and started selling off many of the companies it had acquired only a few years earlier. They had also done minimal promotion of Btrieve, largely due to the long time (24 months) it took to release version 6. Negotiations between Nancy and Doug Woodward with Novell were entered into and after two years Novell announced (on <!--del_lnk--> January 26, <!--del_lnk--> 1994) that it was going to transfer ownership of Btrieve to Btrieve Technologies, Incorporated (also known as BTI). On <!--del_lnk--> April 29, 1994 the transfer was completed and Nancy Woodward became the <!--del_lnk--> Chairman of BTI and Doug Woodward was made the <!--del_lnk--> Chief Technical Officer. The <!--del_lnk--> CEO position was taken up by Ron Harris, former employee of <!--del_lnk--> Texas Instruments and one of the founding employees of <!--del_lnk--> Citrix Systems, Inc. where he was employed first as Director of Strategic Planning, then as Vice-President of Marketing, and finally as the Product Group Vice President.<p>Btrieve was totally rewritten and on <!--del_lnk--> July 1 1994 Btrieve 6.15 was released for DOS, Windows and OS/2. Novell SQL was renamed to <b>Scalable SQL</b> to reflect the change in ownership of the company. In 1995 version 6.15 was released for Novell <!--del_lnk--> NetWare, <!--del_lnk--> Windows NT Server and for Windows NT/<!--del_lnk--> 95, and thus became a <!--del_lnk--> cross-platform database product. The concept of a Micro Kernel Database Engine (MKDE) was introduced in this version.<p><a id="Pervasive_Software" name="Pervasive_Software"></a><h3> <span class="mw-headline">Pervasive Software</span></h3>
      <div class="floatright"><span><!--del_lnk--> <img alt="" height="40" longdesc="/wiki/Image:Pervasive_logo.png" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="150" /></span></div>
      <p>In 1997 the company renamed itself to <!--del_lnk--> Pervasive Software, and their product Pervasive.SQL. They did this in order to allow greater penetration of the relational database market and to re-align as an SQL vendor, though they are still marketing and developing Btrieve. Pervasive completed its <!--del_lnk--> IPO in September. The company continued using the MKDE in version 6.30. In 1997 Pervasive released ScalableSQL 4.0, a relational database product, and Btrieve 7.0.<p>In 2000, Novell was criticized after it ceased bundling Pervasive.SQL with NetWare (5.1 was the first version affected). Instead, it shipped with a trial version that shut down after 90-days.<p>The latest version, Pervasive PSQL v9, was released in 2005.<p><a id="Versions" name="Versions"></a><h2> <span class="mw-headline">Versions</span></h2>
      <p><a id="Btrieve_for_DOS" name="Btrieve_for_DOS"></a><h3> <span class="mw-headline">Btrieve for DOS</span></h3>
      <p>There was one DOS client-based configuration of Btrieve created by SoftCraft. SoftCraft&#39;s definition of a client-based version was a &quot;Btrieve engine running on a particular workstation.&quot; This meant that the record-management engine connected directly to the files via operating system functions and modified the records accordingly, whether the files were local or on a network. The client-based engine allowed five <!--del_lnk--> concurrent users to access the database at any one time. All processing of the records were done on the local workstation the engine was installed on. Btrieve for DOS used the SEFS and MEFS modes for file sharing.<p><a id="Btrieve_for_Netware" name="Btrieve_for_Netware"></a><h3> <span class="mw-headline">Btrieve for Netware</span></h3>
      <p>Btrieve for Netware was essentially the same as Btrieve for DOS with some extra features only available on Netware at the time. It ran a server process, called <code>BSERVER</code>, on the file-sharing server and this managed data <!--del_lnk--> I/O in conjunction with the network file system. The server process was first implemented as a Netware <i><!--del_lnk--> Value Added Process</i> (VAP) called <code>BSERVER.VAP</code>, but was switched to a Netware <i><!--del_lnk--> NetWare Loadable Module</i> (NLM) soon after. Basically, <code>BSERVER</code> was the database engine that dealt with access to records, however it also accepted requests from the transmittal of requested data to another server via the <code>BROUTER</code> process.<p>Btrieve used <i>requesters</i> to make database I/O requests from the client workstation. These requesters were available for DOS, OS/2, Microsoft Windows, and <!--del_lnk--> UnixWare. The program <code>BREQUEST.EXE</code> accepted I/O requests via the Btrieve API and relayed them to <code>BSERVER</code>. It then handled the responses from <code>BSERVER</code> and relayed them back to the appropriate applications.<p>The <code>BROUTER</code> process allowed for incoming requests to be &quot;routed&quot; to a copy of the database on another server. It was loaded on the Netware server and dealt with communication between multiple server processes running on the one file-server through the use of two <i>File Server Tables</i> (FSTs). According to Pervasive, these provide a list of &quot;server names and addresses, and the <i>Server Routing Table</i> (SRT)&quot;. BROUTER also allowed communication requests to be routed to the correct server via SPX by looking up the <code>BSPXCOM</code> NLM and coordinated locks and other mechanisms that controlled access to the data in the Btrieve database.<p>Btrieve for DOS used the SEFS and MEFS modes for file sharing, and because it was able to run on a network it was able to use exclusive and concurrent transactions.<p><a id="Btrieve_for_Windows" name="Btrieve_for_Windows"></a><h3> <span class="mw-headline">Btrieve for Windows</span></h3>
      <p>Btrieve for Windows was created before the company rewrote the codebase to use the MKDE. It featured SEFS and MEFS file sharing mechanisms; used shadow-paging and allowed for exclusive and concurrent locks. It handled version 6.x and 6.1 files differently: version 6.x files could handle operations on &ldquo;chunks&rdquo; of records rather than locking up the whole record; it handled records that were over 64KB; implemented VATs, ACSs, new data types; allowed for percentage operations (where the record could be located and manipulated by the physical location in the file) and handled duplicate keys. Version 6.x was capable of dropping or adding any index on the fly (version 6.0 and below could only drop supplemental indexes). Version 6.1 files allowed for concurrent and system transactions; the optional renumbering of keys; case insensitive ACS tables and enhanced locking operations.<p>Btrieve for Windows could run as a client to the database that utilized SEFS or MEFS modes, or it could directly access the Btrieve server.<p><a id="Client-based_Btrieve" name="Client-based_Btrieve"></a><h4> <span class="mw-headline">Client-based Btrieve</span></h4>
      <div class="floatright"><span><a class="image" href="../../images/239/23950.png.htm" title=""><img alt="" height="250" longdesc="/wiki/Image:Btrieve_for_Windows_95NT_Workstation_config.PNG" src="../../images/239/23950.png" width="230" /></a></span></div>
      <p>The client-based version of Btrieve has all the database files either directly on the local computer or via a mapped network drive (setup using DOS&rsquo;s <code>NET USE</code> command).<p>Applications make a function call to <code>WBTRCALL.DLL</code>, a loader and requester interface. The loader and requester module checks the <code>BTI.INI</code> configuration file is correctly setup to load the client-based Btrieve engine. In turn, this loads the local interface to the btrieve engine (<code>WBTRLOCL.DLL</code>). If necessary, this local interface loads the Btrieve engine (<code>WBTR32.EXE</code>) into memory and sends the necessary database requests to it. The database engine then calls various Win32 system libraries to perform file operations on the database files.<p><a id="Client-based_Btrieve_accessing_server-based_Btrieve" name="Client-based_Btrieve_accessing_server-based_Btrieve"></a><h4> <span class="mw-headline">Client-based Btrieve accessing server-based Btrieve</span></h4>
      <p>The client-based version of Btrieve for Windows could access sever-based versions of Btrieve via a DOS-based &quot;requester&quot;. The requestor required the use of <!--del_lnk--> DOS Protected Mode Interface (DPMI) which allows the program access to DOS&#39;s <!--del_lnk--> extended memory which could only accessed using the <!--del_lnk--> Protected Mode functionality of the CPU&#39;s <!--del_lnk--> x86 architecture.<p>As with the client-based interface, the Btrieve-based application makes a call to the <code>WBTRCALL.DLL</code> loader and requester interface library. This library checks the <code>BTI.INI</code> file to see if it needs to access data on the local system or whether it needs to access data on a remote server. If it needs to access the server then it uses the Windows version of DPMI to access a DOS-based requester named <code>BREQUEST.EXE</code>. The requester then establishes a network connection to the server, which processes the request and passes back a message to the requester when the database request is completed.<p><a id="Btrieve_for_Windows_NT.2FWindows_95" name="Btrieve_for_Windows_NT.2FWindows_95"></a><h3> <span class="mw-headline">Btrieve for Windows NT/Windows 95</span></h3>
      <p>Btrieve for Windows NT and Windows 95 was released in 1995 along with Btrieve for Netware and Btrieve for Windows NT Server. It had reached version 6.15 and started using the <!--del_lnk--> MKDE. The file sharing mechanisms remained the same as it still used SEFS and MEFS file sharing modes; used shadow-paging and allowed for exclusive and concurrent locks. This version of Btrieve allowed for <!--del_lnk--> null values in keys, which meant that a record could be entered into the database when information on the key was not available. It meant that the key would not be included into the index, and this helped decrease unnecessary searching of the database via the index. It also introduced the concept of a <i>system transaction</i> and a <i>user transaction</i>. (see <i><!--del_lnk--> System and user transactions</i>). The MKDE also allowed gaps between auto-incremented keys. <!--del_lnk--> Variable-tail allocation tables were introduced in version 6.15, so they were included in the Windows NT/95 build of Btrieve.<p>There are two configurations of Btrieve for Windows NT/95: standalone workstation and client/server.<p><a id="Standalone_Workstation" name="Standalone_Workstation"></a><h4> <span class="mw-headline">Standalone Workstation</span></h4>
      <div class="floatright"><span><a class="image" href="../../images/239/23950.png.htm" title=""><img alt="" height="250" longdesc="/wiki/Image:Btrieve_for_Windows_95NT_Workstation_config.PNG" src="../../images/239/23950.png" width="230" /></a></span></div>
      <p>When using the <i>standalone workstation</i> configuration of Btrieve, all processing of records is done on the local <!--del_lnk--> workstation. The workstation relies on the underlying mechanisms of Windows to allow the MKDE (the <code>W32MKDE.EXE</code> program) to gain direct access to the database files, and uses lock files to deal with concurrency issues.<p>In this configuration the application makes calls to the Btrieve API, or Microkernel Interface (<code>WBTRV32.DLL</code>). The call is then processed by this interface and passed along to the MKDE (<code>W32MKDE.EXE</code>) which then uses the underlying operating system <!--del_lnk--> file system (whether it be network or local) to directly access the database files.<p>This leads to some peculiar issues. If Btrieve uses <!--del_lnk--> Windows file sharing and has the database engine open files directly on a file share, for instance, and there is network instability (or even if a network cable is unplugged) during an update the fields used to link one Btrieve file to another can become unsynchronized (to all intents and purposes the data loses its relationships or links to other data) and the database file itself can get corrupted (though the chance of this is reduced due to pre-image paging).<p><a id="Client.2FServer" name="Client.2FServer"></a><h4> <span class="mw-headline">Client/Server</span></h4>
      <div class="floatright"><span><!--del_lnk--> <img alt="" height="257" longdesc="/wiki/Image:MKDE_server.png" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="493" /></span></div>
      <p>When using the <i>client/server</i> (or <i>Server edition</i>) configuration of Btrieve, processing of records is generally done on a Windows file server via a mapped drive (a way of mapping a file share to a &quot;virtual&quot; disk drive in Windows via the <code>NET USE</code> command). It utilises the permissions that you are assigned when authenticating, either from when logging on or via the permissions given for the <code>NET USE</code> is utilised.<p>On Windows 95 the MKDE interface (a Windows <!--del_lnk--> dynamic link library (DLL) called <code>WBTRV32.DLL</code>) actually determines what database access method is in use via the configuration file. If it detects that both the client/server and workstation engines are installed on the one machine it checks whether the target is set to workstation or server. If running on Windows NT and the server process <code>NTMKDE.EXE</code> is running along with the standalone workstation process <code>W32MKDE.EXE</code> it looks in the registry to determine if the target is either server or workstation. In both cases, if the MKDE interface is set to workstation (the &quot;Standalone workstation&quot; configuration) it uses the MKDE (<code>W32MKDE.EXE</code>) to directly access the file. If it is set to server then the MKDE interface on the client uses a communications module (on <!--del_lnk--> Windows 95 this is <code>W32BTICM.DLL</code>, on <!--del_lnk--> Windows NT this is <code>NTBTICM.DLL</code>) that &quot;talks&quot; to the <!--del_lnk--> server. The server itself has its own matching communications module (again either <code>W32BTICM.DLL</code> or <code>NTBTICM.DLL</code>) that resides on the mapped drive. The server DLL then communicates with the server MKDE (<code>NTMKDE.EXE</code>) which updates records, then sends a confirmation that the operation succeeded back through the communications module to the client.<p>The advantage of this system is that if a network connection failure occurs the MKDE on the server will be able to detect this and recover in a more graceful manner than the workstation configuration is able to.<p><a id="Configuration" name="Configuration"></a><h4> <span class="mw-headline">Configuration</span></h4>
      <p>A configuration utility was included with Btrieve to alter MKDE settings. The settings that could be changed were:<ul>
       <li><b>File settings:</b> this category contains settings related to files, file handles, record locks, indexes, and log files. The number of open files and logical file handles was set in here, as well as the number of record locks per client; index balancing and an option to create files in pre 6.x format are in this category. It also controlled whether the Microkernel kept a log of operations executed on selected files. In this section the method of file sharing could be set to either MEFS or SEFS. The system transaction hold limit sets the number of system transactions performed during write operations for shared files.<li><b>Memory organisation:</b> this category contained settings related to the size of buffers the Microkernel needed to allocate for various purposes.<li><b>Client/System transactions:</b> this category contains settings related to transactions, including the number supported and how and when they will be logged.<li><b>System resources/directories:</b> this category contains settings related to the number of clients and threads supported as well as the location of various system files.<li><b>Trace operations:</b> this category contains settings related to tracing various Btrieve operations. Tracing is an advanced feature used mainly for <!--del_lnk--> debugging purposes.</ul>
      <p><a id="Pervasive.SQL_7" name="Pervasive.SQL_7"></a><h3> <span class="mw-headline">Pervasive.SQL 7</span></h3>
      <p>Pervasive SQL 7 was released in March, 1998, and included Scalable SQL 4 and Btrieve 7.0. Btrieve 7.0 ran on the same platforms as Btrieve 6.x: Windows 95, Windows NT 3.51 &amp; 4, Netware and DOS. However, the company changed to a component-based architecture called SmartComponents to resolve compatibility issues with upgrades. This used a component identification scheme both embedded into the file and encoded into the file name, along with <!--del_lnk--> dynamic binding of &quot;glue files&quot; (DLLs loaded into memory only when needed). The dynamic binding of components was done using a new &quot;Abstract OS Services DLL&quot; that looked for the latest version of the appropriate needed component via the file name encoding. This &quot;glue module&quot; is then loaded into memory and used. The old log file format of Btrieve 6.x was also replaced with a new centralised log called <code>PVSW.LOG</code> and that had a unified and enhanced log file format. They also improved their error messages and error message reporting mechanisms.<p>The MKDE was retained in Pervasive.SQL 7 however, due to the new component architecture&#39;s dynamic binding, the internal architecture was modified. The application using Btrieve calls a services manager which then searches through various configured directories for specific encoded filename. The file name loaded for Btrieve files in <!--del_lnk--> Backus-Naur form is:<pre>
&lt;filename&gt; ::= &lt;platform-code&gt; &quot;BIF&quot; &lt;major-functional-level&gt; &lt;minor-functional-level&gt;
&lt;platform-code&gt; ::= &quot;W1&quot; | &quot;W2&quot; | &quot;W3&quot; | &quot;W9&quot; | &quot;WT&quot; | &quot;NW&quot; | &quot;O3&quot;
&lt;major-functional-level&gt; ::= &lt;number&gt;
&lt;minor-functional-level&gt; ::= &lt;number&gt; &lt;number&gt;
&lt;number&gt; ::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;
</pre><table class="wikitable">
       <caption>Embedded filename platform codes</caption>
       <tr bgcolor="#CCCCCC">
        <th><b>Platform code</b></th>
        <th><b>Platform</b></th>
       </tr>
       <tr>
        <td>W1</td>
        <td><!--del_lnk--> Windows 3.1x, incl. Windows for Workgroups (Win16)</td>
       </tr>
       <tr>
        <td>W2</td>
        <td>Extended Windows (32-bit <!--del_lnk--> Watcom Extender)</td>
       </tr>
       <tr>
        <td>W3</td>
        <td>Windows 95, Windows NT (Win32)</td>
       </tr>
       <tr>
        <td>W9</td>
        <td>Windows 95</td>
       </tr>
       <tr>
        <td>WT</td>
        <td>Windows NT</td>
       </tr>
       <tr>
        <td>NW</td>
        <td>Netware 3.x and 4.x</td>
       </tr>
       <tr>
        <td>O3</td>
        <td>OS/2 (32-bit)</td>
       </tr>
      </table>
      <p>The &quot;glue&quot; module, which is a DLL, is loaded into memory and becomes the interface to the MKDE. The MKDE then determines whether it is configured to be a workstation based configuration or a server based configuration. It then passes requests via its communications &quot;requester&quot; module onto the database server, or directly modifies the database files if configured in workstation mode.<p><a id="Pervasive.SQL_2000.2F2000i" name="Pervasive.SQL_2000.2F2000i"></a><h3> <span class="mw-headline">Pervasive.SQL 2000/2000i</span></h3>
      <p>Pervasive.SQL 2000 and Pervasive.SQL 2000i uses essentially the same architecture as Pervasive.SQL 7, though 2000i includes i*Net server. It uses the same component model, has the ability to use the Btrieve or Scalable SQL engines and continues using an MKDE. In this version for <!--del_lnk--> Red Hat Linux, <!--del_lnk--> Caldera OpenLinux, <!--del_lnk--> SUSE and <!--del_lnk--> Solaris was developed. It also had better integration with <!--del_lnk--> Terminal Services, though only one instance of the database engine may run on any terminal server platform. You cannot run separate copies of the database engine within two or more terminal sessions.<p><a id="Pervasive.SQL_V8" name="Pervasive.SQL_V8"></a><h3> <span class="mw-headline">Pervasive.SQL V8</span></h3>
      <p>Introduced in December 2002, Pervasive.SQL V8 improves the performance of both Btrieve and SQL applications using a number of new technologies.<ul>
       <li>Client side caching greatly improves read performance by maintaining a portion of the database&#39;s contents on the local PC.<li>Turbo Write Acceleration (TWA) groups disk writes into groups, minimizing interactions with disk.<li>Transaction Logging provides a slightly less failure protection than transaction durability, but improves overall performance.</ul>
      <p>The V8 Security Feature Pack (a mid-release product update designated 8.5) added important new security features designed to lock down Pervasive.SQL data files. Prior to 8.5, access to Btrieve data was controlled by the operating system&#39;s security mechanism. This meant that any user who needed read/write access to the database, also needed read/write access to the underlying data files. 8.5 introduced new security models, which allow administrators to control access to the Btrieve data using database security. Once activated, database security no longer requires that the user has access to the underlying files. In addition, client/server configurations no longer require the use of network shares or mapped drives. Applications can reference secure Btrieve data using a URI connection string.<p><a id="Pervasive_PSQL_v9" name="Pervasive_PSQL_v9"></a><h3> <span class="mw-headline">Pervasive PSQL v9</span></h3>
      <p>The current version of PSQL includes new Java GUIs, built on the Eclipse framework. These GUIs are available for both Microsoft Windows and Linux. In addition, v9 included many SQL performance and syntax updates, improving both the speed and flexibility of all of the SQL interfaces - ADO.Net, JDBC, ODBC, and OLE DB. Finally, PSQL v9 expanded the Btrieve maximum file size to 128 GB.<p>In conjunction with PSQL v9 Pervasive reintroduced the DDF Builder utility and added support for text searching with the Full Text Search (FTS) add-on. DDF Builder provides a mechanism for Btrieve users to define the meta data for existing Btrieve files, thus allowing Btrieve data to be accessible via SQL tools and utilities.<p>All versions of the MKDE retain full backward compatibility with earlier versions of Btrieve, including those that pre-date introduction of the MKDE itself, and do not change the file&#39;s version unless specifically requested to do so.<p><a id="Pervasive_PSQL_Ecosystem" name="Pervasive_PSQL_Ecosystem"></a><h3> <span class="mw-headline">Pervasive PSQL Ecosystem</span></h3>
      <p>Pervasive now offers a number of add-on products which extend the basic features of the PSQL DBMS.<ul>
       <li>Pervasive AuditMaster provides real-time auditing of all database interactions, whether Btrieve or SQL. Logs of data events can be queried to track changes to sensitive data. Alerts can also be created to notify the appropriate personnel or launch the associated process.<li>Pervasive Backup Agent manages PSQL&#39;s continuous operations mode and allows backup software to reliably copy online databases.<li>Pervasive DataExchange provides data synchronization and replication between two or more PSQL engines, ensuring that critical data is always available.</ul>
      <p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Btrieve&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
