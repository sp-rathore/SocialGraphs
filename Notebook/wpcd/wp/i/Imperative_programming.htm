<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Imperative programming,Bjarne Stroustrup,1960s,Object-oriented programming language,Simula,C++,C programming language,1980s,1985,Xerox Palo Alto Research Center,1980" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Imperative programming</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Imperative_programming";
			var wgTitle = "Imperative programming";
			var wgArticleId = 197847;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Imperative_programming">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Imperative programming</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <p>In <a href="../../wp/c/Computer_science.htm" title="Computer science">computer science</a>, <b>imperative programming</b>, as contrasted with <!--del_lnk--> declarative programming, is a <!--del_lnk--> programming paradigm that describes computation as <!--del_lnk--> statements that change a program <!--del_lnk--> state. In much the same way as the <!--del_lnk--> imperative mood in <!--del_lnk--> natural languages expresses commands to take action, imperative programs are a sequence of commands for the <a href="../../wp/c/Computer.htm" title="Computer">computer</a> to perform. A commonly used synonym to <b>imperative programming</b> is <!--del_lnk--> procedural programming.<p>Imperative programming languages stand in contrast to other types of languages, such as <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional</a> and <!--del_lnk--> logical programming languages. Functional programming languages, such as <!--del_lnk--> Haskell, are not a sequence of statements and have no global state as imperative languages do. Logical programming languages, like <!--del_lnk--> Prolog, are often thought of as defining &quot;what&quot; is to be computed, rather than &quot;how&quot; the computation is to take place, as an imperative programming language does.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Overview" name="Overview"></a><h2> <span class="mw-headline">Overview</span></h2>
      <p>The hardware implementation of almost all computers is imperative; nearly all computer hardware is designed to execute <!--del_lnk--> machine code, which is native to the computer, written in the imperative style. From this low-level perspective, the program state is defined by the contents of memory, and the statements are instructions in the native machine language of the computer. Higher-level imperative languages use <!--del_lnk--> variables and more complex statements, but still follow the same <!--del_lnk--> paradigm. <!--del_lnk--> Recipes and process <!--del_lnk--> checklists, while not <!--del_lnk--> computer programs, are also familiar concepts that are similar in style to imperative programming; each step is an instruction, and the physical world holds the state. Since the basic ideas of imperative programming are both conceptually familiar and directly embodied in the hardware, most computer languages are in the imperative style.<p>Assignment statements, in general, perform an operation on information located in memory and store the results in memory for later use. High-level imperative languages, in addition, permit the evaluation of complex expressions, which may consist of a combination of <a href="../../wp/a/Arithmetic.htm" title="Arithmetic">arithmetic</a> operations and <!--del_lnk--> function evaluations, and the assignment of the resulting value to memory. Looping statements allow a sequence of statements to be executed multiple times. Loops can either execute the statements they contain a predefined number of times, or they can execute them repeatedly until some condition changes. Conditional branching statements allow a block of statements to be executed only if some condition is met. Otherwise, the statements are skipped and the execution sequence continues from the statement following the block. Unconditional branching statements allow the execution sequence to be transferred to some other part of the program. These include the jump, called &quot;<!--del_lnk--> goto&quot; in many languages, and the subprogram, or <!--del_lnk--> procedure, call.<p><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <p>The earliest imperative languages were the machine languages of the original computers. In these languages, instructions were very simple, which made hardware implementation easier, but hindered the creation of complex programs. <!--del_lnk--> FORTRAN, developed by <!--del_lnk--> John Backus at <!--del_lnk--> IBM starting in <!--del_lnk--> 1954, was the first major programming language to remove the obstacles presented by machine code in the creation of complex programs. FORTRAN was a compiled language that allowed named variables, complex expressions, subprograms, and many other features now common in imperative languages. The next two decades saw the development of a number of other major high-level imperative programming languages. In the late <!--del_lnk--> 1950s and <!--del_lnk--> 1960s, <!--del_lnk--> ALGOL was developed in order to allow mathematical algorithms to be more easily expressed, and even served as the <!--del_lnk--> operating system&#39;s target language for some computers. <!--del_lnk--> COBOL (1960) and <!--del_lnk--> BASIC (1964) were both attempts to make programming syntax look more like English. In the <!--del_lnk--> 1970s, <!--del_lnk--> Pascal was developed by <!--del_lnk--> Niklaus Wirth, and <!--del_lnk--> C was created by <a href="../../wp/d/Dennis_Ritchie.htm" title="Dennis Ritchie">Dennis Ritchie</a> while he was working at <!--del_lnk--> Bell Laboratories. Wirth went on to design <!--del_lnk--> Modula-2, <!--del_lnk--> Modula-3, and <!--del_lnk--> Oberon. For the needs of the <!--del_lnk--> United States Department of Defense, <!--del_lnk--> Jean Ichbiah and a team at <!--del_lnk--> Honeywell began designing <!--del_lnk--> Ada in 1978, after a 4-year project to define the requirements for the language. The specification was first published in 1983, with revisions in 1995 and 2005/6.<p>The <!--del_lnk--> 1980s saw a rapid growth in interest in <!--del_lnk--> object-oriented programming. These languages were imperative in style, but added features to support <!--del_lnk--> objects. The last two decades of the <a href="../../wp/2/20th_century.htm" title="20th century">20th century</a> saw the development of a considerable number of such programming languages. <!--del_lnk--> Smalltalk-80, originally conceived by <!--del_lnk--> Alan Kay in <!--del_lnk--> 1969, was released in <!--del_lnk--> 1980 by the <!--del_lnk--> Xerox Palo Alto Research Centre. Drawing from concepts in another object-oriented language &mdash; <!--del_lnk--> Simula (which is considered to be the world&#39;s first <!--del_lnk--> object-oriented programming language, developed in the late <!--del_lnk--> 1960s) &mdash; <!--del_lnk--> Bjarne Stroustrup designed <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a>, an object-oriented language based on <!--del_lnk--> C. <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a> was first implemented in <!--del_lnk--> 1985. In the late <!--del_lnk--> 1980s and <!--del_lnk--> 1990s, the notable imperative languages drawing on object-oriented concepts were <!--del_lnk--> Perl, released by <!--del_lnk--> Larry Wall in <!--del_lnk--> 1987; <!--del_lnk--> Python, released by <!--del_lnk--> Guido van Rossum in <!--del_lnk--> 1990; <!--del_lnk--> PHP, released by <!--del_lnk--> Rasmus Lerdorf in <!--del_lnk--> 1994; and <!--del_lnk--> Java, first released by <!--del_lnk--> Sun Microsystems in <!--del_lnk--> 1994.<p><a id="Example_languages" name="Example_languages"></a><h2> <span class="mw-headline">Example languages</span></h2>
      <p>The canonical examples of imperative programming languages are <!--del_lnk--> Fortran and <!--del_lnk--> Algol. Others include <!--del_lnk--> Pascal, <!--del_lnk--> C, and <!--del_lnk--> Ada.<p><!--del_lnk--> Category:Imperative programming languages provides an exhaustive list.<div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Imperative_programming&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
