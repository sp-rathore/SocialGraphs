<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="InterBase,Cursor (databases),Transaction log,Database transaction,Table (database),View (database),Distributed database management system,ACID,Database trigger,Index (database),Stored procedure" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>InterBase</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "InterBase";
			var wgTitle = "InterBase";
			var wgArticleId = 172684;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-InterBase">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">InterBase</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computing_hardware_and_infrastructure.htm">Computing hardware and infrastructure</a></h3>
      <!-- start content -->
      <table cellspacing="5" class="infobox" style="width: 24em; font-size: 90%; text-align: left;">
       <tr>
        <td colspan="2" style="text-align: center; font-size: 130%; font-weight: bold;">InterBase</td>
       </tr>
       <tr>
        <td colspan="2" style="text-align: center">
        </td>
       </tr>
       <tr>
        <td colspan="2" style="text-align: center;"><!--del_lnk--> <img alt="" height="170" longdesc="/wiki/Image:InterBase_Performance_Monitor.png" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="250" /><br /> InterBase&#39;s performance monitor allows database administrators to view and control server use.</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Developer:</th>
        <td><!--del_lnk--> Borland Software Corporation</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Latest release:</th>
        <td>7.5.1 Service Pack 1 / <!--del_lnk--> 13 February <!--del_lnk--> 2006</td>
       </tr>
       <tr>
        <th><!--del_lnk--> OS:</th>
        <td><a href="../../wp/l/Linux.htm" title="Linux">Linux</a>, <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a> and <!--del_lnk--> Solaris</td>
       </tr>
       <tr>
        <th>Use:</th>
        <td><!--del_lnk--> Database management system</td>
       </tr>
       <tr>
        <th><!--del_lnk--> License:</th>
        <td><!--del_lnk--> Proprietary</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Website:</th>
        <td><!--del_lnk--> www.borland.com/interbase</td>
       </tr>
      </table>
      <p><b>InterBase</b> is a <!--del_lnk--> relational database management system (RDBMS) currently developed and marketed by <!--del_lnk--> Borland Software Corporation. InterBase is distinguished from other DBMSs by its small footprint, close to zero administration requirements, and multi-generational architecture. InterBase runs on the <a href="../../wp/l/Linux.htm" title="Linux">Linux</a>, <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a> and <!--del_lnk--> Solaris <!--del_lnk--> operating systems.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Technology" name="Technology"></a><h2> <span class="mw-headline">Technology</span></h2>
      <p>In many respects, InterBase is quite conventional; it is a <!--del_lnk--> SQL-92-compliant <!--del_lnk--> relational database and supports standard interfaces such as <!--del_lnk--> JDBC, <!--del_lnk--> ODBC, and <!--del_lnk--> ADO.NET. However, certain technical features distinguish InterBase from other products.<p><a id="Small_footprint" name="Small_footprint"></a><h3> <span class="mw-headline">Small footprint</span></h3>
      <p>A full InterBase 7 server installation requires around 40 <!--del_lnk--> MB on disk. This is significantly smaller than the <i>client</i> installation of many competing database servers. The server uses very little memory when idle. A minimum InterBase client install requires about 400 <!--del_lnk--> KB of disk space.<p><a id="Minimal_administration" name="Minimal_administration"></a><h3> <span class="mw-headline">Minimal administration</span></h3>
      <p>InterBase servers typically do not require full-time <!--del_lnk--> database administrators.<p><a id="Multi-generational_architecture" name="Multi-generational_architecture"></a><h3> <span class="mw-headline">Multi-generational architecture</span></h3>
      <p><a id="Concurrency_control" name="Concurrency_control"></a><h4> <span class="mw-headline">Concurrency control</span></h4>
      <p>Consider a simple banking application where two users have access to the funds in a particular account. Bob reads the account and finds there is 1000 dollars in it, so he withdraws 500. Jane reads the same account before Bob has changed it, sees 1000 dollars, and withdraws 800. Needless to say, any database system with multi-user access needs some sort of system for dealing with this problem.<p>The techniques used to solve this and other related problems are known in the database industry as <!--del_lnk--> concurrency control.<p>Traditional products used <i><!--del_lnk--> locks</i> which stated that a particular <!--del_lnk--> transaction was going to modify a record. Once the lock was placed, no one else could read or modify the data until the lock was released. The lock may block changes to a single record, a <i>page</i> (a group of records stored together on disk) of records, or every record examined by a particular transaction, depending on the <i>lock resolution.</i> Lock resolution is a tradeoff between performance and accuracy -- by blocking updates at the page level, for example, some updates will be blocked which do not in fact conflict with updates made by other transactions, but performance will be improved in comparison with record level locks.<p>Locking becomes an even bigger problem when combined with another feature common to all such systems, <!--del_lnk--> transaction isolation. This is because transactions typically involve both a read and a write -- in this example, to read the value of the account and then change it. In order to show an isolated view of the data the entire transaction, including records read but never written to, must be locked in many database servers.<p>In InterBase, readers do not block writers. Instead, each record in the database can exist in more than one version. For instance, when Bob and Jane read the accounts they would both get &quot;version 1&quot;, reading 1000 dollars. When Bob then changes the account to make his withdrawal the data is not overwritten, but instead a new &quot;version 2&quot; will be created with 500 dollars. Jane&#39;s attempt to make her 800 dollar withdrawal will notice that there is a new version 2, and her attempt to make a withdrawal will fail.<p>This approach to concurrency control is called <!--del_lnk--> multiversion concurrency control. InterBase&#39;s implementation of multiversion concurrency control is commonly called its multi-generational architecture. InterBase was the second commercial database to use this technique; the first was <!--del_lnk--> DEC&#39;s Rdb/ELN.<p>Multiversion concurrency control also makes true snapshot transaction <!--del_lnk--> isolation relatively simple to implement. A transaction with snapshot isolation in InterBase shows the state of the database precisely as it was at the instant the transaction began. This is very useful for backups of an active database, long-running batch processes, and the like.<p><a id="Rollbacks_and_recovery" name="Rollbacks_and_recovery"></a><h4> <span class="mw-headline">Rollbacks and recovery</span></h4>
      <p>InterBase also uses its multi-generational architecture to implement <!--del_lnk--> rollbacks. Most database servers use <!--del_lnk--> logs to implement the rollback feature, which can result in rollbacks taking a long time or possibly even requiring manual intervention. By contrast, InterBase&#39;s rollbacks are near-instantaneous and never fail.<p><a id="Drawbacks" name="Drawbacks"></a><h4> <span class="mw-headline">Drawbacks</span></h4>
      <p>Certain operations are more difficult to implement in a multi-generational architecture, and hence perform slowly relative to a more traditional implementation. One example is the SQL <code>COUNT</code> verb. Even when an index is available on the column or columns included in the <code>COUNT</code>, all records must be visited in order to see if they are visible under the current transaction isolation.<p><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <p><a id="Multiversion_concurrency_control_before_InterBase" name="Multiversion_concurrency_control_before_InterBase"></a><h3> <span class="mw-headline">Multiversion concurrency control before InterBase</span></h3>
      <p><!--del_lnk--> Multiversion concurrency control is described in some detail in sections 4.3 and 5.5 of the <!--del_lnk--> 1981 paper &quot;Concurrency Control in Distributed Database Systems&quot; by Philip Bernstein and Nathan Goodman -- then employed by the Computer Corporation of America. Bernstein and Goodman&#39;s paper cites a <!--del_lnk--> 1978 dissertation by D.P. Reed which quite clearly describes MVCC and claims it as an original work.<p><a id="Early_years" name="Early_years"></a><h3> <span class="mw-headline">Early years</span></h3>
      <p><!--del_lnk--> Jim Starkey was working at <!--del_lnk--> DEC on their <!--del_lnk--> Datatrieve <!--del_lnk--> network database product when he came up with an idea for a system to manage concurrent changes by many users. The idea dramatically simplified the existing problems of <i>locking</i> which were proving to be a serious problem for the new <!--del_lnk--> relational database systems being developed at the time. He started working on the system at DEC, but at the time DEC had just started a relational database effort which lead to the <!--del_lnk--> Rdb/VMS product. When they found out about his project a <!--del_lnk--> turf war broke out (although the product was released as Rdb/ELN), and Starkey eventually decided to quit.<p>Although InterBase&#39;s implementation is much more similar to the system described by Reed in his MIT dissertation than any other database that existed at the time and Starkey knew Bernstein from his previous position at the Computer Corporation of America and later at DEC, Starkey has stated that he arrived at the idea of multiversion concurrency control independently. In the same comment, Starkey says:<blockquote>
       <p>The inspiration for multi-generational concurrency control was a database system done by <!--del_lnk--> Prime that supported page level snapshots. The intention of the feature was to give a reader a <!--del_lnk--> consistent view of the database without blocking writers. The idea intrigued me as a very useful characteristic of a database system.</blockquote>
      <p>He had heard that the local <!--del_lnk--> workstation vendor <!--del_lnk--> Apollo Computer was looking for a database offering on their <a href="../../wp/u/Unix.htm" title="Unix">Unix</a> machines, and agreed to fund development. With their encouragement he formed <b>Groton Database Systems</b> (named after the town, <!--del_lnk--> Groton, Massachusetts, where they were located) on <!--del_lnk--> Labor Day 1984 and started work on what would eventually be released as <b>InterBase</b> in 1986. Apollo suffered a corporate shakeup and decided to exit the software business, but by this time the product was making money.<p><a id="The_road_to_Borland" name="The_road_to_Borland"></a><h3> <span class="mw-headline">The road to Borland</span></h3>
      <p>Between 1986 and 1991 the product was gradually sold to <!--del_lnk--> Ashton-Tate, makers of the famous <!--del_lnk--> dBASE who were at the time purchasing various database companies in order to fill out their portfolio. The company was soon in trouble, and <!--del_lnk--> Borland purchased Ashton-Tate in 1991, acquiring InterBase as part of the deal.<p><a id="Open_source" name="Open_source"></a><h3> <span class="mw-headline">Recent releases</span></h3>
      <p>At the end of 2002, Borland released InterBase version 7, featuring support for <!--del_lnk--> SMP, enhanced support for monitoring and control of the server by administrators, and <!--del_lnk--> more. Borland released InterBase 7.1 in June of 2003, 7.5 in December of <!--del_lnk--> 2004, and 7.5.1 on <!--del_lnk--> June 1, <!--del_lnk--> 2005.<p>On February 8th of 2006, Borland announced the intention to sell their line of development tool products, including InterBase, <!--del_lnk--> Delphi, <!--del_lnk--> JBuilder, and other tools. <!--del_lnk--> <p>In October of 2006, Borland announced the availability of InterBase 2007.<div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/InterBase&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
