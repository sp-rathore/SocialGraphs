<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Forth,1998,2003,2006,ANSI,APL programming language,ASCII,Acronym,Activation record,Apple Computer,Assembly language" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Forth</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Forth";
			var wgTitle = "Forth";
			var wgArticleId = 11012;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Forth">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Forth</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <table class="infobox" style="width: 23em; text-align: left;font-size: 90%">
       <caption><big><b>Forth</b></big></caption>
       <tr>
        <td colspan="2" style="text-align: center;">
         <div class="center">
          <div class="thumb tnone">
           <div style="width:227px;"><a class="internal" href="../../images/183/18376.jpg.htm" title="Charles H. Moore, the inventor of Forth"><img alt="Charles H. Moore, the inventor of Forth" height="189" longdesc="/wiki/Image:ChuckMoore.jpg" src="../../images/183/18376.jpg" width="225" /></a><div class="thumbcaption">
             <div class="magnify" style="float:right"><a class="internal" href="../../images/183/18376.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> Charles H. Moore, the inventor of Forth</div>
           </div>
          </div>
         </div>
        </td>
       </tr>
       <tr>
        <th><!--del_lnk--> Paradigm:</th>
        <td><!--del_lnk--> procedural, <!--del_lnk--> stack-oriented</td>
       </tr>
       <tr>
        <th>Appeared in:</th>
        <td>1970s</td>
       </tr>
       <tr>
        <th>Designed by:</th>
        <td><!--del_lnk--> Charles H. Moore</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Typing discipline:</th>
        <td>Typeless</td>
       </tr>
       <tr>
        <th>Major implementations:</th>
        <td><!--del_lnk--> Forth, Inc., <!--del_lnk--> gForth, <!--del_lnk--> MPE, <!--del_lnk--> Open Firmware</td>
       </tr>
       <tr>
        <th>Dialects:</th>
        <td><!--del_lnk--> colorForth, <!--del_lnk--> FCode</td>
       </tr>
       <tr>
        <th>Influenced by:</th>
        <td><!--del_lnk--> Burroughs large systems, <!--del_lnk--> Lisp, <!--del_lnk--> APL</td>
       </tr>
       <tr>
        <th>Influenced:</th>
        <td><!--del_lnk--> PostScript, <!--del_lnk--> Factor</td>
       </tr>
       <tr>
        <td>
        </td>
       </tr>
      </table>
      <p><b>Forth</b> is a <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a> and programming environment, initially developed by <!--del_lnk--> Charles H. Moore at the US <!--del_lnk--> National Radio Astronomy Observatory in the early 1970s. It was formalized in 1977 and standardized by <!--del_lnk--> ANSI in 1994. Forth is sometimes spelled in all capital letters following the customary usage during its earlier years, although the name is not an <!--del_lnk--> acronym.<p>A <!--del_lnk--> procedural, <!--del_lnk--> stack-oriented and <!--del_lnk--> reflective programming language without <!--del_lnk--> type checking, Forth features both interactive execution of commands (making it suitable as a <!--del_lnk--> shell for systems that lack a more formal <!--del_lnk--> operating system) and the ability to <!--del_lnk--> compile sequences of commands for later execution. Some Forth versions (especially early ones) compile <!--del_lnk--> threaded code, but many implementations today generate <!--del_lnk--> optimized <!--del_lnk--> machine code like other language compilers.<p>Forth is so named because &quot;[t]he file holding the interpreter was labeled FORTH, for 4th (next) generation software - but the operating system restricted file names to 5 characters.&quot; Moore&#39;s use of the phrase <i>4th (next) generation software</i> appears to predate the definition of <!--del_lnk--> fourth-generation programming languages; he saw Forth as a successor to compile-link-go <!--del_lnk--> third-generation programming languages, or software for &quot;4th generation&quot; hardware, not a 4GL as the term has come to be used.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Overview" name="Overview"></a><h2> <span class="mw-headline">Overview</span></h2>
      <p>Forth offers a standalone programming environment consisting of a <!--del_lnk--> stack-oriented, interactive, incremental <!--del_lnk--> interpreter and <!--del_lnk--> compiler. Programming in Forth is an interactive, iterative process. A Forth system consists of <i>words</i> (the term used for Forth <!--del_lnk--> subroutines); new words are defined in terms of old words, and there is no distinction made between the words that define the Forth language and those that the programmer creates. A typical Forth package consists of a pre-compiled kernel of the core words, which the programmer uses to define new words for the application. The completed application can be saved as an image, with the new words already compiled. Generally programmers extend the initial core with words that are useful to the types of applications that they write, and save this as their working foundation.<p>Forth uses separate stacks for storage of subroutine <!--del_lnk--> parameters and subroutine <!--del_lnk--> activation records. The <i>parameter</i> or <i>data stack</i> (commonly referred to as the <i>stack</i>) is used to pass data to words and to store the results the words return. The <i>linkage</i> or <i>return stack</i> (commonly referred to as the <i>rstack</i>) is used to store <!--del_lnk--> return addresses when words are nested (the equivalent of a <!--del_lnk--> subroutine call), and store local variables. There are standard words to move data between the stacks, and to load and store variables on the stack.<p>The logical structure of Forth resembles a <!--del_lnk--> virtual machine. Forth, especially early versions, implements an <i>inner interpreter</i> tracing <!--del_lnk--> indirectly threaded <!--del_lnk--> machine code, giving compact and fast high-level code that can be compiled rapidly. Many modern implementations generate optimized machine code like other language compilers.<p>Forth became very popular in the 1980s because it was well suited to the small <!--del_lnk--> microcomputers of that time, as it is compact and portable. At least one <!--del_lnk--> home computer, the British <!--del_lnk--> Jupiter ACE, had Forth in its <!--del_lnk--> ROM-resident OS. Forth is still used today in many <!--del_lnk--> embedded systems (small computerized devices) because of its <!--del_lnk--> portability, efficient memory use, short development time, and fast execution speed. It has been implemented efficiently on modern <!--del_lnk--> RISC processors, and <!--del_lnk--> processors that use Forth as machine language have been produced. Other uses of Forth include the <!--del_lnk--> Open Firmware <!--del_lnk--> boot ROMs used by <!--del_lnk--> Apple, <!--del_lnk--> IBM and <!--del_lnk--> Sun and as the <!--del_lnk--> first stage boot controller of the <!--del_lnk--> FreeBSD operating system.<p>Forth is a simple yet extensible language; its modularity and extensibility permit the writing of high-level programs such as <!--del_lnk--> CAD systems. However, extensibility also helps poor programmers to write incomprehensible code, which has given Forth a reputation as a &quot;<!--del_lnk--> write-only&quot; language. Forth has been used successfully in large, complex projects, while applications developed by competent, disciplined professionals have proven to be easily maintained on evolving hardware platforms over decades of use.<p><a id="Programmer.27s_perspective" name="Programmer.27s_perspective"></a><h2> <span class="mw-headline">Programmer&#39;s perspective</span></h2>
      <p>Forth relies heavily on explicit use of a <!--del_lnk--> data stack and <!--del_lnk--> reverse Polish notation (RPN or postfix notation), commonly used in calculators from <!--del_lnk--> Hewlett-Packard. In RPN, the operator is placed after its operands, as opposed to the more common <!--del_lnk--> infix notation where the operator is placed between its operands. Postfix notation makes the language easier to parse and extend; Forth does not use a <!--del_lnk--> BNF grammar, and does not have a monolithic compiler. Extending the compiler only requires writing a new word, instead of modifying a grammar and changing the underlying implementation.<p>Using RPN, one could get the result of the mathematical expression <code>(25 * 10 + 50)</code> this way:<pre>
25 10 * 50 + .
300 ok
</pre><p>This command line first puts the numbers 25 and 10 on the implied stack.<div class="center">
       <div class="floatnone"><span><a class="image" href="../../images/183/18377.png.htm" title=""><img alt="" height="150" longdesc="/wiki/Image:Stack1.PNG" src="../../images/183/18377.png" width="300" /></a></span></div>
      </div>
      <p>The word <code>*</code> multiplies the two numbers on the top of the stack and replaces them with their product.<div class="center">
       <div class="floatnone"><span><a class="image" href="../../images/183/18378.png.htm" title=""><img alt="" height="200" longdesc="/wiki/Image:Forthstack1_5.png" src="../../images/183/18378.png" width="300" /></a></span></div>
      </div>
      <p>Then the number 50 is placed on the stack.<div class="center">
       <div class="floatnone"><span><a class="image" href="../../images/183/18379.png.htm" title=""><img alt="" height="150" longdesc="/wiki/Image:Forthstack2.PNG" src="../../images/183/18379.png" width="300" /></a></span></div>
      </div>
      <p>The word <code>+</code> adds it to the previous product. Finally, the <code>.</code> command prints the result to the user&#39;s terminal.<div class="center">
       <div class="floatnone"><span><a class="image" href="../../images/183/18380.png.htm" title=""><img alt="" height="200" longdesc="/wiki/Image:Forthstack3.PNG" src="../../images/183/18380.png" width="300" /></a></span></div>
      </div>
      <p>Even Forth&#39;s structural features are stack-based. For example:<pre>
: FLOOR5 ( n -- n&#39; )   DUP 6 &lt; IF DROP 5 ELSE 1 - THEN ;
</pre><p>This code defines a new word (again, &#39;word&#39; is the term used for a subroutine) called <code>FLOOR5</code> using the following commands: <code>DUP</code> duplicates the number on the stack; <code>&lt;</code> compares the two numbers on the stack and replaces them with a true-or-false value; <code>IF</code> takes a true-or-false value and chooses to execute commands immediately after it or to skip to the <code>ELSE</code>; <code>DROP</code> discards the value on the stack; and <code>THEN</code> ends the conditional. The text in parentheses is a comment, advising that this word expects a number on the stack and will return a possibly changed number. The net result performs similarly to this function written in the <!--del_lnk--> C programming language:<pre>
int floor5(int v) { return v &lt; 6 ? 5 : v - 1; }
</pre><p><a id="Facilities" name="Facilities"></a><h2> <span class="mw-headline">Facilities</span></h2>
      <p><a id="Interpreter" name="Interpreter"></a><h3> <span class="mw-headline">Interpreter</span></h3>
      <p>Forth <!--del_lnk--> parsing is simple, as it has no explicit <!--del_lnk--> grammar. The interpreter reads a line of input from the user input device, which is then parsed for a word using spaces as a <!--del_lnk--> delimiter; some systems recognise additional <!--del_lnk--> whitespace characters. When the interpreter finds a word, it tries to look the word up in the <i>dictionary</i>. If the word is found, the interpreter executes the code associated with the word, and then returns to parse what is left of the input stream. If the word isn&#39;t found, the word is assumed to be a number, and an attempt is made to convert it into a number and push it on the stack; if successful, the interpreter continues parsing the input stream. Otherwise, if both the lookup and number conversion fails, the interpreter prints the word followed by an error message indicating the word is not recognised, flushes the input stream, and waits for new user input.<p><a id="Compiler" name="Compiler"></a><h3> <span class="mw-headline">Compiler</span></h3>
      <p>The definition of a new word is started with the word <code>:</code> (colon) and ends with the word <code>;</code> (semi-colon). For example<pre>
: X DUP 1+ . . ;
</pre><p>will compile the word <code>X</code>. When executed by typing <code>10 X</code> at the console this will print <code>11 10</code>.<p><a id="Assembler" name="Assembler"></a><h3> <span class="mw-headline">Assembler</span></h3>
      <p>Most Forth systems include a specialized <!--del_lnk--> assembler that produces executable words. The assembler is a special dialect of the compiler. Forth assemblers often use a reverse-polish syntax in which the parameters of an instruction precede the instruction. The usual design of a Forth assembler is to construct the instruction on the stack, then copy it into memory as the last step. Registers may be referenced by the name used by the manufacturer, numbered (0..n, as used in the actual operation code) or named for their purpose in the Forth system: e.g. &quot;S&quot; for the register used as a stack pointer.<p><a id="Operating_system.2C_files_and_multitasking" name="Operating_system.2C_files_and_multitasking"></a><h3> <span class="mw-headline">Operating system, files and multitasking</span></h3>
      <p>Classic Forth systems traditionally use no <!--del_lnk--> operating system nor <!--del_lnk--> file system. Instead of storing code in files, source-code is stored in disk blocks written to physical disk addresses. The word <code>BLOCK</code> is employed to translate the number of a 1K-sized block of disk space into the address of a buffer containing the data, which is managed automatically by the Forth system. Some implement contiguous disk files using the system&#39;s disk access, where the files are located at fixed disk block ranges. Usually these are implemented as fixed-length binary records, with an integer number of records per disk block. Quick searching is achieved by hashed access on key data.<p><!--del_lnk--> Multitasking, most commonly <!--del_lnk--> cooperative <!--del_lnk--> round-robin scheduling, is normally available (although multitasking words and support are not covered by the ANSI Forth Standard). The word <code>PAUSE</code> is used to save the current task&#39;s execution context, to locate the next task, and restore its execution context. Each task has its own stacks, private copies of some control variables and a scratch area. Swapping tasks is simple and efficient; as a result, Forth multitaskers are available even on very simple <!--del_lnk--> microcontrollers such as the <!--del_lnk--> Intel 8051, <!--del_lnk--> Atmel AVR, and <!--del_lnk--> TI MSP430.<p>By contrast, some Forth systems run under a host operating system such as <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a>, <a href="../../wp/l/Linux.htm" title="Linux">Linux</a> or a version of <a href="../../wp/u/Unix.htm" title="Unix">Unix</a> and use the host operating system&#39;s file system for source and data files; the ANSI Forth Standard describes the words used for I/O. Other non-standard facilities include a mechanism for issuing <!--del_lnk--> calls to the host OS or <!--del_lnk--> windowing systems, and many provide extensions that employ the scheduling provided by the operating system. Typically they have a larger and different set of words from the stand-alone Forth&#39;s <code>PAUSE</code> word for task creation, suspension, destruction and modification of priority.<p><a id="Self_compilation_and_cross_compilation" name="Self_compilation_and_cross_compilation"></a><h3> <span class="mw-headline">Self compilation and cross compilation</span></h3>
      <p>A full-featured Forth system with all source code will compile itself, a technique commonly called meta-compilation by Forth programmers (although the term doesn&#39;t exactly match <!--del_lnk--> meta-compilation as it is normally defined). The usual method is to redefine the handful of words that place compiled bits into memory. The compiler&#39;s words use specially-named versions of fetch and store that can be redirected to a buffer area in memory. The buffer area simulates or accesses a memory area beginning at a different address than the code buffer. Such compilers define words to access both the target computer&#39;s memory, and the host (compiling) computer&#39;s memory.<p>After the fetch and store operations are redefined for the code space, the compiler, assembler, etc. are recompiled using the new definitions of fetch and store. This effectively reuses all the code of the compiler and interpreter. Then, the Forth system&#39;s code is compiled, but this version is stored in the buffer. The buffer in memory is written to disk, and ways are provided to load it temporarily into memory for testing. When the new version appears to work, it is written over the previous version.<p>There are numerous variations of such compilers for different environments. For <!--del_lnk--> embedded systems, the code may instead be written to another computer, a technique known as <!--del_lnk--> cross compilation, over a serial port or even a single <!--del_lnk--> TTL bit, while keeping the word names and other non-executing parts of the dictionary in the original compiling computer. The minimum definitions for such a forth compiler are the words that fetch and store a byte, and the word that commands a forth word to be executed. Often the most time-consuming part of writing a remote port is constructing the initial program to implement fetch, store and execute, but many modern microprocessors have integrated debugging features (such as the <!--del_lnk--> Motorola CPU32) that eliminate this task.<p><a id="Structure_of_the_language" name="Structure_of_the_language"></a><h2> <span class="mw-headline">Structure of the language</span></h2>
      <p>The basic data structure of Forth is the &quot;dictionary&quot; which maps &quot;words&quot; to executable code or named data structures. The dictionary is laid out in memory as a <!--del_lnk--> linked list with the links proceeding from the latest (most recently) defined word to oldest, until a sentinel, usually a NULL pointer, is found.<p>A defined word generally consists of <i>head</i> and <i>body</i> with the head consisting of the <i>name field</i> (NF) and the <i>link field</i> (LF) and body consisting of the <i>code field</i> (CF) and the <i>parameter field</i> (PF).<p>Head and body of a dictionary entry are treated separately because they may not be contiguous. For example, when a Forth program is recompiled for a new platform, the head may remain on the compiling computer, while the body goes to the new platform. In some environments (such as <!--del_lnk--> embedded systems) the heads occupy memory unnecessarily. However, some cross-compilers may put heads in the target if the target itself is expected to support an interactive Forth.<p><a id="Dictionary_entry" name="Dictionary_entry"></a><h3> <span class="mw-headline">Dictionary entry</span></h3>
      <p>The exact format of a dictionary entry is not prescribed, and implementations vary. However, certain components are almost always present though the exact size and order may vary. Described as a structure, a dictionary entry might look this way:<pre>
structure
  byte:       flag           \ 3bit flags + length of word&#39;s name
  char-array: name           \ name&#39;s runtime length isn&#39;t known at compile time
  address:    previous       \ link field, backward ptr to previous word
  address:    codeword       \ ptr to the code to execute this word
  any-array:  parameterfield \ unknown length of data, words, or opcodes
end-structure forthword
</pre><p>The name field starts with a prefix giving the length of the word&#39;s name (typically up to 32 bytes), and several bits for flags. The character representation of the word&#39;s name then follows the prefix. Depending on the particular implementation of Forth, there may be one or more NUL (&#39;\0&#39;) bytes for alignment.<p>The link field contains a pointer to the previously defined word. The pointer may be a relative displacement or an absolute address that points to the next oldest sibling.<p>The code field pointer will be either the address of the word which will execute the code or data in the parameter field or the beginning of machine code that the processor will execute directly. For colon defined words, the code field pointer points to the word that will save the current Forth instruction pointer (IP) on the return stack, and load the IP with the new address from which to continue execution of words. This is the same as what a processor&#39;s call/return instructions does.<p><a id="Structure_of_the_compiler" name="Structure_of_the_compiler"></a><h3> <span class="mw-headline">Structure of the compiler</span></h3>
      <p>The compiler itself consists of Forth words visible to the system, not a monolithic program. This allows a programmer to change the compiler&#39;s words for special purposes.<p>The &quot;compile time&quot; flag in the name field is set for words with &quot;compile time&quot; behaviour. Most simple words execute the same code whether they are typed on a command line, or embedded in code. When compiling these, the compiler simply places code or a threaded pointer to the word.<p>Compile-time words are actually executed by the compiler. The classic examples of compile-time words are the <!--del_lnk--> control structures such as <code>IF</code> and <code>WHILE</code>. All of Forth&#39;s control structures, and almost all of its compiler are implemented as compile-time words.<p><a id="Compilation_state_and_interpretation_state" name="Compilation_state_and_interpretation_state"></a><h4> <span class="mw-headline">Compilation state and interpretation state</span></h4>
      <p>The word <code>:</code> (colon) takes a name as a parameter, creates a dictionary entry (a <i>colon definition</i>) and enters compilation state. The interpreter continues to read space-delimited words from the user input device. If a word is found, the interpreter executes the <i>compilation semantics</i> associated with the word, instead of the <i>interpretation semantics</i>. The default compilation semantics of a word are to append its interpretation semantics to the current definition.<p>The word <code>;</code> (semi-colon) finishes the current definition and returns to interpretation state. It is an example of a word whose compilation semantics differ from the default. The interpretation semantics of <code>;</code> (semi-colon) and several other words are undefined in ANS Forth.<p>The interpreter state can be changed manually with the words <code>[</code> (left-bracket) and <code>]</code> (right-bracket) which enter interpretation state or compilation state, respectively. These words can be used with the word <code>LITERAL</code> to calculate a value during a compilation and to insert the calculated value into the current colon definition. <code>LITERAL</code> has the compilation semantics to take an object from the data stack and to append semantics to the current colon definition to place that object on the data stack.<p>In ANS Forth, the current state of the interpreter can be read from the <!--del_lnk--> flag <code>STATE</code> which contains the value true when in compilation state and false otherwise. This allows the implementation of so-called <i>state-smart words</i> with behaviour that changes according to the current state of the interpreter.<h4> <span class="mw-headline">Unnamed words and execution tokens</span></h4>
      <p>In ANS Forth, unnamed words can be defined with the word <code>:NONAME</code> which compiles the following words up to the next <code>;</code> (semi-colon) and leaves an <i>execution token</i> on the data stack. The execution token provides an opaque handle for the compiled semantics, similar to the <!--del_lnk--> function pointers of the <!--del_lnk--> C programming language.<p>Execution tokens can be stored in variables. The word <code>EXECUTE</code> takes an execution token from the data stack and performs the associated semantics. The word <code>COMPILE,</code> (compile-comma) takes an execution token from the data stack and appends the associated semantics to the current definition.<p>The word <code>&#39;</code> (tick) takes the name of a word as a parameter and returns the execution token associated with that word on the data stack. In interpretation state, <code>&#39; RANDOM-WORD EXECUTE</code> is equivalent to <code>RANDOM-WORD</code>.<p><a id="Parsing_words_and_comments" name="Parsing_words_and_comments"></a><h4> <span class="mw-headline">Parsing words and comments</span></h4>
      <p>The words <code>:</code> (colon), <code>POSTPONE</code>, <code>&#39;</code> (tick) and <code>:NONAME</code> are examples of <i>parsing words</i> that take their arguments from the user input device instead of the data stack. Another example is the word <code>(</code> (paren) which reads and ignores the following words up to and including the next right parenthesis and is used to place comments in a colon definition. Similarly, the word <code>\</code> (backslash) is used for comments that continue to the end of the current line. To be parsed correctly, <code>(</code> (paren) and <code>\</code> (backslash) must be separated by whitespace from the following comment text.<p><a id="Structure_of_code" name="Structure_of_code"></a><h3> <span class="mw-headline">Structure of code</span></h3>
      <p>In most Forth systems, the body of a code definition consists of either <!--del_lnk--> machine language, or some form of <!--del_lnk--> threaded code. Traditionally, indirect-threaded code was used, but direct-threaded and subroutine threaded Forths have also been popular. The fastest modern Forths use subroutine threading, insert simple words as macros, and perform <!--del_lnk--> peephole optimization or other optimizing strategies to make the code smaller and faster.<p><a id="Data_objects" name="Data_objects"></a><h3> <span class="mw-headline">Data objects</span></h3>
      <p>When a word is a variable or other data object, the CF points to the runtime code associated with the defining word that created it. A defining word has a characteristic &quot;defining behavior&quot; (creating a dictionary entry plus possibly allocating and initializing data space) and also specifies the behaviour of an instance of the class of words constructed by this defining word. Examples include:<dl>
       <dt><code>VARIABLE</code><dd>Names an uninitialized, one-cell memory location. Instance behaviour of a <code>VARIABLE</code> returns its address on the stack.<dt><code>CONSTANT</code><dd>Names a value (specified as an argument to <code>CONSTANT</code>). Instance behaviour returns the value.<dt><code>CREATE</code><dd>Names a location; space may be allocated at this location, or it can be set to contain a string or other initialized value. Instance behaviour returns the address of the beginning of this space.</dl>
      <p>Forth also provides a facility by which a programmer can define new application-specific defining words, specifying both a custom defining behavior and instance behaviour. Some examples include circular buffers, named bits on an I/O port, and automatically-indexed arrays.<p>Data objects defined by these and similar words are global in scope. The function provided by local variables in other languages is provided by the data stack in Forth. Forth programming style uses very few named data objects compared with other languages; typically such data objects are used to contain data which is used by a number of words or tasks (in a multitasked implementation).<p>Forth does not enforce consistency of data type usage; it is the programmer&#39;s responsibility to use appropriate operators to fetch and store values or perform other operations on data.<p><a id="Programming" name="Programming"></a><h2> <span class="mw-headline">Programming</span></h2>
      <p>Words written in Forth are compiled into an executable form. The classical &quot;indirect threaded&quot; implementations compile lists of addresses of words to be executed in turn; many modern systems generate actual machine code (including calls to some external words and code for others expanded in place). Some systems have optimizing compilers. Generally speaking, a Forth program is saved as the memory image of the compiled program with a single command (e.g., RUN) that is executed when the compiled version is loaded.<p>During development, the programmer uses the interpreter to execute and test each little piece as it is developed. Most Forth programmers therefore advocate a loose top-down design, and bottom-up development with continuous testing and integration.<p>The top-down design is usually separation of the program into &quot;vocabularies&quot; that are then used as high-level sets of tools to write the final program. A well-designed Forth program reads like natural language, and implements not just a single solution, but also sets of tools to attack related problems.<p>The tool-box approach is one of the reasons that Forth is so difficult to master. While learning the syntax is easy, mastering the tools delivered with a professional Forth system can take several months, working full-time. The task is actually more difficult than rewriting one&#39;s own Forth system from scratch. Unfortunately, a rewrite also loses the experience accumulated in a typical professional Forth toolbox.<p><a id="Code_examples" name="Code_examples"></a><h2> <span class="mw-headline">Code examples</span></h2>
      <p><a id="Hello_world" name="Hello_world"></a><h3> <span class="mw-headline">Hello world</span></h3>
      <p>One possible implementation:<pre>
: HELLO  ( -- )  CR .&quot; Hello, world!&quot; ;
HELLO
</pre><p>The word <code>CR</code> causes the following output to be displayed on a new line. The parsing word <code>.&quot;</code> (dot-quote) reads a double-quote delimited string and appends code to the current definition so that the parsed string will be displayed on execution. The space character separating the word <code>.&quot;</code> from the string <code>Hello, world!</code> is not included as part of the string. It is needed so that the parser recognizes <code>.&quot;</code> as a Forth word.<p>A standard Forth system is also an interpreter, and the same output can be obtained by typing the following code fragment into the Forth console:<pre>
CR .( Hello, world!)
</pre><p><code>.(</code> (dot-paren) is an immediate word that parses a parenthesis-delimited string and displays it. As with the word <code>.&quot;</code> the space character separating <code>.(</code> from <code>Hello, world!</code> is not part of the string.<p>The word <code>CR</code> comes before the text to print. By convention, the Forth interpreter does not start output on a new line. Also by convention, the interpreter waits for input at the end of the previous line, after an <code>ok</code> prompt. There is no implied &#39;flush-buffer&#39; action in Forth&#39;s <code>CR</code>, as sometimes is in other programming languages.<p><a id="Mixing_compilation_state_and_interpretation_state" name="Mixing_compilation_state_and_interpretation_state"></a><h3> <span class="mw-headline">Mixing compilation state and interpretation state</span></h3>
      <p>Here is the definition of a word <code>EMIT-Q</code> which when executed emits the single character <code>Q</code>:<pre>
: EMIT-Q   81 ( the ASCII value for the character &#39;Q&#39; ) EMIT ;
</pre><p>This definition was written to use the <a href="../../wp/a/ASCII.htm" title="ASCII">ASCII</a> value of the <code>Q</code> character (81) directly. The text between the parentheses is a comment and is ignored by the compiler. The word <code>EMIT</code> takes a value from the data stack and displays the corresponding character.<p>The following redefinition of <code>EMIT-Q</code> uses the words <code>[</code> (left-bracket), <code>]</code> (right-bracket), <code>CHAR</code> and <code>LITERAL</code> to temporarily switch to interpreter state, calculate the ASCII value of the <code>Q</code> character, return to compilation state and append the calculated value to the current colon definition:<pre>
: EMIT-Q   [ CHAR Q ]  LITERAL  EMIT ;
</pre><p>The parsing word <code>CHAR</code> takes a space-delimited word as parameter and places the value of its first character on the data stack. The word <code>[CHAR]</code> is an immediate version of <code>CHAR</code>. Using <code>[CHAR]</code>, the example definition for <code>EMIT-Q</code> could be rewritten like this:<pre>
: EMIT-Q   [CHAR] Q  EMIT ; \ Emit the single character &#39;Q&#39;
</pre><p>This definition used <code>\</code> (backslash) for the describing comment.<p>Both <code>CHAR</code> and <code>[CHAR]</code> are predefined in ANS Forth. Using <code>IMMEDIATE</code> and <code>POSTPONE</code>, <code>[CHAR]</code> could have been defined like this:<pre>
: [CHAR]   CHAR  POSTPONE LITERAL ; IMMEDIATE
</pre><p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Forth&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
