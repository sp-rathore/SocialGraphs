<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Programming language,19th century,2006,4GL,APL,Abstraction (computer science),Ada programming language,Alan Perlis,Alan Turing,Algol 60,Algorithm" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Programming language</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";
                        
			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Programming_language";
			var wgTitle = "Programming language";
			var wgArticleId = 23015;
			var wgIsArticle = true;
                        
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Programming_language">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Programming language</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <p>A <b>programming language</b> is an <!--del_lnk--> artificial language that can be used to <!--del_lnk--> control the behaviour of a machine, particularly a <a href="../../wp/c/Computer.htm" title="Computer">computer</a>. Programming languages, like <!--del_lnk--> human languages, are defined through the use of <!--del_lnk--> syntactic and <!--del_lnk--> semantic rules, to determine structure and meaning respectively.<p>Programming languages are used to facilitate communication about the task of organizing and manipulating information, and to express <a href="../../wp/a/Algorithm.htm" title="Algorithm">algorithms</a> precisely. Some authors restrict the term &quot;programming language&quot; to those languages that can express <i>all</i> possible algorithms; sometimes the term &quot;<!--del_lnk--> computer language&quot; is used for more limited artificial languages.<p><!--del_lnk--> Thousands of different programming languages have been created, and new ones are created every year.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="Definitions" name="Definitions"></a><h2> <span class="mw-headline">Definitions</span></h2>
      <p>Authors disagree on the precise definition, but traits often considered important requirements and objectives of the language to be characterized as a <i>programming language</i>:<ul>
       <li><i>Function:</i> A programming language is a language used to write <!--del_lnk--> computer programs, which instruct a <a href="../../wp/c/Computer.htm" title="Computer">computer</a> to perform some kind of <!--del_lnk--> computation, and/or organize the flow of control between external devices (such as a <!--del_lnk--> printer, a robot, or any <!--del_lnk--> peripheral).</ul>
      <ul>
       <li><i>Target:</i> Programming languages differ from <!--del_lnk--> natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines. In some cases, programming languages are used by one program or machine to program another; <!--del_lnk--> PostScript source code, for example, is frequently generated programmatically to control a <!--del_lnk--> computer printer or display.<li><i>Constructs:</i> Programming languages may contain constructs for defining and manipulating <!--del_lnk--> data structures or for controlling the <!--del_lnk--> flow of execution.<li><i>Expressive power:</i> The <!--del_lnk--> theory of computation classifies languages by the computations they can express (see <!--del_lnk--> Chomsky hierarchy). All <!--del_lnk--> Turing complete languages can implement the same set of <a href="../../wp/a/Algorithm.htm" title="Algorithm">algorithms</a>. <!--del_lnk--> ANSI/ISO SQL and <!--del_lnk--> Charity are examples of languages that are not Turing complete yet often called programming languages.</ul>
      <p>Non-computational languages, such as <a href="../../wp/m/Markup_language.htm" title="Markup language">markup languages</a> like <!--del_lnk--> HTML or <!--del_lnk--> formal grammars like <!--del_lnk--> BNF, are usually not considered programming languages. It is a usual approach to embed a programming language into the non-computational (host) language, to express <!--del_lnk--> templates for the host language.<p><a id="Purpose" name="Purpose"></a><h2> <span class="mw-headline">Purpose</span></h2>
      <p>A prominent purpose of programming languages is to provide instructions to a computer. As such, programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, computers do exactly what they are told to do, and cannot understand the code the programmer &quot;intended&quot; to write. The combination of the language definition, the <!--del_lnk--> program, and the program&#39;s inputs must fully specify the external behaviour that occurs when the program is executed.<p>Many languages have been designed from scratch, altered to meet new needs, combined with other languages, and eventually fallen into disuse. Although there have been attempts to design one &quot;universal&quot; computer language that serves all purposes, all of them have failed to be accepted in this role. The need for diverse computer languages arises from the diversity of contexts in which languages are used:<ul>
       <li>Programs range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers.<li>Programmers range in expertise from novices who need simplicity above all else, to experts who may be comfortable with considerable complexity.<li>Programs must balance speed, size, and simplicity on systems ranging from <!--del_lnk--> microcontrollers to <!--del_lnk--> supercomputers.<li>Programs may be written once and not change for generations, or they may undergo nearly constant modification.<li>Finally, programmers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language.</ul>
      <p>One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of <!--del_lnk--> abstraction. The earliest programming languages were tied very closely to the underlying hardware of the computer. As new programming languages have developed, features have been added that let programmers express ideas that are more removed from simple translation into underlying hardware instructions. Because programmers are less tied to the needs of the computer, their programs can do more computing with less effort from the programmer. This lets them write more programs in the same amount of time. <p><!--del_lnk--> Natural language processors have been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. <!--del_lnk--> Edsger Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed natural language programming as &quot;foolish.&quot; <!--del_lnk--> Alan Perlis was similarly dismissive of the idea.<p><a id="Elements" name="Elements"></a><h2> <span class="mw-headline">Elements</span></h2>
      <p><a id="Syntax" name="Syntax"></a><h3> <span class="mw-headline">Syntax</span></h3>
      <div class="thumb tright">
       <div style="width:398px;"><a class="internal" href="../../images/210/21083.png.htm" title="Parse tree of Python code with inset tokenization"><img alt="Parse tree of Python code with inset tokenization" height="303" longdesc="/wiki/Image:Python_add5_parse.png" src="../../images/210/21083.png" width="396" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/210/21083.png.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Parse tree of Python code with inset tokenization</div>
       </div>
      </div>
      <div class="thumb tright">
       <div style="width:294px;"><a class="internal" href="../../images/210/21084.png.htm" title="Syntax highlighting is often used to aid programmers in the recognition of elements of source code. The language you see here is Python"><img alt="Syntax highlighting is often used to aid programmers in the recognition of elements of source code. The language you see here is Python" height="223" longdesc="/wiki/Image:Python_add5_syntax.png" src="../../images/210/21084.png" width="292" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/210/21084.png.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Syntax highlighting is often used to aid programmers in the recognition of elements of source code. The language you see here is <a href="../../wp/p/Python_%2528programming_language%2529.htm" title="Python (programming language)">Python</a></div>
       </div>
      </div>
      <p>A programming language&#39;s surface form is known as its <!--del_lnk--> syntax. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, there are some programming languages which are more <!--del_lnk--> graphical in nature, using spatial relationships between symbols to specify a program.<p>The syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics. Since most languages are textual, this article discusses textual syntax.<p>Programming language syntax is usually defined using a combination of <!--del_lnk--> regular expressions (for <!--del_lnk--> lexical structure) and <!--del_lnk--> Backus-Naur Form (for <!--del_lnk--> grammatical structure). Below is a simple grammar, based on <!--del_lnk--> Lisp:<p><code>expression&nbsp;::= atom | list<br /> atom &nbsp;::= number | symbol<br /> number &nbsp;::= [+-]?[&#39;0&#39;-&#39;9&#39;]+<br /> symbol &nbsp;::= [&#39;A&#39;-&#39;Z&#39;&#39;a&#39;-&#39;z&#39;].*<br /> list &nbsp;::= &#39;(&#39; expression* &#39;)&#39;<br /></code><p>This grammar specifies the following:<ul>
       <li>an <i>expression</i> is either an <i>atom</i> or a <i>list</i>;<li>an <i>atom</i> is either a <i>number</i> or a <i>symbol</i>;<li>a <i>number</i> is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;<li>a <i>symbol</i> is a letter followed by zero or more of any characters (excluding whitespace); and<li>a <i>list</i> is a matched pair of parentheses, with zero or more <i>expressions</i> inside it.</ul>
      <p>The following are examples of well-formed token sequences in this grammar: &#39;<code>12345</code>&#39;, &#39;<code>()</code>&#39;, &#39;<code>(a b c232 (1))</code>&#39;<p>Not all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language&#39;s rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit <!--del_lnk--> undefined behaviour. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.<p>Using <!--del_lnk--> natural language as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:<ul>
       <li>&quot;<!--del_lnk--> Colorless green ideas sleep furiously.&quot; is grammatically well-formed but has no generally accepted meaning.<li>&quot;John is a married bachelor.&quot; is grammatically well-formed but expresses a meaning that cannot be true.</ul>
      <p>The following C language fragment is syntactically correct, but performs an operation that is not semantically defined (because <tt>p</tt> is a <!--del_lnk--> null pointer, the operations <tt>p-&gt;real</tt> and <tt>p-&gt;im</tt> have no meaning):<pre>
complex *p = NULL;
complex abs_p = sqrt (p-&gt;real * p-&gt;real + p-&gt;im * p-&gt;im);
</pre><p><a id="Type_system" name="Type_system"></a><h3> <span class="mw-headline">Type system</span></h3>
      <p>A type system defines how a programming language classifies values and expressions into <i>types</i>, how it can manipulate those types and how they interact. This generally includes a description of the <!--del_lnk--> data structures that can be constructed in the language. The design and study of type systems using formal mathematics is known as <i><!--del_lnk--> type theory</i>.<p>Internally, all <!--del_lnk--> data in modern digital computers are stored simply as zeros or ones (<!--del_lnk--> binary). The data typically represent information in the real world such as names, bank accounts and measurements, so the low-level binary data are organized by programming languages into these high-level concepts as <!--del_lnk--> data types. There are also more abstract types whose purpose is just to warn the programmer about semantically meaningless statements or verify safety properties of programs.<p>Languages can be classified with respect to their type systems.<p><a id="Typed_vs_untyped_languages" name="Typed_vs_untyped_languages"></a><h4> <span class="mw-headline">Typed vs untyped languages</span></h4>
      <p>A language is <i>typed</i> if operations defined for one data type cannot be performed on values of another data type. For example, &quot;<code>this text between the quotes</code>&quot; is a string. In most programming languages, dividing a number by a string has no meaning. Most modern programming languages will therefore reject any program attempting to perform such an operation. In some languages, the meaningless operation will be detected when the program is compiled (&quot;static&quot; type checking), and rejected by the compiler, while in others, it will be detected when the program is run (&quot;dynamic&quot; type checking), resulting in a runtime <!--del_lnk--> exception.<p>By opposition, an <i>untyped language</i>, such as most <!--del_lnk--> assembly languages, allows any operation to be performed on any data type. High-level languages which are untyped include <!--del_lnk--> BCPL and some varieties of <!--del_lnk--> Forth.<p>In practice, while few languages are considered typed from the point of view of <!--del_lnk--> type theory (verifying or rejecting <i>all</i> operations), most modern languages offer a degree of typing. Many production languages provide means to bypass or subvert the type system.<p><a id="Static_vs_dynamic_typing" name="Static_vs_dynamic_typing"></a><h4> <span class="mw-headline">Static vs dynamic typing</span></h4>
      <p>In <i><!--del_lnk--> static typing</i> all expressions have their types determined prior to the program being run (typically at compile-time). For example, 1 and (2+2) are integer expressions; they cannot be passed to a function that expects a string, or stored in a variable that is defined to hold dates.<p>Statically-typed languages can be <i>manifestly typed</i> or <i><!--del_lnk--> type-inferred</i>. In the first case, the programmer must explicitly write types at certain textual positions (for example, at variable <!--del_lnk--> declarations). In the second case, the compiler <i>infers</i> the types of expressions and declarations based on context. Most mainstream statically-typed languages, such as <!--del_lnk--> C++ and <!--del_lnk--> Java, are manifestly typed. Complete type inference has traditionally been associated with less mainstream languages, such as <!--del_lnk--> Haskell and <!--del_lnk--> ML. However, many manifestly typed languages support partial type inference; for example, <!--del_lnk--> Java and <!--del_lnk--> C# both infer types in certain limited cases.<p><i>Dynamic typing</i>, also called <i>latent typing</i>, determines the type-safety of operations at runtime; in other words, types are associated with <i>runtime values</i> rather than <i>textual expressions</i>. As with type-inferred languages, dynamically typed languages do not require the programmer to write explicit type annotations on expressions. Among other things, this may permit a single variable to refer to values of different types at different points in the program execution. However, type errors cannot be automatically detected until a piece of code is actually executed, making debugging more difficult. <!--del_lnk--> Lisp, <!--del_lnk--> JavaScript, and <!--del_lnk--> Python are dynamically typed.<p><a id="Weak_and_strong" name="Weak_and_strong"></a><h4> <span class="mw-headline">Weak and strong</span></h4>
      <p><i>Weak typing</i> allows a value of one type to be treated as another, for example treating a string as a number. This can occasionally be useful, but it can also cause bugs; such languages are often termed <i>unsafe</i>. <!--del_lnk--> C, <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a>, and most <!--del_lnk--> assembly languages are often described as weakly typed.<p><i>Strong typing</i> prevents the above. Attempting to mix types raises an error. Strongly-typed languages are often termed <i>type-safe</i> or <i><!--del_lnk--> safe</i>, but they do not make bugs impossible. <!--del_lnk--> Ada, <!--del_lnk--> Python, and <!--del_lnk--> ML are strongly typed.<p>An alternate definition for &quot;weakly typed&quot; refers to languages, such as <a href="../../wp/p/Perl.htm" title="Perl">Perl</a>, <!--del_lnk--> Javascript, and <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a> which permit a large number of implicit type conversions; Perl in particular can be characterized as a dynamically typed programming language in which type checking can take place at runtime. See <!--del_lnk--> type system. This capability is often useful, but occasionally dangerous; as it would permit operations whose objects can change type on demand.<p><i>Strong</i> and <i>static</i> are generally considered orthogonal concepts, but usage in the literature differs. Some use the term <i>strongly typed</i> to mean <i>strongly, statically typed</i>, or, even more confusingly, to mean simply <i>statically typed</i>. Thus <!--del_lnk--> C has been called both strongly typed and weakly, statically typed..<p><a id="Execution_semantics" name="Execution_semantics"></a><h3> <span class="mw-headline">Execution semantics</span></h3>
      <p>Once data has been specified, the machine must be instructed to perform operations on the data. The <i>execution semantics</i> of a language defines how and when the various constructs of a language should produce a program behaviour.<p>For example, the semantics may define the <!--del_lnk--> strategy by which expressions are evaluated to values, or the manner in which <!--del_lnk--> control structures conditionally execute statements.<p><a id="Core_library" name="Core_library"></a><h3> <span class="mw-headline">Core library</span></h3>
      <p>Most programming languages have an associated <!--del_lnk--> core library (sometimes known as the &#39;Standard library&#39;, especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.<p>A language&#39;s core library is often treated as part of the language by its users, although the designers may have treated it as a separate entity. Many language specifications define a core that must be made available in all implementations, and in the case of standardized languages this core library may be required. The line between a language and its core library therefore differs from language to language. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in <!--del_lnk--> Java, a string literal is defined as an instance of the <tt>java.lang.String</tt> class; similarly, in <!--del_lnk--> Smalltalk, an <!--del_lnk--> anonymous function expression (a &quot;block&quot;) constructs an instance of the library&#39;s <tt>BlockContext</tt> class. Conversely, <a href="../../wp/s/Scheme_programming_language.htm" title="Scheme programming language">Scheme</a> contains multiple coherent subsets that suffice to construct the rest of the language as library macros, and so the language designers do not even bother to say which portions of the language must be implemented as language constructs, and which must be implemented as parts of a library.<p><a id="Practice" name="Practice"></a><h2> <span class="mw-headline">Practice</span></h2>
      <p>A language&#39;s designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language <i>specification</i> and <i>implementation</i>.<p><a id="Specification" name="Specification"></a><h3> <span class="mw-headline">Specification</span></h3>
      <p>The <b>specification</b> of a programming language is intended to provide a definition that language <!--del_lnk--> users and <!--del_lnk--> implementors can use to interpret the behaviour of <!--del_lnk--> programs when reading their <!--del_lnk--> source code.<p>A programming language specification can take several forms, including the following:<ul>
       <li>An explicit definition of the syntax and semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in <!--del_lnk--> natural language (e.g., the <!--del_lnk--> C language), or a <!--del_lnk--> formal semantics (e.g., the <!--del_lnk--> Standard ML and <a href="../../wp/s/Scheme_programming_language.htm" title="Scheme programming language">Scheme</a> specifications).<li>A description of the behaviour of a <!--del_lnk--> translator for the language (e.g., the <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a> and <!--del_lnk--> Fortran). The syntax and semantics of the language has to be inferred from this description, which may be written in natural or a formal language.<li>A <i>model</i> implementation, sometimes written in the language being specified (e.g., <!--del_lnk--> Prolog). The syntax and semantics of the language are explicit in the behaviour of the model implementation.</ul>
      <p><a id="Implementation" name="Implementation"></a><h3> <span class="mw-headline">Implementation</span></h3>
      <p>An <b>implementation</b> of a programming language provides a way to execute that program on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: <i><!--del_lnk--> compilation</i> and <i><!--del_lnk--> interpretation</i>. It is generally possible to implement a language using both techniques.<p>The output of a <!--del_lnk--> compiler may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting. For instance, some implementations of the <!--del_lnk--> BASIC programming language compile and then execute the source a line at a time.<p>Programs that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software.<p>One technique for improving the performance of interpreted programs is <!--del_lnk--> just-in-time compilation. Here the <!--del_lnk--> virtual machine monitors which sequences of <!--del_lnk--> bytecode are frequently executed and translates them to machine code for direct execution on the hardware.<p><a id="History" name="History"></a><h2> <span class="mw-headline">History</span></h2>
      <div class="thumb tright">
       <div style="width:232px;"><a class="internal" href="../../images/210/21085.jpg.htm" title="A selection of textbooks that teach programming, in languages both popular and obscure.  These are only a few of the thousands of programming languages and dialects that have been designed in history."><img alt="A selection of textbooks that teach programming, in languages both popular and obscure.  These are only a few of the thousands of programming languages and dialects that have been designed in history." height="157" longdesc="/wiki/Image:Programming_language_textbooks.jpg" src="../../images/210/21085.jpg" width="230" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/210/21085.jpg.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div> A selection of textbooks that teach programming, in languages both popular and obscure. These are only a few of the thousands of programming languages and dialects that have been designed in history.</div>
       </div>
      </div>
      <p><a id="Early_developments" name="Early_developments"></a><h3> <span class="mw-headline">Early developments</span></h3>
      <p>The first programming languages predate the modern computer. The <a href="../../wp/1/19th_century.htm" title="19th century">19th century</a> had &quot;programmable&quot; <!--del_lnk--> looms and <!--del_lnk--> player piano scrolls which implemented, what are today recognized as examples of, <!--del_lnk--> domain-specific programming languages. By the beginning of the twentieth century, punch cards encoded data and directed mechanical processing. In the 1930s and 1940s, the formalisms of <!--del_lnk--> Alonzo Church&#39;s <!--del_lnk--> lambda calculus and <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>&#39;s <!--del_lnk--> Turing machines provided mathematical abstractions for expressing <a href="../../wp/a/Algorithm.htm" title="Algorithm">algorithms</a>; the lambda calculus remains influential in language design.<p>In the 1940s, the first electrically powered digital computers were created. The computers of the early 1950s, notably the <!--del_lnk--> UNIVAC I and the <!--del_lnk--> IBM 701 used <!--del_lnk--> machine language programs. <!--del_lnk--> First generation machine language programming was quickly superceded by a <!--del_lnk--> second generation of programming languages known as <!--del_lnk--> Assembly languages. Later in the 1950s, assembly language programming, which had evolved to include the use of <!--del_lnk--> macro instructions, was followed by the development of three modern programming languages: <!--del_lnk--> FORTRAN, <!--del_lnk--> LISP, and <!--del_lnk--> COBOL. Updated versions of all of these are still in general use, and importantly, each has strongly influenced the development of later languages. At the end of the 1950s, the language formalized as <!--del_lnk--> Algol 60 was introduced, and most modern programming languages are, in many respects, descendants of Algol. The format and use of the early programming languages was heavily influenced by the <!--del_lnk--> constraints of the interface. <p><a id="Refinement" name="Refinement"></a><h3> <span class="mw-headline">Refinement</span></h3>
      <p>The period from the 1960s to the late 1970s brought the development of the major language paradigms now in use, though many aspects were refinements of ideas in the very first <!--del_lnk--> Third-generation programming languages:<ul>
       <li><!--del_lnk--> APL introduced <i><!--del_lnk--> array programming</i>, and influenced <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a>.<li>In the 1960s, <!--del_lnk--> Simula was the first language designed to support <i><!--del_lnk--> object-oriented programming</i>; in the mid-1970s, <!--del_lnk--> Smalltalk followed with the first &quot;purely&quot; object-oriented language.<li><!--del_lnk--> C was developed between 1969 and 1973 as a <i><!--del_lnk--> systems programming</i> language, and remains popular.<li><!--del_lnk--> Prolog, designed in 1972, was the first <i><!--del_lnk--> logic programming</i> language.<li>In 1978, <!--del_lnk--> ML built a polymorphic type system on top of Lisp, pioneering <i><!--del_lnk--> statically typed <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a></i> languages.</ul>
      <p>Each of these languages spawned an entire family of descendants, and most modern languages count at least one of them in their ancestry.<p>The 1960s and 1970s also saw considerable debate over the merits of <i><!--del_lnk--> structured programming</i>, and whether programming languages should be designed to support it. <!--del_lnk--> Edsger Dijkstra, in a famous 1968 letter published in the <!--del_lnk--> Communications of the ACM, argued that <!--del_lnk--> GOTO statements should be eliminated from all &quot;higher level&quot; programming languages. <p>The 1960s and 1970s also saw expansion of techniques that reduced the footprint of a program as well as improved productivity of the programmer and user. The <!--del_lnk--> card deck for an early <!--del_lnk--> 4GL was a lot smaller for the same functionality expressed in a <!--del_lnk--> 3GL deck.<p><a id="Consolidation_and_growth" name="Consolidation_and_growth"></a><h3> <span class="mw-headline">Consolidation and growth</span></h3>
      <p>The 1980s were years of relative consolidation. <!--del_lnk--> C++ combined object-oriented and systems programming. The United States government standardized <!--del_lnk--> Ada, a systems programming language intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called <!--del_lnk--> &quot;fifth generation&quot; languages that incorporated logic programming constructs. The functional languages community moved to standardize ML and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decade.<p>One important trend in language design during the 1980s was an increased focus on programming for large-scale systems through the use of <i>modules</i>, or large-scale organizational units of code. <!--del_lnk--> Modula-2, Ada, and ML all developed notable module systems in the 1980s. Module systems were often wedded to <!--del_lnk--> generic programming constructs.<p>The rapid growth of the <a href="../../wp/i/Internet.htm" title="Internet">Internet</a> in the mid-1990&#39;s created opportunities for new languages. <a href="../../wp/p/Perl.htm" title="Perl">Perl</a>, originally a Unix scripting tool first released in 1987, became common in dynamic <!--del_lnk--> Web sites. <!--del_lnk--> Java came to be used for server-side programming. These developments were not fundamentally novel, rather they were refinements to existing languages and paradigms, and largely based on the C family of programming languages.<p>Programming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity (<!--del_lnk--> mixins, <!--del_lnk--> delegates, <!--del_lnk--> aspects), and database integration. <p>The <!--del_lnk--> 4GLs are examples of languages which are domain-specific, such as <!--del_lnk--> SQL, which manipulates and returns <a href="../../wp/s/Set.htm" title="Set">sets</a> of data rather than the scalar values which are canonical to most programming languages. <a href="../../wp/p/Perl.htm" title="Perl">Perl</a>, for example, with its &#39;<!--del_lnk--> here document&#39; can hold multiple 4GL programs, as well as multiple JavaScript programs, in part of its own perl code and use variable interpolation in the &#39;here document&#39; to support multi-language programming.<p><a id="Taxonomies" name="Taxonomies"></a><h2> <span class="mw-headline">Taxonomies</span></h2>
      <p>There is no overarching classification scheme for programming languages. A given programming language does not usually have a single ancestor language. Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time. Ideas that originate in one language will diffuse throughout a family of related languages, and then leap suddenly across familial gaps to appear in an entirely different family.<p>The task is further complicated by the fact that languages can be classified along multiple axes. For example, Java is both an object-oriented language (because it encourages object-oriented organization) and a concurrent language (because it contains built-in constructs for running multiple <!--del_lnk--> threads in parallel). <!--del_lnk--> Python is an object-oriented <!--del_lnk--> scripting language.<p>In broad strokes, programming languages divide into <i><!--del_lnk--> programming paradigms</i> and a classification by <i>intended domain of use</i>. Paradigms include <!--del_lnk--> procedural programming, <!--del_lnk--> object-oriented programming, <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a>, and <!--del_lnk--> logic programming; some languages are hybrids of paradigms or multi-paradigmatic. An <!--del_lnk--> assembly language is not so much a paradigm as a direct model of an underlying machine architecture. By purpose, programming languages might be considered general purpose, system programming languages, scripting languages, domain-specific languages, or concurrent/distributed languages (or a combination of these). Some general purpose languages were designed largely with educational goals. <p>A programming language can be classified by its position in the <!--del_lnk--> Chomsky hierarchy. For example, the <!--del_lnk--> Thue programming language can recognize or define Type-0 languages in the Chomsky hierarchy. Most programming languages are Type-2 languages and obey <!--del_lnk--> context-free grammars.<p><a id="See_also" name="See_also"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Programming_language&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
