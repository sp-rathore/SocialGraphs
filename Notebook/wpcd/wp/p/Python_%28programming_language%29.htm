<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="noindex,nofollow" name="robots" />
  <meta content="Python (programming language),.NET framework,.NET platform,2005,2006,2007,2207,ABC programming language,ALGOL 68,Addison-Wesley,Alex Martelli" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Python (programming language)</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/skins-1.5";
var wgArticlePath = "/wiki/$1";
var wgScriptPath = "/w";
var wgServer = "http://en.wikipedia.org";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Python_(programming_language)";
var wgTitle = "Python (programming language)";
var wgAction = "view";
var wgArticleId = "23862";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "131645599";
/*]]>*/</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Python_programming_language">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Python (programming language)</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Computer_Programming.htm">Computer Programming</a></h3>
      <!-- start content -->
      <table class="infobox" style="width: 23em; text-align: left;font-size: 90%">
       <caption><big><b>Python</b></big></caption>
       <tr>
        <td colspan="2" style="text-align: center;"><!--del_lnk--> <img alt="" height="36" longdesc="/wiki/Image:Python_logo.svg" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="150" /></td>
       </tr>
       <tr>
        <th><!--del_lnk--> Paradigm:</th>
        <td><!--del_lnk--> Multi-paradigm</td>
       </tr>
       <tr>
        <th>Appeared in:</th>
        <td>1991</td>
       </tr>
       <tr>
        <th>Designed by:</th>
        <td><!--del_lnk--> Guido van Rossum</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Developer:</th>
        <td><!--del_lnk--> Python Software Foundation</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Latest release:</th>
        <td>2.5.1 / <!--del_lnk--> April 18, <!--del_lnk--> 2007</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Typing discipline:</th>
        <td>Strong, dynamic (&quot;<!--del_lnk--> duck typing&quot;)</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Major implementations:</th>
        <td><!--del_lnk--> CPython, <!--del_lnk--> Jython, <!--del_lnk--> IronPython, <!--del_lnk--> PyPy</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Dialects:</th>
        <td><!--del_lnk--> Stackless Python</td>
       </tr>
       <tr>
        <th>Influenced by:</th>
        <td><!--del_lnk--> ABC, <!--del_lnk--> ALGOL 68, <!--del_lnk--> C, <!--del_lnk--> Haskell, <!--del_lnk--> Icon, <!--del_lnk--> Lisp, <!--del_lnk--> Modula-3, <a href="../../wp/p/Perl.htm" title="Perl">Perl</a>, <!--del_lnk--> Java</td>
       </tr>
       <tr>
        <th>Influenced:</th>
        <td><!--del_lnk--> Ruby, <!--del_lnk--> Boo</td>
       </tr>
       <tr>
        <th><!--del_lnk--> OS:</th>
        <td><!--del_lnk--> Cross-platform</td>
       </tr>
       <tr>
        <th><!--del_lnk--> License:</th>
        <td><!--del_lnk--> Python Software Foundation License</td>
       </tr>
       <tr>
        <th><!--del_lnk--> Website:</th>
        <td><!--del_lnk--> http://www.python.org/</td>
       </tr>
       <tr>
        <td>
        </td>
       </tr>
      </table>
      <p><b>Python</b> is a <!--del_lnk--> high-level programming language first released by <!--del_lnk--> Guido van Rossum in 1991. Python is designed around a philosophy which emphasizes the importance of programmer effort over computer effort, and it rejects more arcane language features, prioritizing readability over speed or expressiveness. Python is often characterized as minimalist, although this only applies to the core language&#39;s syntax and semantics; the <!--del_lnk--> standard library provides the language with a large number of additional libraries and extensions.<p>Python is a <!--del_lnk--> multi-paradigm programming language which has a fully <!--del_lnk--> dynamic type system and uses automatic <!--del_lnk--> memory management; it is thus similar to <a href="../../wp/p/Perl.htm" title="Perl">Perl</a>, <!--del_lnk--> Ruby, <!--del_lnk--> Scheme, <!--del_lnk--> Smalltalk, and <!--del_lnk--> Tcl.<p>The language has an open, community-based development model managed by the non-profit <!--del_lnk--> Python Software Foundation. While various parts of the language have formal specifications and standards, the language as a whole is not formally specified. The <i><!--del_lnk--> de facto</i> standard for the language is the <!--del_lnk--> CPython implementation.<script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script>
      <p><a id="History" name="History"></a><h2><span class="mw-headline">History</span></h2>
      <div class="thumb tright">
      </div>
      <p>Python was conceived in the late 1980s by Guido van Rossum at <!--del_lnk--> CWI in the <a href="../../wp/n/Netherlands.htm" title="Netherlands">Netherlands</a> as a successor of the <!--del_lnk--> ABC programming language capable of <!--del_lnk--> exception handling and interfacing with the <!--del_lnk--> Amoeba operating system. Van Rossum is Python&#39;s principal author, and his continuing central role in deciding the direction of Python is acknowledged by referring to him as its <!--del_lnk--> <i>Benevolent Dictator for Life</i> (BDFL).<p>In 1991, van Rossum published the code (labelled version 0.9.0) to <!--del_lnk--> alt.sources. Already present at this stage in development were classes with inheritance, exception handling, functions, and the core datatypes of <code>list</code>, <code>dict</code>, <code>str</code> and so on. Also in this initial release was a <!--del_lnk--> module system borrowed from <!--del_lnk--> Modula-3; van Rossum describes the module as &quot;one of Python&#39;s major programming units&quot;. Python&#39;s exception model also resembles Modula-3&#39;s, with the addition of an <code>else</code> clause. In 1994, <!--del_lnk--> comp.lang.python, the primary discussion forum for Python, was formed, marking a milestone in the growth of Python&#39;s userbase.<p>Python reached version 1.0 in January 1994. A major set of features included in this release were the functional programming tools <code><!--del_lnk--> lambda</code>, <code>map</code>, <code>filter</code> and <code><!--del_lnk--> reduce</code>. Van Rossum states that &quot;Python acquired lambda, reduce(), filter() and map(), courtesy of (I believe) a <!--del_lnk--> Lisp hacker who missed them and submitted working patches.&quot; The actual contributor was Amrit Prem; no specific mention of any Lisp heritage is mentioned in the release notes at the time.<p>The last version released from CWI was Python 1.2. In 1995, van Rossum continued his work on Python at the <!--del_lnk--> Corporation for National Research Initiatives (CNRI) in <!--del_lnk--> Reston, <!--del_lnk--> Virginia where he released several versions of the software.<p>By version 1.4, Python had acquired several new features. Notable among these are the <!--del_lnk--> Modula-3 inspired <!--del_lnk--> keyword arguments (which are also similar to <!--del_lnk--> Common Lisp&#39;s keyword arguments), and built-in support for <!--del_lnk--> complex numbers. Also included is a basic form of <!--del_lnk--> data hiding by <!--del_lnk--> name mangling, though this is easily bypassed.<p>During van Rossum&#39;s stay at CNRI, he launched the <!--del_lnk--> Computer Programming for Everybody (CP4E) initiative, intending to make programming more accessible to more people, with a basic &#39;literacy&#39; in programming languages, similar to the basic English literacy and mathematics skills required by most employers. Python served a central role in this: because of its focus on clean syntax, it was already suitable, and CP4E&#39;s goals bore similarities to its predecessor, ABC. The project was funded by <!--del_lnk--> DARPA. <!--del_lnk--> As of 2007, the CP4E project is inactive, and while Python attempts to be easily learnable and not too arcane in its syntax and semantics, reaching out to non-programmers is not an active concern.<p>In 2000, the Python core development team moved to <!--del_lnk--> BeOpen.com to form the BeOpen <!--del_lnk--> PythonLabs team. CNRI requested that a version 1.6 be released, summarising Python&#39;s development up to the point where the development team left CNRI. Consequently, the release schedules for 1.6 and 2.0 had a significant amount of overlap. Python 2.0 was the first and only release from BeOpen.com. After Python 2.0 was released by BeOpen.com, Guido van Rossum and the other PythonLabs developers joined <!--del_lnk--> Digital Creations.<p>Python 2.0 borrowed a major feature from the <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a> language <!--del_lnk--> Haskell: <!--del_lnk--> list comprehensions. Python&#39;s syntax for this construct is very similar to Haskell&#39;s, apart from Haskell&#39;s preference for punctuation characters and Python&#39;s preference for alphabetic keywords. Python 2.0 also introduced a <!--del_lnk--> garbage collection system capable of collecting reference cycles.<p>Following this double release, and after van Rossum left CNRI to work with commercial software developers, it became clear that the ability to use Python with software available under the <!--del_lnk--> GPL was very desirable. The license used at that time, the <!--del_lnk--> Python License, included a clause stating that the license was governed by the <!--del_lnk--> State of Virginia, which made it, in the view of the <!--del_lnk--> Free Software Foundation&#39;s (FSF) lawyers, incompatible with the <!--del_lnk--> GNU GPL. CNRI and the FSF interacted to develop enabling wording changes to Python&#39;s <!--del_lnk--> free software license that would make it GPL-compatible. That year (2001), van Rossum was awarded the <!--del_lnk--> FSF Award for the Advancement of Free Software.<p>Python 1.6.1 is essentially the same as Python 1.6, with a few minor bug fixes, and with the new GPL-compatible license.<div class="thumb tright">
       <div class="thumbinner" style="width:294px;"><a class="internal" href="../../images/212/21292.png.htm" title="Syntax-highlighted Python code."><img alt="Syntax-highlighted Python code." class="thumbimage" height="218" longdesc="/wiki/Image:Python_add5_syntax.svg" src="../../images/212/21292.png" width="292" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/212/21292.png.htm" title="Enlarge"><img alt="" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> Syntax-highlighted Python code.</div>
       </div>
      </div>
      <p>Python 2.1 was a derivative work of Python 1.6.1, as well as of Python 2.0. Its license was renamed <!--del_lnk--> Python Software Foundation License. All code, documentation and specifications added, from the time of Python 2.1&#39;s alpha release on, is owned by the <!--del_lnk--> Python Software Foundation (PSF), a non-profit organisation formed in 2001, modelled after the <!--del_lnk--> Apache Software Foundation. Included in this release (though off by default and not mandatory until several versions later) was an implementation of scoping more similar to <!--del_lnk--> static scoping (of which <!--del_lnk--> Scheme is the originator) rules.<p>A major innovation in Python 2.2 was the unification of Python&#39;s types (types written in C), and classes (types written in Python) into one hierarchy. This single unification made Python&#39;s object model purely and consistently object oriented. Also added were <!--del_lnk--> generators which were inspired by <!--del_lnk--> Icon.<p>Python&#39;s standard library additions and syntactical choices were strongly influenced by <!--del_lnk--> Java in some cases: the <code>logging</code> package, introduced in version 2.3, the <!--del_lnk--> SAX parser, introduced in 2.0, and the <!--del_lnk--> decorator pattern syntax that uses <code>@</code>, added in version 2.4<p><a id="Future_development" name="Future_development"></a><h2><span class="mw-headline">Future development</span></h2>
      <dl>
       <dd>
      </dl>
      <p>A Python Enhancement Proposal (or &quot;PEP&quot;) is a standardised design document providing general information related to Python, including proposals, descriptions, and explanations for language features. PEPs are intended as the primary channel for proposing new features, and for documenting the underlying design rationale for all major elements of Python. Outstanding PEPs are reviewed and commented by the BDFL.<p>Python developers have an ongoing discussion of a future version called <!--del_lnk--> Python 3.0 (the project is called &quot;Python 3000&quot; or &quot;Py3K&quot;) that will break backwards compatibility with the 2.x series in order to repair perceived flaws in the language. The guiding principle is to &quot;reduce feature duplication by removing old ways of doing things&quot;. There is no definite schedule for Python 3.0, but a PEP (Python Enhancement Proposal) that details planned changes exists.<p><a id="Usage" name="Usage"></a><h2><span class="mw-headline">Usage</span></h2>
      <dl>
       <dd>
      </dl>
      <p>Some of the largest projects that use Python are the <!--del_lnk--> Zope application server, the <!--del_lnk--> Mnet distributed file store, and the original <!--del_lnk--> BitTorrent client. It is also extensively used by <a href="../../wp/g/Google.htm" title="Google">Google</a> and <!--del_lnk--> NASA.<p>Python has been successfully embedded in a number of software products as a scripting language. It is commonly used in 3D animation packages, as in <!--del_lnk--> Maya (software), <!--del_lnk--> Softimage XSI and <!--del_lnk--> Blender (software). It also used in Paint Shop Pro. <!--del_lnk--> ESRI is now promoting Python as the best choice for writing scripts in <!--del_lnk--> ArcGIS <p>For some operating systems, Python is a standard component. <!--del_lnk--> Gentoo uses it extensively in its <!--del_lnk--> package management system, <!--del_lnk--> Portage, and the standard tool to access it, <!--del_lnk--> emerge.<p>Python is also an integral component of the popular <!--del_lnk--> LAMP <!--del_lnk--> solution stack (<a href="../../wp/l/Linux.htm" title="Linux">Linux</a>, <!--del_lnk--> Apache, <!--del_lnk--> MySQL, Python/<a href="../../wp/p/Perl.htm" title="Perl">Perl</a>/<!--del_lnk--> PHP) for web development.<p><a id="Syntax_and_semantics" name="Syntax_and_semantics"></a><h2><span class="mw-headline">Syntax and semantics</span></h2>
      <dl>
       <dd>
      </dl>
      <p>Python was designed to be a highly readable language. It aims toward an uncluttered visual layout, uses English keywords frequently where other languages use punctuation. Python requires less <!--del_lnk--> boilerplate than traditional statically-typed structured languages such as C or Pascal, and has a smaller number of syntactic exceptions and special cases than either of these. Python uses indentation/whitespace, rather than <!--del_lnk--> curly braces or keywords, to delimit <!--del_lnk--> statement blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Python&#39;s statements include:<ul>
       <li>The <!--del_lnk--> <code>if</code> statement, which conditionally executes a block of code, along with <code>else</code> and <code>elif</code> (a contraction of else-if).<li>The <!--del_lnk--> <code>while</code> statement, which runs a block of code until a condition is <code>False</code>.<li>The <!--del_lnk--> <code>for</code> statement, which iterates over an iterable, capturing each element to a local variable for use by the attached block.<li>The <code>class</code> statement, which executes a block of code and attaches its local namespace to a <!--del_lnk--> class, for use in <!--del_lnk--> object oriented programming.<li>The <code>def</code> statement, which defines a <!--del_lnk--> function.</ul>
      <p>Each statement has its own semantics: for example, the <code>def</code> statement does not execute its block immediately, unlike most other statements.<p>CPython does not support <!--del_lnk--> continuations, and according to Guido van Rossum, never will. However, better support for <!--del_lnk--> coroutine-like functionality is provided in 2.5, by extending Python&#39;s <!--del_lnk--> generators. Prior to 2.5, generators were <!--del_lnk--> lazy <!--del_lnk--> iterators &mdash; information was passed monodirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function.<p>Python uses <!--del_lnk--> duck typing, also known as <!--del_lnk--> latent typing. Type constraints are not checked at <!--del_lnk--> compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite not enforcing <!--del_lnk--> static typing, Python is <!--del_lnk--> strongly typed, forbidding operations which make little sense (for example, adding a number to a string) rather than silently attempting to make sense of them.<p>Python includes a number of built-in types used for a variety of purposes:<table class="wikitable">
       <tr>
        <th>Type</th>
        <th>Kind</th>
        <th>Notes</th>
        <th>Syntax Example</th>
       </tr>
       <tr>
        <td><code>str</code>, <code>unicode</code></td>
        <td>String</td>
        <td><!--del_lnk--> Immutable</td>
        <td><code>&#39;Wikipedia&#39;</code>, <code>u&#39;Wikipedia&#39;</code></td>
       </tr>
       <tr>
        <td><code>list</code></td>
        <td>Sequence</td>
        <td><!--del_lnk--> Mutable, can contain mixed types</td>
        <td><code>[4.0, &#39;string&#39;, True]</code></td>
       </tr>
       <tr>
        <td><code>tuple</code></td>
        <td>Sequence</td>
        <td><!--del_lnk--> Immutable, can contain mixed types</td>
        <td><code>(4.0, &#39;string&#39;, True)</code></td>
       </tr>
       <tr>
        <td><code>set</code></td>
        <td>Set</td>
        <td>Unordered, contains no duplicates</td>
        <td><code>set([4.0, &#39;string&#39;, True])</code></td>
       </tr>
       <tr>
        <td><code>dict</code></td>
        <td>Mapping</td>
        <td>Group of key and value pairs</td>
        <td><code>{&#39;key1&#39;: 1.0, &#39;key2&#39;: False}</code></td>
       </tr>
       <tr>
        <td><code>int</code></td>
        <td>Integer</td>
        <td>A <!--del_lnk--> fixed precision number (may be transparently expanded to <code>long</code>, which is <!--del_lnk--> arbitrary precision)</td>
        <td><code>42</code></td>
       </tr>
       <tr>
        <td><code>float</code></td>
        <td>Number</td>
        <td><!--del_lnk--> Floating point</td>
        <td><code>3.1415927</code></td>
       </tr>
       <tr>
        <td><code>complex</code></td>
        <td>complex Number</td>
        <td>A <!--del_lnk--> complex number with real number and imaginary unit</td>
        <td><code>3+2j</code></td>
       </tr>
       <tr>
        <td><code>bool</code></td>
        <td><!--del_lnk--> Boolean</td>
        <td>The empty <code>list</code>, <code>dict</code>, <code>set</code>, and <code>0</code>, are also considered <code>False</code></td>
        <td><code>True</code> or <code>False</code></td>
       </tr>
      </table>
      <p>Python also allows programmers to define their own types. This is in the form of <!--del_lnk--> classes, most often used for an <!--del_lnk--> object-oriented style of programming. New <!--del_lnk--> instances of classes are constructed by calling the class (ie, like <code>FooClass()</code>), and the classes themselves are instances of class <code>type</code> (itself an instance of itself), allowing <!--del_lnk--> metaprogramming and <!--del_lnk--> reflection.<p><!--del_lnk--> Methods on objects are <!--del_lnk--> functions attached to the object&#39;s class; the syntax <code>instance.method(argument)</code> is, for normal methods and functions, <!--del_lnk--> syntactic sugar for <code>Class.method(instance, argument)</code>. This is why Python methods must have an explicit <code><!--del_lnk--> self</code> parameter to access <!--del_lnk--> instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, <!--del_lnk--> Java or <!--del_lnk--> Ruby).<p>
       <br />
      <p><a id="Implementations" name="Implementations"></a><h2><span class="mw-headline">Implementations</span></h2>
      <p>The mainstream Python implementation, also known as <i><!--del_lnk--> CPython</i>, is written in <!--del_lnk--> C compliant to the <!--del_lnk--> C89 standard, and is distributed with a large standard library written in a mixture of C and Python. CPython ships for a large number of supported platforms, including <a href="../../wp/m/Microsoft_Windows.htm" title="Microsoft Windows">Microsoft Windows</a> and most modern <!--del_lnk--> Unix-like systems. CPython was intended from almost its very conception to be cross-platform; its use and development on esoteric platforms such as Amoeba alongside more conventional ones like <a href="../../wp/u/Unix.htm" title="Unix">Unix</a> or <a href="../../wp/m/Macintosh.htm" title="Macintosh">Macintosh</a> has greatly helped in this regard.<p><!--del_lnk--> Stackless Python is a significant fork of CPython that implements <!--del_lnk--> microthreads. It can be expected to run on approximately the same platforms that CPython runs on.<p>There are two other major implementations: <!--del_lnk--> Jython for the <!--del_lnk--> Java platform, and <!--del_lnk--> IronPython for the <!--del_lnk--> .NET platform. <!--del_lnk--> PyPy is an experimental <!--del_lnk--> self-hosting implementation of Python, in Python, that can output a variety of types of <!--del_lnk--> bytecode, <!--del_lnk--> object code and <!--del_lnk--> intermediate languages.<p>Several programs exist to package Python programs into standalone executables, including <!--del_lnk--> py2exe, <!--del_lnk--> PyInstaller, <!--del_lnk--> cx_Freeze and <!--del_lnk--> py2app.<p>Many Python programs can run on different Python implementations, on such disparate <!--del_lnk--> operating systems and execution environments, without change. In the case of the implementations running on top of the <!--del_lnk--> Java virtual machine or the <!--del_lnk--> Common Language Runtime, the platform-independence of these systems is harnessed by their respective Python implementation.<p>Many third-party libraries for Python (and even some first-party ones) are only available on Windows, Linux, BSD, and Mac OS X.<p><a id="Interpretational_semantics" name="Interpretational_semantics"></a><h3><span class="mw-headline">Interpretational semantics</span></h3>
      <div class="thumb tright">
      </div>
      <p>Most Python implementations (including CPython, the dominant implementation) can function as a <!--del_lnk--> command-line <!--del_lnk--> interpreter, where the user enters statements sequentially and receives the results immediately; in short, acting as a <!--del_lnk--> shell. While the semantics of the other modes of execution (bytecode compilation, or compilation to native code) preserve the sequential semantics, they offer a speed boost at the cost of interactivity, so they are only used outside of a command-line interaction (for example, importing a module).<p>Other shells add capabilities beyond those in the basic interpreter, including <!--del_lnk--> IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.<p>Some implementations are able to compile to not only bytecode, but to turn Python code into <!--del_lnk--> machine code. So far, this has only been done for restricted subsets of Python. PyPy takes this approach, naming its restricted compilable version of Python <i><!--del_lnk--> RPython</i>. There is also <!--del_lnk--> Psyco, which is a <!--del_lnk--> specialising <!--del_lnk--> just in time compiler, which transforms bytecode to machine code at runtime. The produced code is specialised for certain <!--del_lnk--> data types (for example, there may be a version for integers smaller than 2<sup>32</sup> which uses the <!--del_lnk--> CPU&#39;s operations directly, and there may be a version which goes through the normal machinery for Python objects). This is done at runtime, based on the values the program actually manipulates, and works on any Python code, not just a subset.<p><a id="Standard_library" name="Standard_library"></a><h2><span class="mw-headline">Standard library</span></h2>
      <p>Python has a large standard library, commonly cited as one of Python&#39;s greatest strengths, providing tools suited to many disparate tasks. This comes from a so-called &quot;batteries included&quot; philosophy for Python modules. The modules of the standard library can be augmented with custom modules written in either C or Python. Recently, <!--del_lnk--> Boost C++ Libraries includes a library, python, to enable interoperability between C++ and Python. Because of the wide variety of tools provided by the standard library combined with the ability to use a lower-level language such as C and C++, which is already capable of interfacing between other libraries, Python can be a powerful <!--del_lnk--> glue language between languages and tools.<p>The standard library is particularly well tailored to writing Internet-facing applications, with a large number of standard formats and protocols (such as <!--del_lnk--> MIME and <!--del_lnk--> HTTP) supported. Modules for creating <!--del_lnk--> graphical user interfaces, connecting to <!--del_lnk--> relational databases, arithmetic with arbitrarily precise decimals, and manipulating <!--del_lnk--> regular expressions are also included. Python also includes a <!--del_lnk--> unit testing framework for creating exhaustive test suites.<p>Some parts of the standard library are covered by specifications (for example, the <!--del_lnk--> WSGI implementation <code>wsgiref</code> follows <!--del_lnk--> PEP 333), but the majority of modules are defined by nothing other than their code, documentation and test suite. However, because most of the standard library is cross-platform Python code, there are only a small number of modules which must be altered or completely rewritten by alternative implementations.<p><a id="Programming_philosophy" name="Programming_philosophy"></a><h2><span class="mw-headline">Programming philosophy</span></h2>
      <p>Python is a <!--del_lnk--> multi-paradigm programming language. This means that, rather than forcing programmers to adopt a particular style of programming, it permits several styles: <!--del_lnk--> object orientation and <!--del_lnk--> structured programming are fully supported, and there are a number of language features which support <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a> and <!--del_lnk--> aspect-oriented programming. Many other paradigms are supported using extensions, such as <!--del_lnk--> pyDBC and <!--del_lnk--> Contracts for Python which allow <!--del_lnk--> Design by Contract. Python uses <!--del_lnk--> dynamic typing and <!--del_lnk--> reference counting for <!--del_lnk--> memory management. An important feature of Python is dynamic <!--del_lnk--> name resolution, which binds method and variable names during program execution.<p>Another target of the language&#39;s design is ease of extensibility, rather than having everything built into the language core. New built-in modules are easily written in <!--del_lnk--> C or <a href="../../wp/c/C%252B%252B.htm" title="C++">C++</a>. Python can also be used as an extension language for existing modules and applications that need a programmable interface. This design, of a small core language with a large standard library and an easily-extensible interpreter, was intended by van Rossum from the very start, due to his frustrations with ABC, which espoused the opposite mindset.<p>Though the design of Python is somewhat hostile to <a href="../../wp/f/Functional_programming.htm" title="Functional programming">functional programming</a> and the <!--del_lnk--> Lisp tradition (no <!--del_lnk--> tail-call elimination nor good support for <!--del_lnk--> anonymous closures), there are significant parallels between the philosophy of Python and that of minimalist Lisp-family languages such as <!--del_lnk--> Scheme.<p>While offering choice in coding methodology, the <!--del_lnk--> Python philosophy rejects exuberant syntax, such as in Perl, in favour of a sparser, less cluttered one. As with Perl, Python&#39;s developers expressly promote a particular &quot;culture&quot; or ideology based on what they want the language to be, favoring language forms they see as &quot;beautiful&quot;, &quot;explicit&quot; and &quot;simple&quot;. As <!--del_lnk--> Alex Martelli put it in his <i>Python Cookbook</i> (2nd ed., p.230): &quot;To describe something as clever is NOT considered a compliment in the Python culture.&quot; Python&#39;s philosophy rejects the Perl &quot;<!--del_lnk--> there is more than one way to do it&quot; approach to language design in favour of advocating a single &quot;right&quot; approach to problem solving.<p>Like nearly all other languages and their communities, Python does not advocate <!--del_lnk--> premature optimisation, and actively eschews patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity. Because of this, Python is sometimes labelled as &#39;slow&#39;, and while the community accepts this, it is not commonly seen as a problem, because the majority of a program is not critical to speed, and the <!--del_lnk--> bottlenecks can be optimised greatly (a 15-fold optimisation of a naive algorithm is recorded without recoding into C), but premature optimisation is warned against strongly .<p><a id="Neologisms" name="Neologisms"></a><h3><span class="mw-headline">Neologisms</span></h3>
      <p>A common <!--del_lnk--> neologism in the Python community is <i><!--del_lnk--> pythonic</i>, which can have a wide range of meanings related to program style. To say that a piece of code is pythonic is to say that it uses Python idioms well; that it is natural or shows fluency in the language. Likewise, to say of an interface or language feature that it is pythonic is to say that it works well with Python idioms; that its use meshes well with the rest of the language. Some people also use the word <i>pythonesque</i> as a <!--del_lnk--> synonym of &#39;pythonic&#39;.<p>In contrast, a mark of <i>unpythonic</i> code is that it attempts to &quot;write C++ (or Lisp, or Perl) code in Python&quot;&mdash;that is, provides a rough transcription rather than an idiomatic translation of forms from another language. The concept of pythonicity is tightly bound to Python&#39;s minimalist philosophy of readability. Unreadable code or incomprehensible idioms are unpythonic.<p>Users and admirers of Python&mdash;most especially those considered knowledgeable or experienced&mdash;are often referred to as <i>Pythonists</i>, <i>Pythonistas</i>, and <i>Pythoneers</i>.<p>The prefix <i>Py-</i> can be used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include <!--del_lnk--> Pygame, a binding of <!--del_lnk--> SDL to Python (commonly used to create games); <!--del_lnk--> PyQt and <!--del_lnk--> PyGTK, which bind <!--del_lnk--> Qt and <!--del_lnk--> GTK, respectively, to Python; and <!--del_lnk--> PyPy, a Python implementation written in Python. The prefix is also used outside of naming software packages: the major Python <!--del_lnk--> conference is named <!--del_lnk--> PyCon.<p>An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (after the television series <i><!--del_lnk--> Monty Python&#39;s Flying Circus</i>), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials. For example, the <!--del_lnk--> metasyntactic variables often used in Python literature are <!--del_lnk--> <i>spam</i> and <i>eggs</i>, instead of the traditional <!--del_lnk--> <i>foo</i> and <i>bar</i>.<p><a id="Influences_on_other_languages" name="Influences_on_other_languages"></a><h2><span class="mw-headline">Influences on other languages</span></h2>
      <p>Python&#39;s design and philosophy have influenced several programming languages:<ul>
       <li><!--del_lnk--> Boo&#39;s Python heritage is more explicit &mdash; it also uses indentation, a similar syntax, and a similar object model. Boo, however, uses <!--del_lnk--> static typing and is closely integrated with the <!--del_lnk--> .NET framework.<li><!--del_lnk--> ECMAScript borrowed <!--del_lnk--> iterators, <!--del_lnk--> generators and <!--del_lnk--> list comprehensions from Python&#39;s implementation.<li><!--del_lnk--> Ruby is influenced by Python. Specifically, <!--del_lnk--> Matz wished to have a language closer to the classical message passing object-oriented model than Python.<li><!--del_lnk--> Groovy was motivated by the desire to bring the Python design philosophy to Java.</ul>
      <p>Python&#39;s development practices have also been emulated by other languages. The system of requiring a document describing the rationale for and issues surrounding a change to the language (ie, a PEP) is also used in <!--del_lnk--> Tcl directly due to Python&#39;s influence.<h2><span class="mw-headline">Additional Reading</span></h2>
      <ul>
       <li><!--del_lnk--> The Python Language Reference Manual by Guido van Rossum and Fred L. Drake, Jr. (<!--del_lnk--> ISBN 0-9541617-8-5)<li><!--del_lnk--> <i>How to Think Like a Computer Scientist: Learning with Python</i> is an introduction to function-based programming constructs using Python - free download available or hardcopy may be purchased. (<!--del_lnk--> ISBN 0-9716775-0-6)<li><!--del_lnk--> Text Processing in Python by <!--del_lnk--> David Mertz is an intermediate Python book, available both online for free and for money from <!--del_lnk--> Addison-Wesley. (<!--del_lnk--> ISBN 0-321-11254-7)<li><!--del_lnk--> <i>A Byte of Python</i> is a beginner&#39;s book on Python. Also available online as a <!--del_lnk--> wiki.<li><i><!--del_lnk--> Dive into Python</i> demonstrates clever and useful Python paradigms for readers who know how to program already. It is <!--del_lnk--> available online, or hardcopy may be purchased.<li><!--del_lnk--> Core Python Programming, 2nd Edition by Wesley Chun (<!--del_lnk--> ISBN 0-13-226993-7)<li><!--del_lnk--> <i>Py</i>, &quot;The Python Online Technical Journal&quot;.<li><!--del_lnk--> Learning Python by Mark Lutz and David Ascher, 2nd edition, Dec. 2003 (<!--del_lnk--> ISBN 0596002815)<li><!--del_lnk--> Programming Python by Mark Lutz, 3rd edition Aug. 2006 (<!--del_lnk--> ISBN 0596009259)<li><!--del_lnk--> Python Pocket Reference by Mark Lutz, 1st edition Feb. 2005 (<!--del_lnk--> ISBN 0596009402)<li><!--del_lnk--> <i>Computing in Science &amp; Engineering</i>, a peer-reviewed technical magazine, recently devoted a special issue to Python.</ul>
      <p><a id="External_links" name="External_links"></a><div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Python_%28programming_language%29&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
