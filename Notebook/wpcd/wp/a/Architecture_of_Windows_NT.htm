<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
  <meta content="Architecture of Windows NT,16-bit,64-bit,Access control lists,Active Directory,Alpha blending,Asynchronous I/O,Bus,Class (computer science),Compaq,Computer hardware" name="keywords" />
  <link href="../../favicon.ico" rel="shortcut icon" />
  <link href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm" rel="copyright" />
  <title>Architecture of Windows NT</title>
  <style media="screen,projection" type="text/css">/*<![CDATA[*/ @import "../../css/wp-monobook-main.css"; /*]]>*/</style>
  <link href="../../css/wp-commonPrint.css" media="print" rel="stylesheet" type="text/css" />
  <!--[if lt IE 5.5000]><style type="text/css">@import "../../css/IE50Fixes.css";</style><![endif]-->
  <!--[if IE 5.5000]><style type="text/css">@import "../../css/IE55Fixes.css";</style><![endif]-->
  <!--[if IE 6]><style type="text/css">@import "../../css/IE60Fixes.css";</style><![endif]-->
  <!--[if IE 7]><style type="text/css">@import "../../css/IE70Fixes.css";</style><![endif]-->
  <!--[if lt IE 7]><script type="text/javascript" src="../../js/IEFixes.js"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript">
			var skin = "monobook";
			var stylepath = "/skins-1.5";

			var wgArticlePath = "/wiki/$1";
			var wgScriptPath = "/w";
			var wgServer = "http://en.wikipedia.org";

			var wgCanonicalNamespace = "";
			var wgNamespaceNumber = 0;
			var wgPageName = "Architecture_of_Windows_NT";
			var wgTitle = "Architecture of Windows NT";
			var wgArticleId = 1942523;
			var wgCurRevisionId = 92694449;
			var wgIsArticle = true;
		
			var wgUserName = null;
			var wgUserLanguage = "en";
			var wgContentLanguage = "en";
		</script>
  <script src="../../js/wikibits.js" type="text/javascript"><!-- wikibits js --></script>
  <script src="../../js/wp.js" type="text/javascript"><!-- site js --></script>
  <style type="text/css">/*<![CDATA[*/
@import "../../css/wp-common.css";
@import "../../css/wp-monobook.css";
@import "../../css/wp.css";
/*]]>*/</style>
  <!-- Head Scripts -->
 </head>
 <body class="mediawiki ns-0 ltr page-Architecture_of_Windows_NT">
  <div id="globalWrapper">
   <div id="column-content">
    <div id="content"><a id="top" name="top"></a><h1 class="firstHeading">Architecture of Windows NT</h1>
     <div id="bodyContent">
      <h3 id="siteSub"><a href="../../index.htm">2007 Schools Wikipedia Selection</a>. Related subjects: <a href="../index/subject.IT.Software.htm">Software</a></h3>
      <!-- start content -->
      <div class="metadata topicon" id="featured-star" style="right:10px; display:none;">
       <div style="position: relative; width: 14px; height: 14px; overflow: hidden">
        <div style="position: absolute; top: 0px; left: 0px; font-size: 100px; overflow: hidden; line-height: 100px; z-index: 3"><!--del_lnk--> <span title="This is a featured article. Click here for more information.">&nbsp;&nbsp;&nbsp;</span></div>
        <div style="position: absolute; top: 0px; left: 0px; z-index: 2"><a class="image" href="../../images/0/24.png.htm" title="This is a featured article. Click here for more information."><img alt="This is a featured article. Click here for more information." height="14" longdesc="/wiki/Image:LinkFA-star.png" src="../../images/0/24.png" width="14" /></a></div>
       </div>
      </div>
      <div class="thumb tright">
       <div style="width:277px;"><a class="internal" href="../../images/284/28484.png.htm" title="NT-based operating system family&#39;s architecture consists of two layers (user mode and kernel mode), with many different modules within both of these layers."><img alt="NT-based operating system family&#39;s architecture consists of two layers (user mode and kernel mode), with many different modules within both of these layers." height="353" longdesc="/wiki/Image:Windows_2000_architecture.svg" src="../../images/233/23320.png" width="275" /></a><div class="thumbcaption">
         <div class="magnify" style="float:right"><a class="internal" href="../../images/284/28484.png.htm" title="Enlarge"><img alt="Enlarge" height="11" src="../../images/0/1.png" width="15" /></a></div><!--del_lnk--> NT-based operating system family&#39;s architecture consists of two layers (<!--del_lnk--> user mode and <!--del_lnk--> kernel mode), with many different modules within both of these layers.</div>
       </div>
      </div>
      <p><a href="../../wp/w/Windows_Vista.htm" title="Windows Vista">Windows Vista</a>, <!--del_lnk--> Windows Server 2003, <a href="../../wp/w/Windows_XP.htm" title="Windows XP">Windows XP</a>, <a href="../../wp/w/Windows_2000.htm" title="Windows 2000">Windows 2000</a> and <!--del_lnk--> Windows NT are all part of the <!--del_lnk--> Windows NT family (<!--del_lnk--> NT-based) of Microsoft operating systems. They are all <!--del_lnk--> preemptive, <!--del_lnk--> reentrant <!--del_lnk--> operating systems, which have been designed to work with either <!--del_lnk--> uniprocessor- or <!--del_lnk--> symmetrical multi processor (SMP)-based <!--del_lnk--> Intel <!--del_lnk--> x86 computers. To process <!--del_lnk--> input/output (I/O) requests it uses <!--del_lnk--> packet-driven I/O which utilises <!--del_lnk--> I/O request packets (IRPs) and <!--del_lnk--> asynchronous I/O. Starting with <a href="../../wp/w/Windows_XP.htm" title="Windows XP">Windows XP</a>, Microsoft began building in 64-bit support into their operating systems &mdash; before this their operating systems were based on a 32-bit model. The <b>architecture of Windows NT</b> is highly modular, and consists of two main layers: a <!--del_lnk--> user mode and a <!--del_lnk--> kernel mode. Programs and subsystems in user mode are limited in terms of what system resources they have access to, while the kernel mode has unrestricted access to the system memory and external devices. The <!--del_lnk--> kernels of the operating systems in this line are all known as <!--del_lnk--> hybrid kernels - although it is worth noting that this term is disputed, with the claim that the kernel is essentially a <!--del_lnk--> monolithic kernel that is structured somewhat like a <!--del_lnk--> microkernel. The architecture is comprised of a hybrid kernel, <!--del_lnk--> Hardware Abstraction Layer (HAL), drivers, and <a href="#Executive" title="">Executive</a>, which all exist in kernel mode <span class="reference plainlinksneverexpand" id="ref_MCSEWin2kServerArch"><sup><!--del_lnk--> </sup></span>. The higher-level services are implemented by the <a href="#Executive" title="">executive</a>.<p>User mode in the Windows NT line is made of subsystems capable of passing I/O requests to the appropriate kernel mode <!--del_lnk--> software drivers by using the I/O manager. Two subsystems make up the user mode layer of Windows 2000: the Environment subsystem (runs applications written for many different types of operating systems), and the Integral subsystem (operates system specific functions on behalf of the environment subsystem). Kernel mode in Windows 2000 has full access to the hardware and system resources of the computer. The kernel mode stops user mode services and applications from accessing critical areas of the operating system that they should not have access to.<p>The Executive interfaces with all the user mode subsystems. It deals with I/O, object management, security and process management. The kernel sits between the <!--del_lnk--> Hardware Abstraction Layer and the Executive to provide <i>multiprocessor synchronization</i>, thread and interrupt scheduling and dispatching, and trap handling and exception dispatching. The kernel is also responsible for initialising device drivers at bootup. Kernel mode drivers exist in three levels: highest level drivers, intermediate drivers and low level drivers. <!--del_lnk--> Windows Driver Model (WDM) exists in the intermediate layer and was mainly designed to be binary and source compatible between <!--del_lnk--> Windows 98 and <a href="../../wp/w/Windows_2000.htm" title="Windows 2000">Windows 2000</a>. The lowest level drivers are either legacy <!--del_lnk--> Windows NT device drivers that control a device directly or can be a <!--del_lnk--> PnP hardware bus.<p>
       <script type="text/javascript">
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</script><a id="User_mode" name="User_mode"></a><h2> <span class="mw-headline">User mode</span></h2>
      <p>The user mode is made up of subsystems which can pass I/O requests to the appropriate kernel mode drivers via the I/O manager (which exists in kernel mode). Two subsystems make up the user mode layer of Windows 2000: the <i>Environment subsystem</i> and the <i>Integral subsystem</i>.<p>The environment subsystem was designed to run applications written for many different types of operating systems. None of the environment subsystems can directly access hardware, and must request access to memory resources through the Virtual Memory Manager that runs in kernel mode. Also, applications run at a lower priority than kernel mode processes. Currently, there are three main environment subsystems: the Win32 subsystem, an <!--del_lnk--> OS/2 subsystem and a <!--del_lnk--> POSIX subsystem.<p>The <!--del_lnk--> Win32 environment subsystem can run 32-bit Windows applications. It contains the console as well as text window support, shutdown and hard-error handling for all other environment subsystems. It also supports <!--del_lnk--> Virtual DOS Machines (VDMs), which allow <!--del_lnk--> MS-DOS and <!--del_lnk--> 16-bit <!--del_lnk--> Windows 3.x (<!--del_lnk--> Win16) applications to run on Windows. There is a specific MS-DOS VDM which runs in its own address space and which emulates an <!--del_lnk--> Intel 80486 running MS-DOS 5. Win16 programs, however, run in a Win16 VDM. Each program, by default, runs in the same process, thus using the same address space, and the Win16 VDM gives each program its own <!--del_lnk--> thread to run on. However, Windows 2000 does allow users to run a Win16 program in a separate Win16 VDM, which allows the program to be preemptively multitasked as Windows 2000 will pre-empt the whole VDM process, which only contains one running application. The OS/2 environment subsystem supports 16-bit character-based OS/2 applications and emulates OS/2 1.x, but not 32-bit or graphical OS/2 applications as used with OS/2 2.x or later. The POSIX environment subsystem supports applications that are strictly written to either the POSIX.1 standard or the related <!--del_lnk--> ISO/<!--del_lnk--> IEC standards.<p>The integral subsystem looks after operating system specific functions on behalf of the environment subsystem. It consists of a <i>security subsystem</i>, a <i>workstation service</i> and a <i>server service</i>. The security subsystem deals with security tokens, grants or denies access to user accounts based on resource permissions, handles logon requests and initiates logon authentication, and determines which system resources need to be audited by Windows 2000. It also looks after <!--del_lnk--> Active Directory. The workstation service is an API to the network redirector, which provides the computer access to the network. The server service is an API that allows the computer to provide network services.<p><a id="Kernel_mode" name="Kernel_mode"></a><h2> <span class="mw-headline">Kernel mode</span></h2>
      <p>Windows 2000 <!--del_lnk--> kernel mode has full access to the hardware and system resources of the computer and runs code in a protected memory area. It controls access to scheduling, thread prioritisation, memory management and the interaction with hardware. The kernel mode stops user mode services and applications from accessing critical areas of the operating system that they should not have access to as user mode processes ask the kernel mode to perform such operations on its behalf.<p>Kernel mode consists of <i>executive services</i>, which is itself made up on many modules that do specific tasks, <i>kernel drivers</i>, a <i><!--del_lnk--> kernel</i> and a <i>Hardware Abstraction Layer</i>, or HAL.<p><a id="Executive" name="Executive"></a><h3> <span class="mw-headline">Executive</span></h3>
      <p>The Executive interfaces with all the user mode subsystems. It deals with I/O, object management, security and process management. It contains various components, including the <i>I/O Manager</i>, the <i>Security Reference Monitor</i>, the <i>Object Manager</i>, the <i>IPC Manager</i>, the <i>Virtual Memory Manager</i> (VMM), a <i>PnP Manager</i> and <i>Power Manager</i>, as well as a <i>Window Manager</i> which works in conjunction with the Windows <i><!--del_lnk--> Graphics Device Interface</i> (GDI). Each of these components exports a kernel-only support routine allows other components to communicate with one another. Grouped together, the components can be called <i>executive services</i>. No executive component has access to the internal routines of any other executive component.<p>The <b>object manager</b> is a special executive subsystem that all other executive subsystems must pass through to gain access to Windows 2000 resources &mdash; essentially making it a resource management infrastructure service. The object manager is used to reduce the duplication of object resource management functionality in other executive subsystems, which could potentially lead to bugs and make development of Windows 2000 harder <span class="reference plainlinksneverexpand" id="ref_RussinovichObjectManager_Intro"><sup><!--del_lnk--> </sup></span>. To the object manager, each resource is an object, whether that resource is a physical resource (such as a file system or peripheral) or a logical resource (such as a file). Each object has a structure or <i>object type</i> that the object manager must know about. When another executive subsystem requests the creation of an object, they send that request to the object manager which creates an empty object structure which the requesting executive subsystem then fills in <span class="reference plainlinksneverexpand" id="ref_RussinovichObjectManager_ObjectTypes"><sup><!--del_lnk--> </sup></span>. Object types define the object procedures and any data specific to the object. In this way, the object manager allows Windows 2000 to be an <!--del_lnk--> object oriented operating system, as object types can be thought of as <!--del_lnk--> classes that define <!--del_lnk--> objects.<p>Each instance of an object that is created stores its name, parameters that are passed to the object creation function, security attributes and a pointer to its object type. The object also contains an object close procedure and a reference count to tell the object manager how many other objects in the system reference that object and thereby determines whether the object can be destroyed when a close request is sent to it <span class="reference plainlinksneverexpand" id="ref_RussinovichObjectManager_Objects"><sup><!--del_lnk--> </sup></span>. Every object exists in a hierarchical object <!--del_lnk--> namespace.<p>Further executive subsystems are the following:<ul>
       <li><b>I/O Manager:</b> allows devices to communicate with user-mode subsystems. It translates user-mode read and write commands in read or write IRPs which it passes to device drivers. It accepts <!--del_lnk--> file system I/O requests and translates them into device specific calls, and can incorporate low-level device drivers that directly manipulate hardware to either read input or write output. It also includes a cache manager to improve disk performance by caching read requests and write to the disk in the background<li><b>Security Reference Monitor (SRM):</b> the primary authority for enforcing the security rules of the security integral subsystem <span class="reference plainlinksneverexpand" id="ref_Win2kResourceKitActiveDirectory"><sup><!--del_lnk--> </sup></span>. It determines whether an object or resource can be accessed, via the use of <!--del_lnk--> access control lists (ACLs), which are themselves made up of access control entries (ACEs). ACEs contain a security identifier (SID) and a list of operations that the ACE gives a select group of trustees &mdash; a user account, group account, or logon session <span class="reference plainlinksneverexpand" id="ref_MSDNTrusteeDefinition"><sup><!--del_lnk--> </sup></span> &mdash; permission (allow, deny, or audit) to that resource. <span class="reference plainlinksneverexpand" id="ref_SiyanSecurityReferenceMonitor"><sup><!--del_lnk--> </sup></span> <span class="reference plainlinksneverexpand" id="ref_MSDNACEDefinition"><sup><!--del_lnk--> </sup></span><li><b>IPC Manager:</b> short for <!--del_lnk--> Interprocess Communication Manager, this manages the communication between clients (the environment subsystem) and servers (components of the Executive). It can use two facilities: the <i>Local Procedure Call</i> (LPC) facility (clients and servers on the one computer) and the <i><!--del_lnk--> Remote Procedure Call</i> (RPC) facility (where clients and servers are situated on different computers. Microsoft has had significant security issues with the RPC facility <span class="reference plainlinksneverexpand" id="ref_RPCVulnerabilities"><sup><!--del_lnk--> </sup></span>.<li><b>Virtual Memory Manager:</b> manages <!--del_lnk--> virtual memory, allowing Windows 2000 to use the <!--del_lnk--> hard disk as a <!--del_lnk--> primary storage device (although strictly speaking it is <!--del_lnk--> secondary storage). It controls the <!--del_lnk--> paging of memory in and out of physical memory to disk storage.<li><b>Process Manager:</b> handles <!--del_lnk--> process and <!--del_lnk--> thread creation and termination<li><b>PnP Manager:</b> handles <!--del_lnk--> Plug and Play and supports device detection and installation at boot time. It also has the responsibility to stop and start devices on demand &mdash; sometimes this happens when a bus gains a new device and needs to have a device driver loaded to support that device. Both <!--del_lnk--> FireWire and <!--del_lnk--> USB are <!--del_lnk--> hot-swappable and require the services of the PnP Manager to load, stop and start devices. The PnP manager interfaces with the HAL, the rest of the executive (as necessary) and with device drivers.<li><b>Power Manager:</b> the power manager deals with power events and generates power IRPs. It coordinates these power events when several devices send a request to be turned off it determines the best way of doing this.<li>The display system has been moved from user mode into the kernel mode as a device driver contained in the file <i>Win32k.sys</i>. There are two components in this device driver &mdash; the Window Manager and the GDI: <ul>
         <li><b>Window Manager:</b> responsible for drawing windows and menus. It controls the way that output is painted to the screen and handles input events (such as from the <!--del_lnk--> keyboard and <!--del_lnk--> mouse), then passes messages to the applications that need to receive this input<li><b>GDI:</b> the <!--del_lnk--> Graphics Device Interface is responsible for tasks such as drawing <!--del_lnk--> lines and <!--del_lnk--> curves, rendering <!--del_lnk--> fonts and handling <!--del_lnk--> palettes. Windows 2000 introduced native <!--del_lnk--> alpha blending into the GDI.</ul>
      </ul>
      <p><a id="Kernel_.26_kernel-mode_drivers" name="Kernel_.26_kernel-mode_drivers"></a><h3> <span class="mw-headline">Kernel &amp; kernel-mode drivers</span></h3>
      <p>The kernel sits between the HAL and the Executive and provides multiprocessor synchronization, thread and interrupt scheduling and dispatching, and trap handling and exception dispatching. The kernel often interfaces with the process manager. <span class="reference plainlinksneverexpand" id="ref_InsideWin2kChap2"><sup><!--del_lnk--> </sup></span> The kernel is also responsible for initialising device drivers at bootup that are necessary to get the operating system up and running.<p>Windows 2000 uses kernel-mode <!--del_lnk--> device drivers to enable it to interact with <!--del_lnk--> hardware devices. Each of the drivers has well defined system routines and internal routines that it exports to the rest of the operating system. All devices are seen by user mode code as a file object in the I/O manager, though to the I/O manager itself the devices are seen as device objects, which it defines as either file, device or driver objects. Kernel mode drivers exist in three levels: highest level drivers, intermediate drivers and low level drivers. The highest level drivers, such as file system drivers for <!--del_lnk--> FAT and <!--del_lnk--> NTFS, rely on intermediate drivers. Intermediate drivers consist of function drivers &mdash; or main driver for a device &mdash; that are optionally sandwiched between lower and higher level filter drivers. The function driver then relies on a bus driver &mdash; or a driver that services a <!--del_lnk--> bus controller, adapter, or bridge &mdash; which can have an optional bus filter driver that sits between itself and the function driver. Intermediate drivers rely on the lowest level drivers to function. The <!--del_lnk--> Windows Driver Model (WDM) exists in the intermediate layer. The lowest level drivers are either legacy Windows NT device drivers that control a device directly or can be a PnP hardware bus. These lower level drivers directly control hardware and do not rely on any other drivers..<p><a id="Hardware_abstraction_layer" name="Hardware_abstraction_layer"></a><h3> <span class="mw-headline">Hardware abstraction layer</span></h3>
      <p>The Windows 2000 <!--del_lnk--> Hardware Abstraction Layer, or HAL, is a layer between the physical hardware of the computer and the rest of the operating system. It was designed to hide differences in hardware and therefore provide a consistent platform on which applications may run. The HAL includes hardware specific code that controls I/O interfaces, <!--del_lnk--> interrupt controllers and multiple processors.<p>Windows 2000 was designed to support the <!--del_lnk--> 64-bit <!--del_lnk--> DEC Alpha. After <!--del_lnk--> Compaq announced they would discontinue support of the processor, Microsoft stopped releasing tests build of Windows 2000 for AXP to the public, stopping with beta 3. Development of Windows on the Alpha continued internally in order to continue to have a 64-bit architecture development model ready until the wider availability of the Intel <!--del_lnk--> Itanium <!--del_lnk--> IA-64 architecture. The HAL now only supports hardware that is compatible with the <!--del_lnk--> Intel <!--del_lnk--> x86 architecture.<div class="printfooter"> Retrieved from &quot;<!--del_lnk--> http://en.wikipedia.org/wiki/Architecture_of_Windows_NT&quot;</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <!-- end of the left (by default at least) column -->
   <div class="visualClear">
   </div>
   <div id="footer">
    <div class="center"> This reference article is mainly selected from the English Wikipedia with only minor checks and changes (see www.wikipedia.org for details of authors and sources) and is available under the <nobr><a href="../../wp/w/Wikipedia_Text_of_the_GNU_Free_Documentation_License.htm">GNU Free Documentation License</a></nobr>. See also our <b><a href="../../disclaimer.htm">Disclaimer</a></b>. </div>
   </div>
   <script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
  </div>
  
 </body>
</html>
